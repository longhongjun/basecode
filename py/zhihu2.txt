想成为一个出色的架构师，但是学得知识不是很系统。
目前属于自学，设计模式，算法导论，编译原理，UML2.0等都在看。
自学可想而知，肯定不够系统，不够全面，也不科学。
身边也没什么人可以在这方面教导我，工作已经3年了，每次换工作都是呆在小公司，技术这块的基本自己来抗，很多东西都自己摸索的。去年开始到现在完成了算是从头到尾自己全权负责的项目（PHP-MYSQL-PYTHON，PHP的MVC框架自己写的），做下来发现自己有很多的不足。
除了看书，自学，看看MIT的公开课，还有什么办法可以让自己有很大的提升空间？
架构师是一个充满挑战的职业，知识面的宽窄往往决定着一个架构师的架构能力，所以在这一点上我比较赞成你的学习方式，就是要阅读大量的技术书籍，但我希望你不要仅限于软件相关的书籍，经常泡技术论坛，一方面可以结交朋友，一方面可以增加自己的知识面。
       公司的大小往往决定了所做的项目规模，一般的大项目不太可能直接总包给小公司去做，但这并不妨碍小公司可以分包到大项目的一部分。在做小项目的同时也可以积累丰富的经验，我自己就是一个这样的例子。
       我在小公司混迹了5年多，其中也偶尔有1两个大公司，比如大唐电信，但是基本上都是小公司，从基层的程序要到公司的开发总监都做过，甚至自己还设计过包括LED显示屏，密码键盘在内的收费系统，自己联系厂家OEM，当然这些今天已经广泛应用了，当时我们的客户用上之后还是非常震撼的。
        知识面的宽广对于一名出色的架构师来说是必不可少的技能，也许很多人对架构的理解还停留在设计模式，重构，SOA等等的软件层面，然而这仅仅是非常基本的东西，架构师的脑子里不光需要知道让软件如何高效的运行，还需要知道如何去结合网络，存储，甚至一些文件系统的特性，比如GFS，NFS，XFS，NTFS等等，而且架构师还需要知道一些编程语言的特性，C，C++，Java，PHP，Python，Lisp，JS等等，现在是一个混合编程的时代，只了解一种语言，即使再精通也会使你在架构系统的时候受到很大的局限性。
       再有一点，架构师需要对数据库技术有深刻的认识，因为现今是一个信息时代，大量的信息都是需要存储并检索的，数据库设计的不好，将会严重影响系统的性能，而这一点往往会被我们的设计人员忽略，他们只知道遵守那些范式而不会结合数据的特性去设计数据库。
       看你的编程情况，你好像做PHP开发比较多，PHP比较适合B/S结构的应用开发，这会限制一个架构师的思路，我建议你再学习一门适合做C/S开发的语言，拓宽自己的视野。
       从一个程序员到架构师是一个很大的变化，架构师需要从大的方面考虑，而不只是考虑这个模块该用哪种设计模式去开发。不能急于求成，也许是我自己变化的比较慢，我用了10年的时间，这10年里，我使用超过一年的编程语言包括了delphi，C++，Java，python，使用的数据库包括了oracle，infomix，sybase，sqlserver，mysql，javadb，sqlite等等，使用过大型机，小型机，服务器。unix，linux，windows都至少做过两年以上的开发，这些使用和开发的经历会大大增强一个人在做架构师这个职业时的技术素养。
       总之，想要成为架构师，需要有耐心，不断学习，拓宽自己的视野，不仅仅局限于自己眼前的项目，关注开源技术，关注热门技术社区的新动向。
06年写的如何循序渐进向dotnet架构师发展，可参考：
微软的DotNet开发绝对是属于那种入门容易提高难的技术。而要能够成为DotNet架构师没有三年或更长时间的编码积累基本上是不可能的。特别是在大 型软件项目中，架构师是项目核心成员，承上启下，因此RUP方法论也认同以架构为核心，体现4+1视图在整个软件开发过程中的重要作用。架构人员既要精通 技术，又要熟悉业务，而且基本对软件生命周期各阶段的相关技术都需要有相关的积累和知识储备，而这些不经过多年的磨练是很难达到这个高度的。
 
要成为一个合格的架构师首先必须是一个合格或优秀的编码人员，对于开发来讲编码始终都是最重要的一项技能，在编码过程中只要自己善于去思考和分析问题，就 可以多学到很多相关的知识和技术。所以我们在开发过程中一定要注意新知识和新技术的学习，前人经验和成果的学习。编码过程中应该去思考的一些问题有：
 1.在编码过程中自己是否做单元测试，是否使用相关工具做单元测试，如果没有的话是什么原因无法把单元测试做起来？
  2.自己编码的泄露率情况，编码泄露的BUG的原因分析
 3.是否有意识的对代码进行重构，重构过程中是否引入了相关设计模式的思想？
  4.是否对C#语言的一些高级特性进行学习，如反射调用，异步处理等。
  5.是否对Remoting和WebService两种分布式技术做过研究和对比分析？
  6.是否经常研究开源项目和开源代码，如Duwamish，PetShop，NUnit,Enterprise Library，Nant等
 7.是否对对象持久化机制和O/R Mapping等相关技术做过相关的研究
 8.平时在编码过程中是否注重公用组件和公用类的复用和抽取
 9.自己在平时工作和学习中是否经常开发些小工具提高工作效率，巩固学习知识
 
设计和编码其实是密切而不可分的，对于严格将设计和编码分开的瀑布模型一般也仅仅在大型项目中应用。而及时编码和设计分离，也不是将编码人员不需要思考， 编码活动始终是一项创造性的劳动，如果否定这个观点那就代表编码过程完全不需要人员介入而可以完全自动化。因此在这里谈设计主要还是指设计人员的系统化思 维能力，设计人员应该比开发人员站高一个层次来分析和思考问题。设计人员最重要的一个技能就是现实-
>
抽象的转换，而这个就需要谈到方法论的问题 了，技术人员需要积累面对对象分析和设计或结构化分析知识的积累，需要有较强的数据库分析和设计能力。一个设计能否成为很好的架构师关键就在这种积累的深 度和广度上面了。
 因此在设计过程中应该考虑的问题有：
 1.你现在分析和设计能力能否胜任大中型的应用系统还是只是独立功能分析和设计？
  2.设计过程中是否有意识的考虑到组件的复用和相关接口设计准则。是否能够很自然的将分析模式，设计模式的相关内容应用到自己的设计过程中。
  3.是否对XP，RUP，面向对象，结构化等方法论都有过较系统化的学习和思考。
  4.是否真正理解系统功能需求和非功能需求对系统设计的不同的指导作用。
  5.对自己设计的功能是否会根据后期的变更来反思自己的设计为何不能很好的适应变更？
  6.是否在设计过程中经常自己开发些原型来对自己的设计思路进行验证？
  7.是否专注技术的同时开始专业业务流程的分析，关注业务建模？
 
如果我们在设计和开发过程中经常关注这些知识和技能的话，成为一个合格的架构师是早晚的事情。平时能够胜任工作开发用到的知识和技能是微不足道的，如果自 己不是有意识的去学习这些知识的话，那技能是很难得到进一步提高的。我参加过两次微软的架构师培训，在北京的微软架构峰会上也有机会专门参加了 P
&
P Workshop的学习，培训老师是微软总部SmartClient Architecture and Design Guide一书的作者Edward A.Jezieski，让我感受最深是老外深刻的技术底蕴，对程序开发的执著。
 
对于DotNet架构经常用到的知识和技能储备有
 1.RUP方法论，4+1视图。用例驱动业务建模-
>
分析模型-
>
设计模型
  2.用例模式-
>
分析模式-
>
设计模式
 3.常用的分布式技术
 4.对安全，异常，日志，性能等非功能性需求的关注
 5.对应用系统整体业务的关注
 
相关的一些参考书籍(微软网站和电驴都可以下载到)
 
微软网站提供的参考书籍
 Enterprise Solution Patterns Using Microsoft .NET
 .NET Data AccessArchitecture Guide
 Application Architecture for .NET:Designing Applications and Services
 Caching Architecture Guide for .NET Framework Applications
 Designing Application-Managed Authorization
 Smart Client Architecture and Design Guide
 
其它架构方面的参考书籍
 Software Architecture In Practice
 Pattern-Oriented Software Architecture
 The Art Of Software Architecture
 Beyond Software Architecture
 
模式方面的书籍
 Analysis Patterns
 Design Patterns - Elements of Reusable Object-Oriented Software
 Applying UML and Patterns
 Design Patterns Explained
技术人员，最大的通病，就是就技术而技术，这个在初级阶段很实用，也高效，但是，想真正做好架构师这个职位，一定要清楚产品，甚至如何运营，一个好的架构，一定是符合当下并可以在一定时间内不用重构的架构（最少为半年，互联网的特点，不可能不重构，twitter之前披露的资料显示他们平均半年重构一次架构）。
关于混合语言的问题。这个问题我觉得要辩证的看，混合不一定好，也不一定不好，关键是要看团队的接受能力，单一语言的特点是整个团队的执行效率高，维护成本低；混合语言的特点是软件整体优，但维护成本和整个团队的执行成本就会很高，架构师也应该有这方面的考虑。
学习，保持好奇心，按着“1000”考虑问题，按着“1024”设计架构，总有一天，会成长起来的
从楼主题目里描述的背景出发，我的建议是这样的：
对计算机这种工程学科，自学不一定不科学，但是要保持大量的实践。
为一个成型的产品Troubleshooting是进入架构领域的好办法。有一点必须强调：它不一定得是优秀的成熟产品。对善于总结的人来说，烂产品提供的反面教材从某种角度上看更加珍贵。
无论Troubleshooting经验如何丰富，最终我们必须要得到自己设计的机会。这是从经验积累落实到架构能力的唯一方法。如果条件许可，参与开源产品其实是个很好的机会（当然有的公司明令员工除非特许否则禁止参与开源项目，比如微软）。
具体用什么技术前面很多朋友都有精彩论述，我一做驱动的，就不多啰嗦了。
还有一点必须指出的是，尽管我也认同架构的重要性，但从楼主自己说的自学内容（目前属于自学，设计模式，算法导论，编译原理，UML2.0等都在看）来看，我感觉楼主还没搞明白架构师究竟是什么。如今业界人人都在讲架构，但所谓架构师细分起来实际上有很多种，即便只是算软件行业经常要打交道的（也就是说芯片架构师不算），我见过的情况就包括如下：
网站基础设施设计师
。比如一个能承受百万级访问量的网站该如何配置服务器等。这种架构师关注的是如何配置异地服务器，如何分流请求，如果做负载均衡、备份和同步等等。
IT基础设施设计师
。这种架构师和网站基础设施的架构师有一定交集，除此之外经常还需要考虑跟硬件有关的话题，比如机房空调温度，UPS，带宽升级等等。
软件设施设计师
。这种架构师经常要负责对软件系统使用的部件做选择，比如安全系统上使用的是Kerbero还是SSH，图形系统选择本地UI还是跨平台库，网络协议或文件格式使用公开的标准还是自己设计等等。此类人往往还关心许多诸如性能、兼容性等方面的话题。
框架狂热综合症患者
。此类“架构师”最喜欢的就是在一个项目里搞个所谓的类库，里面写上一堆抽象类和接口，然后到处宣称其类库设计极其便于扩展云云并强迫同事负责实现其具体功能。另外，此类人的一个显著特征是对各种新框架或语言特性异乎寻常地热衷，却从不屑于实现一个真正具有能用功能的部件。
楼主希望自己成为架构师，这本身很好。但作为善意的提醒，我想楼主现在更需要搞清楚的是自己究竟希望成为哪一种架构师（我猜测更可能是第一种），然后才能针对性地去学习。无论如何，前三类架构师的共同特征是他们都具备对各种实际功能代码或硬件优缺点的知识，并且懂得如何根据项目需求（而非个人喜好）选择合理的技术完成任务。甚至有时候一个顶尖的架构师必须同时理解三个不同的方向——换言之，架构师的知识广度必须超过普通程序员。而至于第四种“架构师”， 可能大家已经注意到我说到此类人时用了引号，因为恕我直言，在我看来他们只由两类人组成：只会招摇撞骗的骗子，或是半桶水却不自知的可怜虫。
 当然了，要做第四种显然最容易，哈哈。
寻找大项目，争取 Troubleshooting 的机会。
 很多人都可以自顶向下yy，但是很少人会凭空获得实践的机会。自下往上更容易得到机会。制造期限较紧，不会有机会仔细分析系统，也不容易暴露出设计上的缺陷。所以有机会做 Troubleshooting 最为理想，容易获得机会，也可以更好的学习设计，更清晰的看到设计阶段的不足（较大的投资下，你看到的一般都是非常靠谱的设计）。
总结现有构架的不足。分享你的收获。大项目一般都有多个阶段，提出你的改进意见。
跟踪最新的解决方案（经常有成功的网站分享这方面的经验）。构建原型检验新技术。分享你的收获。
积累的信用会给你带来机会，耐心等待属于你的项目，珍惜她。
ps
远离 MS 。
1. 心理准备：小公司可以作为实践的最佳平台，大集团可以作为学习的平台。不要灰心。  
 2. 从小事做起：仅仅从狭隘的软件系统架构来说，全部出自于实践和对每一个细微环节的设计：小的设计组成大的架构，而这些小的设计有很多模式可以帮助你（设计模式）。因此即便你只是编写一个计算器，也最好花精力去分析，设计。
3. 架构不是大而空的：面试的时候很多面试者都认为软件三层架构就是架构了，实际上这很片面。架构实际上是由需求，团队能力，开发周期（资金支持），版权限制等一系列因素叠加影响的，没有万能架构，只有针对一个具体项目的架构，因此应当从以上的诸多方面去分析，我需要什么样子的设计。
举个例子吧（当然，仍是相当笼统）。我有一个小的项目，就是一个基于 Web 的加减乘除计算器。首先这个需求很简单，操作非常有限（10个左右），开发人员可能1-2个，今后可能追加其他操作，但是这些其他操作和现有操作关系不大。5天之内完成上线。
（1）那么我会基于这些因素采用事务脚本的设计（请参见P of EAA）：
（1.1）这种设计的优点就是简洁，开发速度快。容易处理这种数量不多，耦合不强的需求。这正适合我们。
（1.2）其缺点是在需求不断增多的情况下容易产生冗余代码，由于我们对今后的需求和现阶段的功能有所估计（数量有限，耦合不强），认为这个问题对此项目影响不大，于是这样足以。
（2）而对于事物脚本的每一个操作，可以采用命令模式（Command Pattern）进行详细设计。
（3）我的团队开发人员均熟悉 .NET 下的开发，那么我们从语言上选择 C#， Framework 上可以选择 
http://
ASP.NET
 MVC。
（4）这个项目的数据存储要求非常有限，我们可以选择用 MySQL 或者 SQLite  作为解决方案。
View(JQuery-UI, JQuery-UI mobile)
---------(JSON)-------
Controller (事务脚本支持-
>
命令模式)
---------(
http://
ADO.NET
 Provider)---
Storage(MySQL, SQLite)
这个例子的每一个部分都可以再详细划分，最终形成一个整体的决策。
总之，请不要灰心浮躁，不论多大（多小）的软件，每一个部分都影响着架构设计。设计好软件的每一个部分即可。
不要太在意【架构师】这个字眼，在技术行业，保持对新技术的探索、求知欲望、积极的去思考，脚踏实地的去做产品（或项目），你会发现，原来所谓的架构师，不过如此
要想成为一名架构师，你需要具备几点素质，并且保持平衡。
1、技术能力，有一个方面很深入，然后又要有广度。这点很重要，因为架构师所面临的都是各种别人遇不到或待解决的场景。深度保证你能在某个方面是专家并能举一反三的去保证你对其他技术方面理解和见解，广度保证你的视野。切勿技术崇拜，Java\.Net\C++ ，MS\IBM 都是在不同的方面你要了解的内容和工具。
2、管理能力，通常你要运用一个Team的能力去实现的架构，并保证。很好的计划、组织、沟通是必备的。越高的架构职位，这方面就越重要。我们所说的主架则是技术和管理的最佳结合。
3、高情商，不要期待技术完美的架构。会有很多人、资金、现实情况的因素来决定你的架构，如果是技术唯论，通常你的架构是无效的。你会很郁闷，并且无法实现。架构师的技术上最牛的地方就是综合所有因素让方案按照你的设想去实现，又让所有人满意。这意味着你是一个高情商的人。
4、最后如果作为一名应用架构师的话，首先你要做到业务专家，才能成为应用架构师。
所以呢，通常没有8-10年你很难做到。只要你持续努力，自然水到渠成。
个人觉得，有些方面的能力是天生的。
如果你想成为一个好的架构师，不是看几本书，读几年书就能成为的。
我觉得好的架构师需要2个根本的，比较天生的能力（相对比较天生，但也是日积月累出来的）。
1、在项目的开发过程中，能很快的感觉到问题会发生在哪个环节。
当然，要做到这点，最主要靠的是经验，其次才是意识，这个能力是必须的。不管什么项目，对于进度影响最大的其实就是当问题突然的出现。我们或许规避不了问题，但我们可以有准备，在前期编码，或下层代码的开发过程中，针对可能出现的问题，做一些预备工作。
2、对于每个项目的责任心。
或许，这个是做任何事情都需要的一种，人身上必须要有的要素。
当问题发生时，第一时间，和同事一起去找问题，而不是推卸自身的责任。当你的同事，在架构内，开发进度缓慢、bug数量增加、经常抱怨时，你是否需要去询问一下问题，分析一下是否是架构导致以上原因。
当然，架构师必须的当然是，写上N年的代码，这个谁都知道，就不必多说了。其他的，以上几位已经讲的很多了。
笨人拙见，祝我们一起奔向自己的未来。
个人意见：作为一个“架构师”，最重要的两点：
第一，也是最重要的一点是深刻理解业务规则和业务特点。忽略了这一点，做不出好软件。
其次，是技术视野必须要宽，宽度甚至比深度更重要。不是用某种你谙熟的技术去解决业务问题，而是根据业务问题选择合适的技术。
花大量时间去专研，多关注开源，多上论坛，多结交技术朋友，多参考互联网上一些大公司的技术分享方案
优秀架构师的绝大部分生活就是跟笔记本打交道的，哈哈，笔记本最好形影不离
还有一点就是不要太功利，如果做架构师一心只想赚大钱肯定做不好架构师，哈哈，不过真成为了优秀架构师，money自然会来的
写个十几年代码,没准你可以成为一个架构师的
我已不做开发好多年
