// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"fb_thrift_serialize", T(Variant), S(0), "thing", T(Variant), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Same as fb_serialize(). Please use fb_serialize() with better naming.\n * This function has nothing to do with Facebook's open sourced Thrift\n * package.\n *\n * @thing      mixed   What to serialize. Note that objects are not\n *                     supported.\n *\n * @return     mixed   Serialized data.\n */",
"fb_thrift_unserialize", T(Variant), S(0), "thing", T(Variant), NULL, S(0), NULL, S(0), "success", T(Variant), NULL, S(0), NULL, S(1), "errcode", T(Variant), "N;", S(2), "null", S(1), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Same as fb_unserialize(). Please use fb_unserialize() with better\n * naming. This function has nothing to do with Facebook's open sourced\n * Thrift package.\n *\n * @thing      mixed   What to unserialize.\n * @success    mixed   Whether it was successful or not.\n * @errcode    mixed   One of those FB_UNSERIALIZE_ constants to describe\n *                     what the decoding error was, if it failed.\n *\n * @return     mixed   Unserialized data.\n */",
"fb_serialize", T(Variant), S(0), "thing", T(Variant), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Seriailize data into a compact format that can be unserialized by\n * fb_unserialize().\n *\n * @thing      mixed   What to serialize. Note that objects are not\n *                     supported.\n *\n * @return     mixed   Serialized data.\n */",
"fb_unserialize", T(Variant), S(0), "thing", T(Variant), NULL, S(0), NULL, S(0), "success", T(Variant), NULL, S(0), NULL, S(1), "errcode", T(Variant), "N;", S(2), "null", S(1), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Unserialize a previously fb_thrift_serialize()-ed data.\n *\n * @thing      mixed   What to unserialize.\n * @success    mixed   Whether it was successful or not.\n * @errcode    mixed   One of those FB_UNSERIALIZE_ constants to describe\n *                     what the decoding error was, if it failed.\n *\n * @return     mixed   Unserialized data.\n */",
"fb_compact_serialize", T(Variant), S(0), "thing", T(Variant), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Serialize data into a compact format that can be unserialized by\n * fb_compact_unserialize(). In general produces smaller output compared to\n * fb_serialize(). Largest savings are on arrays with sequential (or almost\n * sequential) indexes, i.e. simple arrays like array($a, $b, $c). NOTE:\n * unlike serialize(), does not preserve internal references, i.e.\n * array(&$a, &$a) will become array($a, $a).\n *\n * @thing      mixed   What to serialize. Note that objects are not\n *                     supported.\n *\n * @return     mixed   Serialized data.\n */",
"fb_compact_unserialize", T(Variant), S(0), "thing", T(Variant), NULL, S(0), NULL, S(0), "success", T(Variant), NULL, S(0), NULL, S(1), "errcode", T(Variant), "N;", S(2), "null", S(1), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Unserialize a previously fb_compact_serialize()-ed data.\n *\n * @thing      mixed   What to unserialize.\n * @success    mixed   Whether it was successful or not.\n * @errcode    mixed   One of those FB_UNSERIALIZE_ constants to describe\n *                     what the decoding error was, if it failed.\n *\n * @return     mixed   Unserialized data.\n */",
"fb_could_include", T(Boolean), S(0), "file", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Returns whether the (php) file could be included (eg if its been\n * compiled into the binary)\n *\n * @file       string  The file to test\n *\n * @return     bool    TRUE if it could be included\n */",
"fb_intercept", T(Boolean), S(0), "name", T(String), NULL, S(0), NULL, S(0), "handler", T(Variant), NULL, S(0), NULL, S(0), "data", T(Variant), "N;", S(2), "null", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Invokes a user handler upon calling a function or a class method. If\n * this handler returns FALSE, code will continue with original function.\n * Otherwise, it will return what handler tells. The handler function looks\n * like \"intercept_handler($name, $obj, $params, $data, &$done)\", where\n * $name is orginal function's name, $obj is $this for an instance method\n * call or null for static method call or function calls, and $params are\n * original call's parameters. $data is what's passed to fb_intercept() and\n * set $done to false to indicate function should continue its execution\n * with old function as if interception did not happen. By default $done is\n * true so it will return handler's return immediately without executing\n * old function's code. Note that built-in functions are not interceptable.\n *\n * @name       string  The function or class method name to intercept. Use\n *                     \"class::method\" for method name. If empty, all\n *                     functions will be intercepted by the specified\n *                     handler and registered individual handlers will be\n *                     replaced. To make sure individual handlers not\n *                     affected by such a call, call fb_intercept() with\n *                     individual names afterwards.\n * @handler    mixed   Callback to handle the interception. Use null, false\n *                     or empty string to unregister a previously\n *                     registered handler. If name is empty, all previously\n *                     registered handlers, including those that are set by\n *                     individual function names, will be removed.\n * @data       mixed   Extra data to pass to the handler when intercepting\n *\n * @return     bool    TRUE if successful, FALSE otherwise\n */",
"fb_stubout_intercept_handler", T(Variant), S(0), "name", T(String), NULL, S(0), NULL, S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), "params", T(Array), NULL, S(0), NULL, S(0), "data", T(Variant), NULL, S(0), NULL, S(0), "done", T(Variant), NULL, S(0), NULL, S(1), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * As an interception handler, invokes a different function instead.\n * Useful for stubbing out a function in unit testing. To use this handler,\n * call fb_intercept('old_func', 'fb_stubout_intercept_handler',\n * 'new_func') and this will call new_func() every time when old_func() is\n * called and return new_func()'s return as old_func() call's return.\n *\n * @name       string  Which function function or class method that is\n *                     being intercepted.\n * @obj        mixed   Which class object this method was calling on.\n * @params     vector  The parameters original function took.\n * @data       mixed   The callback to redirect to.\n * @done       mixed   Will always set to TRUE.\n *\n * @return     mixed   What to return on behalf of original function.\n */",
"fb_rpc_intercept_handler", T(Variant), S(0), "name", T(String), NULL, S(0), NULL, S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), "params", T(Array), NULL, S(0), NULL, S(0), "data", T(Variant), NULL, S(0), NULL, S(0), "done", T(Variant), NULL, S(0), NULL, S(1), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * As an interception handler, invokes a function remotely on an RPC\n * server instead of locally.\n *\n * @name       string  Which function function or class method that is\n *                     being intercepted.\n * @obj        mixed   Which class object this method was calling on.\n * @params     vector  The parameters original function took.\n * @data       mixed   Information for RPC request in a format of\n *                     array('host' => address, 'port' => port, 'auth' =>\n *                     password, 'timeout' => seconds).\n * @done       mixed   Will always set to TRUE.\n *\n * @return     mixed   What to return on behalf of original function.\n */",
"fb_renamed_functions", T(Void), S(0), "names", T(Array), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Specifies a list of functions that are allowed to rename by calling\n * fb_rename_function().\n *\n * @names      vector  The functions that can be renamed.\n */",
"fb_rename_function", T(Boolean), S(0), "orig_func_name", T(String), NULL, S(0), NULL, S(0), "new_func_name", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Rename a function, so that a function can be called with the new name.\n *\n * When writing unit tests, one may want to stub out a function. To do so,\n * call fb_rename_function('func_to_stub_out', 'somename') then\n * fb_rename_function('new_func_to_replace_with', 'func_to_stub_out'). This\n * way, when calling func_to_stub_out(), it will actually execute\n * new_func_to_replace_with().\n *\n * @orig_func_name\n *             string  Which function to rename.\n * @new_func_name\n *             string  What is the new name.\n *\n * @return     bool    TRUE if successful, FALSE otherwise.\n */",
"fb_autoload_map", T(Boolean), S(0), "map", T(Variant), NULL, S(0), NULL, S(0), "root", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Specify a map containing an array with four optional elements. 'class',\n * 'function', 'constant', and 'failure'. The first three entries are maps\n * from names to the file where that entity is defined. An attempt to\n * access an undefined class/function/constant will look it up in the\n * appropriate map, and if found, include that file. If the entity is still\n * not defined, it will call the 'failure' entry.\n *\n * @map        mixed   The autoload map.\n * @root       string  Root to be prepended to all paths in the map.\n *\n * @return     bool    TRUE if successful, FALSE otherwise.\n */",
"fb_utf8ize", T(Boolean), S(0), "input", T(Variant), NULL, S(0), NULL, S(1), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Sanitize a string to make sure it's legal UTF-8 by stripping off any\n * characters that are not properly encoded.\n *\n * @input      mixed   What string to sanitize.\n *\n * @return     bool    Sanitized string.\n */",
"fb_utf8_strlen_deprecated", T(Int64), S(0), "input", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Count the number of UTF-8 code points in string or byte count if it's\n * not valid UTF-8.\n *\n * @input      string  The string.\n *\n * @return     int     Returns the count of code points if valid UTF-8 else\n *                     byte count.\n */",
"fb_utf8_strlen", T(Int64), S(0), "input", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Count the number of UTF-8 code points in string, substituting U+FFFD\n * for invalid sequences.\n *\n * @input      string  The string.\n *\n * @return     int     Returns the number of code points interpreting\n *                     string as UTF-8.\n */",
"fb_utf8_substr", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "start", T(Int32), NULL, S(0), NULL, S(0), "length", T(Int32), "i:2147483647;", S(13), "INT_MAX", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Cuts a portion of str specified by the start and length parameters.\n *\n * @str        string  The original string.\n * @start      int     If start is non-negative, fb_utf8_substr() cuts the\n *                     portion out of str beginning at start'th character,\n *                     counting from zero.\n *\n *                     If start is negative, fb_utf8_substr() cuts out the\n *                     portion beginning at the position, start characters\n *                     away from the end of str.\n * @length     int     If length is given and is positive, the return value\n *                     will contain at most length characters of the\n *                     portion that begins at start (depending on the\n *                     length of string).\n *\n *                     If negative length is passed, fb_utf8_substr() cuts\n *                     the portion out of str from the start'th character\n *                     up to the character that is length characters away\n *                     from the end of the string. In case start is also\n *                     negative, the start position is calculated\n *                     beforehand according to the rule explained above.\n *\n * @return     mixed   Returns the portion of str specified by the start\n *                     and length parameters.\n *\n *                     If str is shorter than start characters long, FALSE\n *                     will be returned.\n */",
"fb_call_user_func_safe", T(Array), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), NULL, S(109264896), "/**\n * ( HipHop specific )\n *\n * This function invokes $function with the arguments specified in its\n * parameter list. It returns an array of two elements, the first being a\n * boolean specifying whether or not the function was invoked, the latter\n * being the return value, or null if it was not invoked. The function may\n * be any PHP callable, either a string function name, an array of object\n * instance and method, or array of classname and static class method.\n *\n * @function   mixed   The callback to invoke.\n *\n * @return     vector  Two elements, 0 is a bool whether function was\n *                     invoked, 1 is the return value if invoked.\n */", S(hphp_opt_fb_call_user_func),
"fb_call_user_func_safe_return", T(Variant), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), "def", T(Variant), NULL, S(0), NULL, S(0), NULL, S(109264896), "/**\n * ( HipHop specific )\n *\n * This function invokes $function with the arguments specified in its\n * parameter\n * list. If the function is not defined, $default_rval is returned. Note\n * that\n * the default return value comes BEFORE the arguments to the function.\n *\n * @function   mixed   The callback to invoke.\n * @def        mixed   Value returned when function does not exist.\n *\n * @return     mixed   The result of the function call if defined,\n *                     otherwise default.\n */", S(hphp_opt_fb_call_user_func),
"fb_call_user_func_array_safe", T(Array), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), "params", T(Array), NULL, S(0), NULL, S(0), NULL, S(109133824), "/**\n * ( HipHop specific )\n *\n * This function invokes $function with the arguments specified in its\n * parameter list. It returns an array of two elements, the first being a\n * boolean specifying whether or not the function was invoked, the latter\n * being the return value, or null if it was not invoked. The function may\n * be any PHP callable, either a string function name, an array of object\n * instance and method, or array of classname and static class method.\n *\n * @function   mixed   The callback to invoke.\n * @params     vector  The function parameters to invoke with.\n *\n * @return     vector  Two elements, 0 is a bool whether function was\n *                     invoked, 1 is the return value if invoked.\n */", S(hphp_opt_fb_call_user_func),
"fb_get_code_coverage", T(Variant), S(0), "flush", T(Boolean), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Returns code coverage data collected so far. Turn on code coverage by\n * Eval.RecordCodeCoverage or by using fb_enable_code_coverage and call\n * this function periodically to get results. Eval.CodeCoverageOutputFile\n * allows you to specify an output file to store results at end of a script\n * run from command line. Use this function in server mode to collect\n * results instead.\n *\n * @flush      bool    Whether to clear data after this function call.\n *\n * @return     mixed\n */",
"fb_enable_code_coverage", T(Void), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Enables code coverage. The coverage information is cleared.\n *\n */",
"fb_disable_code_coverage", T(Variant), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Disables and returns code coverage. The coverage information is\n * cleared.\n *\n * @return     mixed\n */",
"xhprof_enable", T(Void), S(0), "flags", T(Int32), "i:0;", S(4), "0", S(0), "args", T(Array), "N;", S(2), "null", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Starts xhprof profiling. For details on how to use this function,\n * please refer to http://mirror.facebook.net/facebook/xhprof/doc.html.\n *\n * @flags      int     One of those XHPROF_FLAGS_ constant to specify what\n *                     to profile.\n * @args       vector  Extra argument to reserve for future use.\n */",
"xhprof_disable", T(Variant), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Ends and reports xhprof profiling result. For details on how to use\n * this function, please refer to\n * http://mirror.facebook.net/facebook/xhprof/doc.html.\n *\n * @return     mixed   Profile result.\n */",
"xhprof_network_enable", T(Void), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Starts xhprof network I/O profiling.\n *\n */",
"xhprof_network_disable", T(Variant), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Ends and reports xhprof network I/O profiling result.\n *\n * @return     mixed   Profile result.\n */",
"xhprof_frame_begin", T(Void), S(0), "name", T(String), NULL, S(0), NULL, S(0), NULL, S(4276224), "/**\n * ( HipHop specific )\n *\n * Starts an artificial frame. Together with xhprof_frame_end(), this\n * times one block of code execution as if it were a function call,\n * allowing people to define arbitrary function boundaries. Prefer to use\n * XhprofFrame classobjects instead of calling this function directly.\n *\n * @name       string  The \"virtual\" function's name.\n */",
"xhprof_frame_end", T(Void), S(0), NULL, S(4276224), "/**\n * ( HipHop specific )\n *\n * Ends an artificial frame that xhprof_frame_begin() started. One has to\n * make sure there are no exceptions in between these two calls, as\n * otherwise, it may report incorrect timings. Also, xhprof_frame_begin()\n * and xhprof_frame_end() have to be paired up really well, so not to\n * interfere with regular function's profiling, unless that's the\n * intention. Prefer to use XhprofFrame classobjects instead of calling\n * this function directly.\n *\n */",
"xhprof_run_trace", T(Variant), S(0), "packedTrace", T(String), NULL, S(0), NULL, S(0), "flags", T(Int32), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Re-runs a prior trace and generates xhprof output.\n *\n * @packedTrace\n *             string  A packed trace returned from xhprof_disable.\n * @flags      int     One of those XHPROF_FLAGS_ constant to specify what\n *                     to profile.\n *\n * @return     mixed   Profile result.\n */",
"xhprof_sample_enable", T(Void), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Starts sampling based xhprof profiling. For details on how to use this\n * function, please refer to\n * http://mirror.facebook.net/facebook/xhprof/doc.html.\n *\n */",
"xhprof_sample_disable", T(Variant), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Ends sampling based xhprof profiling. For details on how to use this\n * function, please refer to\n * http://mirror.facebook.net/facebook/xhprof/doc.html.\n *\n * @return     mixed\n */",
"fb_load_local_databases", T(Void), S(0), "servers", T(Array), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Load a map from database IDs (32-bit integers) to database connection\n * information for fb_crossall_query(), which only takes database IDs.\n *\n * @servers    map     The map to load. The format is array($id1 =>\n *                     array('ip' => {ip address}, 'db' => {database name},\n *                     'port' => {port number}, 'username' => {user name\n *                     for login}, 'password' => {password for login}),\n *                     $id2 => ...), where $id1 and $ids2 are arbitrary\n *                     32-bit integers that fb_crossall_query() can use to\n *                     refer to the physical databases.\n */",
"fb_parallel_query", T(Array), S(0), "sql_map", T(Array), NULL, S(0), NULL, S(0), "max_thread", T(Int32), "i:50;", S(5), "50", S(0), "combine_result", T(Boolean), "b:1;", S(4), "true", S(0), "retry_query_on_fail", T(Boolean), "b:1;", S(4), "true", S(0), "connect_timeout", T(Int32), "i:-1;", S(5), "-1", S(0), "read_timeout", T(Int32), "i:-1;", S(5), "-1", S(0), "timeout_in_ms", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Runs MySQL queries in parallel. Internally it will spawn threads, each\n * of which executes one or more queries sequentially.\n *\n * @sql_map    map     The map to locate databases to query. The format is\n *                     array($id1 => array('sql' => { SQL query to\n *                     execute}, 'ip' => {ip address}, 'db' => {database\n *                     name}, 'port' => {port number}, 'username' => {user\n *                     name for login}, 'password' => {password for\n *                     login}), $id2 => ...), where $id1 and $ids2 are\n *                     arbitrary 32-bit integers that fb_crossall_query()\n *                     can use to refer to the physical databases.\n * @max_thread int     Maximum number of threads to run.\n * @combine_result\n *             bool    Whether to merge dataset into just one, without maps\n *                     of database IDs. If TRUE, result set would be\n *                     array(..., 'result' => {dataset}, ...) directly.\n * @retry_query_on_fail\n *             bool    Whether or not retry query once when it fails. This\n *                     may be useful if database connection is temporarily\n *                     lost during queries and re-executing a SELECT or\n *                     other idempotent queries are acceptable.\n * @connect_timeout\n *             int     Connection timeout. If timeout_in_ms is TRUE, it is\n *                     in seconds. Otherwise, it is in milli-seconds.\n * @read_timeout\n *             int     Query timeout. If timeout_in_ms is TRUE, it is in\n *                     seconds. Otherwise, it is in milli-seconds.\n * @timeout_in_ms\n *             bool    Whether connect_timeout or read_timeout are in\n *                     seconds or milli-seconds.\n *\n * @return     map     Query result in a format of array('affected' =>\n *                     {number of affected rows}, 'result' => array({dbId1}\n *                     => {dataset}, {dbId2} => ...), 'error' =>\n *                     array({dbId1} => {error message}, {dbId2} => ....),\n *                     'errno' => array({dbId1} => {error code}, {dbId2} =>\n *                     ....)).\n */",
"fb_crossall_query", T(Array), S(0), "sql", T(String), NULL, S(0), NULL, S(0), "max_thread", T(Int32), "i:50;", S(5), "50", S(0), "retry_query_on_fail", T(Boolean), "b:1;", S(4), "true", S(0), "connect_timeout", T(Int32), "i:-1;", S(5), "-1", S(0), "read_timeout", T(Int32), "i:-1;", S(5), "-1", S(0), "timeout_in_ms", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Runs a MySQL query against all databases in the map loaded by\n * fb_load_local_databases(). Internally it will spawn threads, each of\n * which executes the same query against one or more databases\n * sequentially.\n *\n * @sql        string  The SQL query to execute. For safety reasons, this\n *                     has to be a SELECT statement with WHERE clause.\n * @max_thread int     Maximum number of threads to run.\n * @retry_query_on_fail\n *             bool    Whether or not retry query once when it fails. This\n *                     may be useful if database connection is temporarily\n *                     lost during queries and re-executing a SELECT or\n *                     other idempotent queries are acceptable.\n * @connect_timeout\n *             int     Connection timeout. If timeout_in_ms is TRUE, it is\n *                     in seconds. Otherwise, it is in milli-seconds.\n * @read_timeout\n *             int     Query timeout. If timeout_in_ms is TRUE, it is in\n *                     seconds. Otherwise, it is in milli-seconds.\n * @timeout_in_ms\n *             bool    Whether connect_timeout or read_timeout are in\n *                     seconds or milli-seconds.\n *\n * @return     map     Query result in a format of array('affected' =>\n *                     {number of affected rows}, 'result' => array({dbId1}\n *                     => {dataset}, {dbId2} => ...), 'error' =>\n *                     array({dbId1} => {error message}, {dbId2} => ....),\n *                     'errno' => array({dbId1} => {error code}, {dbId2} =>\n *                     ....)).\n */",
"fb_set_taint", T(Void), S(0), "str", T(Variant), NULL, S(0), NULL, S(1), "taint", T(Int32), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Taints a string with a flag or a bit. This bit is contagious in string\n * operations, being carried over to new strings that are copied or\n * composed from this string. This may be used for checking dirty or clean\n * status of end user's input for different purposes.\n *\n * @str        mixed   The string to taint.\n * @taint      int     The bit to flag.\n */",
"fb_unset_taint", T(Void), S(0), "str", T(Variant), NULL, S(0), NULL, S(1), "taint", T(Int32), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Untaints a string by clearing off the bit that was set or carried over.\n *\n * @str        mixed   The string to untaint.\n * @taint      int     The bit to clear.\n */",
"fb_get_taint", T(Boolean), S(0), "str", T(String), NULL, S(0), NULL, S(0), "taint", T(Int32), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Checks to see if a bit is set.\n *\n * @str        string  The string to check.\n * @taint      int     The bit to check against.\n *\n * @return     bool    Whether the taint was set.\n */",
"fb_get_taint_warning_counts", T(Array), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Get counts of various suppressed taint warnings.\n *\n * @return     vector  The array of warning counts.\n */",
"fb_enable_html_taint_trace", T(Void), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Enable an optional tracing feature.\n *\n */",
"fb_const_fetch", T(Variant), S(0), "key", T(Variant), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Fetches a constant string from a special store that's compiled into the\n * executable. This is faster than apc_fetch(), which needs locking between\n * different threads. This store is immutable and loaded once with strings\n * that are never changed. Therefore, no locking is needed when accessed by\n * different threads.\n *\n * @key        mixed   The key for locating the value.\n *\n * @return     mixed   The value that was stored.\n */",
"fb_output_compression", T(Boolean), S(0), "new_value", T(Boolean), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Toggles the compression status of HipHop output, if headers have\n * already been sent this may be ignored.\n *\n * @new_value  bool    The new value for the compression state.\n *\n * @return     bool    The old value.\n */",
"fb_set_exit_callback", T(Void), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Set a callback function that is called when php tries to exit.\n *\n * @function   mixed   The callback to invoke. An exception object will be\n *                     passed to the function\n */",
"fb_get_flush_stat", T(Array), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Get stats on flushing the data from server.\n *\n * @return     map     Query result in a format of array('total' => {number\n *                     of total bytes to flush}, 'sent' => {number of bytes\n *                     sent out}, 'time' => {time for flushing in us}).\n */",
"fb_get_last_flush_size", T(Int64), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Get stats on flushing the last data chunk from server.\n *\n * @return     int     Total number of bytes flushed since last flush\n */",
"fb_lazy_stat", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fb-lazy-stat.php )\n *\n * Gathers the statistics of the file named by filename, like stat(),\n * except uses cached information from an internal inotify-based mechanism\n * that may not be updated during the duration of a request.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Same format at the normal php stat() function.\n */",
"fb_lazy_lstat", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fb-lazy-lstat.php )\n *\n * Gathers the statistics of the file named by filename, like lstat(),\n * except uses cached information from an internal inotify-based mechanism\n * that may not be updated during the duration of a request.\n *\n * @filename   string  Path to a file or a symbolic link.\n *\n * @return     mixed   Same format as the normal php lstat() function.\n */",
"fb_lazy_realpath", T(String), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fb-lazy-realpath.php )\n *\n * Returns a canonicalized version of the input path that contains no\n * symbolic links, like realpath(), except uses cached information from an\n * internal inotify-based mechanism that may not be updated during the\n * duration of a request.\n *\n * @filename   string  Fake path to the file.\n *\n * @return     string  Real path of the file.\n */",
"fb_setprofile", T(Void), S(0), "callback", T(Variant), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Set a callback function to be called whenever a function is entered or\n * exited. Takes 3 args, the function name, the mode (enter or exit), and\n * an array describing the frame.\n *\n * @callback   mixed   Profiler function to call or null to disable\n *\n * @return     mixed   No value is returned.\n */",
"fb_gc_collect_cycles", T(String), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Invoke the backup cycle collector\n *\n * @return     string  Some interesting statistics\n */",
"fb_gc_detect_cycles", T(Void), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Detect cyclic garbage in the heap and print information about it to a\n * file\n *\n * @filename   string  filename to write information about cyclic garbage\n *                     to\n */",

#elif EXT_TYPE == 1
"FB_UNSERIALIZE_NONSTRING_VALUE", T(Int64),
"FB_UNSERIALIZE_UNEXPECTED_END", T(Int64),
"FB_UNSERIALIZE_UNRECOGNIZED_OBJECT_TYPE", T(Int64),
"FB_UNSERIALIZE_UNEXPECTED_ARRAY_KEY_TYPE", T(Int64),
"XHPROF_FLAGS_NO_BUILTINS", T(Int64),
"XHPROF_FLAGS_CPU", T(Int64),
"XHPROF_FLAGS_MEMORY", T(Int64),
"XHPROF_FLAGS_VTSC", T(Int64),
"XHPROF_FLAGS_TRACE", T(Int64),
"XHPROF_FLAGS_MEASURE_XHPROF_DISABLE", T(Int64),
"XHPROF_FLAGS_MALLOC", T(Int64),
"TAINT_NONE", T(Int64),
"TAINT_HTML", T(Int64),
"TAINT_MUTATED", T(Int64),
"TAINT_SQL", T(Int64),
"TAINT_SHELL", T(Int64),
"TAINT_TRACE_HTML", T(Int64),
"TAINT_ALL", T(Int64),
"TAINT_TRACE_SELF", T(Int64),

#elif EXT_TYPE == 2

#elif EXT_TYPE == 4
extern ExpressionPtr hphp_opt_fb_call_user_func(CodeGenerator *cg, AnalysisResultConstPtr ar, SimpleFunctionCallPtr call, int mode);

#endif
