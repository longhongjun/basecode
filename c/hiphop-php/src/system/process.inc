// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"pcntl_alarm", T(Int64), S(0), "seconds", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-alarm.php )\n *\n * Creates a timer that will send a SIGALRM signal to the process after\n * the given number of seconds. Any call to pcntl_alarm() will cancel any\n * previously set alarm.\n *\n * @seconds    int     The number of seconds to wait. If seconds is zero,\n *                     no new alarm is created.\n *\n * @return     int     Returns the time in seconds that any previously\n *                     scheduled alarm had remaining before it was to be\n *                     delivered, or 0 if there was no previously scheduled\n *                     alarm.\n */",
"pcntl_exec", T(Void), S(0), "path", T(String), NULL, S(0), NULL, S(0), "args", T(Array), "N;", S(2), "null", S(0), "envs", T(Array), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-exec.php )\n *\n * Executes the program with the given arguments.\n *\n * @path       string  path must be the path to a binary executable or a\n *                     script with a valid path pointing to an executable\n *                     in the shebang ( #!/usr/local/bin/perl for example)\n *                     as the first line. See your system's man execve(2)\n *                     page for additional information.\n * @args       vector  args is an array of argument strings passed to the\n *                     program.\n * @envs       vector  envs is an array of strings which are passed as\n *                     environment to the program. The array is in the\n *                     format of name => value, the key being the name of\n *                     the environmental variable and the value being the\n *                     value of that variable.\n *\n * @return     mixed   Returns FALSE on error and does not return on\n *                     success.\n */",
"pcntl_fork", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-fork.php )\n *\n * The pcntl_fork() function creates a child process that differs from the\n * parent process only in its PID and PPID. Please see your system's\n * fork(2) man page for specific details as to how fork works on your\n * system.\n *\n * @return     int     On success, the PID of the child process is returned\n *                     in the parent's thread of execution, and a 0 is\n *                     returned in the child's thread of execution. On\n *                     failure, a -1 will be returned in the parent's\n *                     context, no child process will be created, and a PHP\n *                     error is raised.\n */", 
"pcntl_getpriority", T(Variant), S(0), "pid", T(Int32), "i:0;", S(4), "0", S(0), "process_identifier", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-getpriority.php )\n *\n * pcntl_getpriority() gets the priority of pid. Because priority levels\n * can differ between system types and kernel versions, please see your\n * system's getpriority(2) man page for specific details.\n *\n * @pid        int     If not specified, the pid of the current process is\n *                     used.\n * @process_identifier\n *             int     One of PRIO_PGRP, PRIO_USER or PRIO_PROCESS.\n *\n * @return     mixed   pcntl_getpriority() returns the priority of the\n *                     process or FALSE on error. A lower numerical value\n *                     causes more favorable scheduling. WarningThis\n *                     function may return Boolean FALSE, but may also\n *                     return a non-Boolean value which evaluates to FALSE,\n *                     such as 0 or \"\". Please read the section on Booleans\n *                     for more information. Use the === operator for\n *                     testing the return value of this function.\n */",
"pcntl_setpriority", T(Boolean), S(0), "priority", T(Int32), NULL, S(0), NULL, S(0), "pid", T(Int32), "i:0;", S(4), "0", S(0), "process_identifier", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-setpriority.php )\n *\n * pcntl_setpriority() sets the priority of pid.\n *\n * @priority   int     priority is generally a value in the range -20 to\n *                     20. The default priority is 0 while a lower\n *                     numerical value causes more favorable scheduling.\n *                     Because priority levels can differ between system\n *                     types and kernel versions, please see your system's\n *                     setpriority(2) man page for specific details.\n * @pid        int     If not specified, the pid of the current process is\n *                     used.\n * @process_identifier\n *             int     One of PRIO_PGRP, PRIO_USER or PRIO_PROCESS.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"pcntl_signal", T(Boolean), S(0), "signo", T(Int32), NULL, S(0), NULL, S(0), "handler", T(Variant), NULL, S(0), NULL, S(0), "restart_syscalls", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-signal.php )\n *\n * The pcntl_signal() function installs a new signal handler for the\n * signal indicated by signo.\n *\n * @signo      int     The signal number.\n * @handler    mixed   The signal handler which may be the name of a user\n *                     created function, or method, or either of the two\n *                     global constants SIG_IGN or SIG_DFL.\n *\n *                     Note that when you set a handler to an object\n *                     method, that object's reference count is increased\n *                     which makes it persist until you either change the\n *                     handler to something else, or your script ends.\n * @restart_syscalls\n *             bool    Specifies whether system call restarting should be\n *                     used when this signal arrives.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"pcntl_wait", T(Int64), S(0), "status", T(Variant), NULL, S(0), NULL, S(1), "options", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wait.php )\n *\n * The wait function suspends execution of the current process until a\n * child has exited, or until a signal is delivered whose action is to\n * terminate the current process or to call a signal handling function. If\n * a child has already exited by the time of the call (a so-called \"zombie\"\n * process), the function returns immediately. Any system resources used by\n * the child are freed. Please see your system's wait(2) man page for\n * specific details as to how wait works on your system.\n *\n * This function is equivalent to calling pcntl_waitpid() with a -1 pid\n * and no options.\n *\n * @status     mixed   pcntl_wait() will store status information in the\n *                     status parameter which can be evaluated using the\n *                     following functions: pcntl_wifexited(),\n *                     pcntl_wifstopped(), pcntl_wifsignaled(),\n *                     pcntl_wexitstatus(), pcntl_wtermsig() and\n *                     pcntl_wstopsig().\n * @options    int     If wait3 is available on your system (mostly\n *                     BSD-style systems), you can provide the optional\n *                     options parameter. If this parameter is not\n *                     provided, wait will be used for the system call. If\n *                     wait3 is not available, providing a value for\n *                     options will have no effect. The value of options is\n *                     the value of zero or more of the following two\n *                     constants OR'ed together: Possible values for\n *                     options WNOHANG Return immediately if no child has\n *                     exited. WUNTRACED Return for children which are\n *                     stopped, and whose status has not been reported.\n *\n * @return     int     pcntl_wait() returns the process ID of the child\n *                     which exited, -1 on error or zero if WNOHANG was\n *                     provided as an option (on wait3-available systems)\n *                     and no child was available.\n */",
"pcntl_waitpid", T(Int64), S(0), "pid", T(Int32), NULL, S(0), NULL, S(0), "status", T(Variant), NULL, S(0), NULL, S(1), "options", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-waitpid.php )\n *\n * Suspends execution of the current process until a child as specified by\n * the pid argument has exited, or until a signal is delivered whose action\n * is to terminate the current process or to call a signal handling\n * function.\n *\n * If a child as requested by pid has already exited by the time of the\n * call (a so-called \"zombie\" process), the function returns immediately.\n * Any system resources used by the child are freed. Please see your\n * system's waitpid(2) man page for specific details as to how waitpid\n * works on your system.\n *\n * @pid        int     The value of pid can be one of the following:\n *                     possible values for pid < -1 wait for any child\n *                     process whose process group ID is equal to the\n *                     absolute value of pid. -1 wait for any child\n *                     process; this is the same behaviour that the wait\n *                     function exhibits. 0 wait for any child process\n *                     whose process group ID is equal to that of the\n *                     calling process. > 0 wait for the child whose\n *                     process ID is equal to the value of pid.\n *\n *                     Specifying -1 as the pid is equivalent to the\n *                     functionality pcntl_wait() provides (minus options).\n * @status     mixed   pcntl_waitpid() will store status information in the\n *                     status parameter which can be evaluated using the\n *                     following functions: pcntl_wifexited(),\n *                     pcntl_wifstopped(), pcntl_wifsignaled(),\n *                     pcntl_wexitstatus(), pcntl_wtermsig() and\n *                     pcntl_wstopsig().\n * @options    int     The value of options is the value of zero or more of\n *                     the following two global constants OR'ed together:\n *                     possible values for options WNOHANG return\n *                     immediately if no child has exited. WUNTRACED return\n *                     for children which are stopped, and whose status has\n *                     not been reported.\n *\n * @return     int     pcntl_waitpid() returns the process ID of the child\n *                     which exited, -1 on error or zero if WNOHANG was\n *                     used and no child was available\n */",
"pcntl_wexitstatus", T(Int64), S(0), "status", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wexitstatus.php )\n *\n * Returns the return code of a terminated child. This function is only\n * useful if pcntl_wifexited() returned TRUE.\n *\n * @status     int     status parameter is the status parameter supplied to\n *                     a successful call to pcntl_waitpid().\n *\n * @return     int     Returns the return code, as an integer.\n */",
"pcntl_wifexited", T(Boolean), S(0), "status", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wifexited.php )\n *\n * Checks whether the child status code represents a normal exit.\n *\n * @status     int     status parameter is the status parameter supplied to\n *                     a successful call to pcntl_waitpid().\n *\n * @return     bool    Returns TRUE if the child status code represents a\n *                     normal exit, FALSE otherwise.\n */",
"pcntl_wifsignaled", T(Boolean), S(0), "status", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wifsignaled.php )\n *\n * Checks whether the child process exited because of a signal which was\n * not caught.\n *\n * @status     int     status parameter is the status parameter supplied to\n *                     a successful call to pcntl_waitpid().\n *\n * @return     bool    Returns TRUE if the child process exited because of\n *                     a signal which was not caught, FALSE otherwise.\n */",
"pcntl_wifstopped", T(Boolean), S(0), "status", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wifstopped.php )\n *\n * Checks whether the child process which caused the return is currently\n * stopped; this is only possible if the call to pcntl_waitpid() was done\n * using the option WUNTRACED.\n *\n * @status     int     status parameter is the status parameter supplied to\n *                     a successful call to pcntl_waitpid().\n *\n * @return     bool    Returns TRUE if the child process which caused the\n *                     return is currently stopped, FALSE otherwise.\n */",
"pcntl_wstopsig", T(Int64), S(0), "status", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wstopsig.php )\n *\n * Returns the number of the signal which caused the child to stop. This\n * function is only useful if pcntl_wifstopped() returned TRUE.\n *\n * @status     int     status parameter is the status parameter supplied to\n *                     a successful call to pcntl_waitpid().\n *\n * @return     int     Returns the signal number.\n */",
"pcntl_wtermsig", T(Int64), S(0), "status", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pcntl-wtermsig.php )\n *\n * Returns the number of the signal that caused the child process to\n * terminate. This function is only useful if pcntl_wifsignaled() returned\n * TRUE.\n *\n * @status     int     status parameter is the status parameter supplied to\n *                     a successful call to pcntl_waitpid().\n *\n * @return     int     Returns the signal number, as an integer.\n */",
"pcntl_signal_dispatch", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pcntl-signal-dispatch.php )\n *\n * The pcntl_signal_dispatch() function calls the signal handlers\n * installed by pcntl_signal() for each pending signal.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"shell_exec", T(String), S(0), "cmd", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.shell-exec.php )\n *\n * This function is identical to the backtick operator.\n *\n * @cmd        string  The command that will be executed.\n *\n * @return     string  The output from the executed command.\n */",
"exec", T(String), S(0), "command", T(String), NULL, S(0), NULL, S(0), "output", T(Variant), "N;", S(2), "null", S(1), "return_var", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.exec.php )\n *\n * exec() executes the given command.\n *\n * @command    string  The command that will be executed.\n * @output     mixed   If the output argument is present, then the\n *                     specified array will be filled with every line of\n *                     output from the command. Trailing whitespace, such\n *                     as \\n, is not included in this array. Note that if\n *                     the array already contains some elements, exec()\n *                     will append to the end of the array. If you do not\n *                     want the function to append elements, call unset()\n *                     on the array before passing it to exec().\n * @return_var mixed   If the return_var argument is present along with the\n *                     output argument, then the return status of the\n *                     executed command will be written to this variable.\n *\n * @return     string  The last line from the result of the command. If you\n *                     need to execute a command and have all the data from\n *                     the command passed directly back without any\n *                     interference, use the passthru() function.\n *\n *                     To get the output of the executed command, be sure\n *                     to set and use the output parameter.\n */",
"passthru", T(Void), S(0), "command", T(String), NULL, S(0), NULL, S(0), "return_var", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.passthru.php )\n *\n * The passthru() function is similar to the exec() function in that it\n * executes a command. This function should be used in place of exec() or\n * system() when the output from the Unix command is binary data which\n * needs to be passed directly back to the browser. A common use for this\n * is to execute something like the pbmplus utilities that can output an\n * image stream directly. By setting the Content-type to image/gif and then\n * calling a pbmplus program to output a gif, you can create PHP scripts\n * that output images directly.\n *\n * @command    string  The command that will be executed.\n * @return_var mixed   If the return_var argument is present, the return\n *                     status of the Unix command will be placed here.\n *\n * @return     mixed   No value is returned.\n */",
"system", T(String), S(0), "command", T(String), NULL, S(0), NULL, S(0), "return_var", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.system.php )\n *\n * system() is just like the C version of the function in that it executes\n * the given command and outputs the result.\n *\n * The system() call also tries to automatically flush the web server's\n * output buffer after each line of output if PHP is running as a server\n * module.\n *\n * If you need to execute a command and have all the data from the command\n * passed directly back without any interference, use the passthru()\n * function.\n *\n * @command    string  The command that will be executed.\n * @return_var mixed   If the return_var argument is present, then the\n *                     return status of the executed command will be\n *                     written to this variable.\n *\n * @return     string  Returns the last line of the command output on\n *                     success, and FALSE on failure.\n */",
"proc_open", T(Variant), S(0), "cmd", T(String), NULL, S(0), NULL, S(0), "descriptorspec", T(Array), NULL, S(0), NULL, S(0), "pipes", T(Variant), NULL, S(0), NULL, S(1), "cwd", T(String), "N;", S(2), "null", S(0), "env", T(Variant), "N;", S(2), "null", S(0), "other_options", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.proc-open.php )\n *\n * proc_open() is similar to popen() but provides a much greater degree of\n * control over the program execution.\n *\n * @cmd        string  The command to execute\n * @descriptorspec\n *             vector  An indexed array where the key represents the\n *                     descriptor number and the value represents how PHP\n *                     will pass that descriptor to the child process. 0 is\n *                     stdin, 1 is stdout, while 2 is stderr.\n *\n *                     Each element can be: An array describing the pipe\n *                     to pass to the process. The first element is the\n *                     descriptor type and the second element is an option\n *                     for the given type. Valid types are pipe (the second\n *                     element is either r to pass the read end of the pipe\n *                     to the process, or w to pass the write end) and file\n *                     (the second element is a filename). A stream\n *                     resource representing a real file descriptor (e.g.\n *                     opened file, a socket, STDIN).\n *\n *                     The file descriptor numbers are not limited to 0, 1\n *                     and 2 - you may specify any valid file descriptor\n *                     number and it will be passed to the child process.\n *                     This allows your script to interoperate with other\n *                     scripts that run as \"co-processes\". In particular,\n *                     this is useful for passing passphrases to programs\n *                     like PGP, GPG and openssl in a more secure manner.\n *                     It is also useful for reading status information\n *                     provided by those programs on auxiliary file\n *                     descriptors.\n * @pipes      mixed   Will be set to an indexed array of file pointers\n *                     that correspond to PHP's end of any pipes that are\n *                     created.\n * @cwd        string  The initial working dir for the command. This must\n *                     be an absolute directory path, or NULL if you want\n *                     to use the default value (the working dir of the\n *                     current PHP process)\n * @env        mixed   An array with the environment variables for the\n *                     command that will be run, or NULL to use the same\n *                     environment as the current PHP process\n * @other_options\n *             mixed   Allows you to specify additional options. Currently\n *                     supported options include: suppress_errors (windows\n *                     only): suppresses errors generated by this function\n *                     when it's set to TRUE bypass_shell (windows only):\n *                     bypass cmd.exe shell when set to TRUE context:\n *                     stream context used when opening files (created with\n *                     stream_context_create()) binary_pipes: open pipes in\n *                     binary mode, instead of using the usual\n *                     stream_encoding\n *\n * @return     mixed   Returns a resource representing the process, which\n *                     should be freed using proc_close() when you are\n *                     finished with it. On failure returns FALSE.\n */",
"proc_terminate", T(Boolean), S(0), "process", T(Object), NULL, S(0), NULL, S(0), "signal", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.proc-terminate.php )\n *\n * Signals a process (created using proc_open()) that it should terminate.\n * proc_terminate() returns immediately and does not wait for the process\n * to terminate.\n *\n * proc_terminate() allows you terminate the process and continue with\n * other tasks. You may poll the process (to see if it has stopped yet) by\n * using the proc_get_status() function.\n *\n * @process    resource\n *                     The proc_open() resource that will be closed.\n * @signal     int     This optional parameter is only useful on POSIX\n *                     operating systems; you may specify a signal to send\n *                     to the process using the kill(2) system call. The\n *                     default is SIGTERM.\n *\n * @return     bool    Returns the termination status of the process that\n *                     was run.\n */",
"proc_close", T(Int64), S(0), "process", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.proc-close.php )\n *\n * proc_close() is similar to pclose() except that it only works on\n * processes opened by proc_open(). proc_close() waits for the process to\n * terminate, and returns its exit code. If you have open pipes to that\n * process, you should fclose() them prior to calling this function in\n * order to avoid a deadlock - the child process may not be able to exit\n * while the pipes are open.\n *\n * @process    resource\n *                     The proc_open() resource that will be closed.\n *\n * @return     int     Returns the termination status of the process that\n *                     was run.\n */",
"proc_get_status", T(Array), S(0), "process", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.proc-get-status.php )\n *\n * proc_get_status() fetches data about a process opened using\n * proc_open().\n *\n * @process    resource\n *                     The proc_open() resource that will be evaluated.\n *\n * @return     map\n */",
"proc_nice", T(Boolean), S(0), "increment", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.proc-nice.php )\n *\n * proc_nice() changes the priority of the current process by the amount\n * specified in increment. A positive increment will lower the priority of\n * the current process, whereas a negative increment will raise the\n * priority.\n *\n * proc_nice() is not related to proc_open() and its associated functions\n * in any way.\n *\n * @increment  int     The increment value of the priority change.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. If an\n *                     error occurs, like the user lacks permission to\n *                     change the priority, an error of level E_WARNING is\n *                     also generated.\n */",
"escapeshellarg", T(String), S(0), "arg", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.escapeshellarg.php )\n *\n * escapeshellarg() adds single quotes around a string and quotes/escapes\n * any existing single quotes allowing you to pass a string directly to a\n * shell function and having it be treated as a single safe argument. This\n * function should be used to escape individual arguments to shell\n * functions coming from user input. The shell functions include exec(),\n * system() and the backtick operator.\n *\n * @arg        string  The argument that will be escaped.\n *\n * @return     string  The escaped string.\n */",
"escapeshellcmd", T(String), S(0), "command", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.escapeshellcmd.php )\n *\n * escapeshellcmd() escapes any characters in a string that might be used\n * to trick a shell command into executing arbitrary commands. This\n * function should be used to make sure that any data coming from user\n * input is escaped before this data is passed to the exec() or system()\n * functions, or to the backtick operator.\n *\n * Following characters are preceded by a backslash: #&;`|*\?~<>^()[]{}$\\,\n * \\x0A and \\xFF. ' and \" are escaped only if they are not paired. In\n * Windows, all these characters plus % are replaced by a space instead.\n *\n * @command    string  The command that will be escaped.\n *\n * @return     string  The escaped string.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
