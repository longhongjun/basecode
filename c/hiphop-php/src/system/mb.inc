// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"mb_list_encodings", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-list-encodings.php )\n *\n * Returns an array containing all supported encodings.\n *\n * @return     vector  Returns a numerically indexed array.\n */", 
"mb_list_encodings_alias_names", T(Variant), S(0), "name", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-list-encodings-alias-names.php )\n *\n *\n * @name       string\n *\n * @return     mixed\n */",
"mb_list_mime_names", T(Variant), S(0), "name", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-list-mime-names.php\n * )\n *\n *\n * @name       string\n *\n * @return     mixed\n */",
"mb_check_encoding", T(Boolean), S(0), "var", T(String), "N;", S(2), "null", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-check-encoding.php )\n *\n * Checks if the specified byte stream is valid for the specified\n * encoding. It is useful to prevent so-called \"Invalid Encoding Attack\".\n *\n * @var        string  The byte stream to check. If it is omitted, this\n *                     function checks all the input from the beginning of\n *                     the request.\n * @encoding   string  The expected encoding.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"mb_convert_case", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "mode", T(Int32), NULL, S(0), NULL, S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-convert-case.php )\n *\n * Performs case folding on a string, converted in the way specified by\n * mode.\n *\n * @str        string  The string being converted.\n * @mode       int     The mode of the conversion. It can be one of\n *                     MB_CASE_UPPER, MB_CASE_LOWER, or MB_CASE_TITLE.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   A case folded version of string converted in the way\n *                     specified by mode.\n */",
"mb_convert_encoding", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "to_encoding", T(String), NULL, S(0), NULL, S(0), "from_encoding", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-convert-encoding.php\n * )\n *\n * Converts the character encoding of string str to to_encoding from\n * optionally from_encoding.\n *\n * @str        string  The string being encoded.\n * @to_encoding\n *             string  The type of encoding that str is being converted to.\n * @from_encoding\n *             mixed   Is specified by character code names before\n *                     conversion. It is either an array, or a comma\n *                     separated enumerated list. If from_encoding is not\n *                     specified, the internal encoding will be used.\n *\n *                     \"auto\" may be used, which expands to\n *                     \"ASCII,JIS,UTF-8,EUC-JP,SJIS\".\n *\n * @return     mixed   The encoded string.\n */",
"mb_convert_kana", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "option", T(String), "N;", S(2), "null", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-convert-kana.php )\n *\n * Performs a \"han-kaku\" - \"zen-kaku\" conversion for string str. This\n * function is only useful for Japanese.\n *\n * @str        string  The string being converted.\n * @option     string  The conversion option.\n *\n *                     Specify with a combination of following options.\n *                     Applicable Conversion Options Option Meaning r\n *                     Convert \"zen-kaku\" alphabets to \"han-kaku\" R Convert\n *                     \"han-kaku\" alphabets to \"zen-kaku\" n Convert\n *                     \"zen-kaku\" numbers to \"han-kaku\" N Convert\n *                     \"han-kaku\" numbers to \"zen-kaku\" a Convert\n *                     \"zen-kaku\" alphabets and numbers to \"han-kaku\" A\n *                     Convert \"han-kaku\" alphabets and numbers to\n *                     \"zen-kaku\" (Characters included in \"a\", \"A\" options\n *                     are U+0021 - U+007E excluding U+0022, U+0027,\n *                     U+005C, U+007E) s Convert \"zen-kaku\" space to\n *                     \"han-kaku\" (U+3000 -> U+0020) S Convert \"han-kaku\"\n *                     space to \"zen-kaku\" (U+0020 -> U+3000) k Convert\n *                     \"zen-kaku kata-kana\" to \"han-kaku kata-kana\" K\n *                     Convert \"han-kaku kata-kana\" to \"zen-kaku kata-kana\"\n *                     h Convert \"zen-kaku hira-gana\" to \"han-kaku\n *                     kata-kana\" H Convert \"han-kaku kata-kana\" to\n *                     \"zen-kaku hira-gana\" c Convert \"zen-kaku kata-kana\"\n *                     to \"zen-kaku hira-gana\" C Convert \"zen-kaku\n *                     hira-gana\" to \"zen-kaku kata-kana\" V Collapse voiced\n *                     sound notation and convert them into a character.\n *                     Use with \"K\",\"H\"\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   The converted string.\n */",
"mb_convert_variables", T(Variant), S(0), "to_encoding", T(String), NULL, S(0), NULL, S(0), "from_encoding", T(Variant), NULL, S(0), NULL, S(0), "vars", T(Variant), NULL, S(0), NULL, S(1), NULL, S(147456), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-convert-variables.php )\n *\n * Converts character encoding of variables vars in encoding from_encoding\n * to encoding to_encoding.\n *\n * mb_convert_variables() join strings in Array or Object to detect\n * encoding, since encoding detection tends to fail for short strings.\n * Therefore, it is impossible to mix encoding in single array or object.\n *\n * @to_encoding\n *             string  The encoding that the string is being converted to.\n * @from_encoding\n *             mixed   from_encoding is specified as an array or comma\n *                     separated string, it tries to detect encoding from\n *                     from-coding. When from_encoding is omitted,\n *                     detect_order is used.\n * @vars       mixed   vars is the reference to the variable being\n *                     converted. String, Array and Object are accepted.\n *                     mb_convert_variables() assumes all parameters have\n *                     the same encoding.\n *\n * @return     mixed   The character encoding before conversion for\n *                     success, or FALSE for failure.\n */",
"mb_decode_mimeheader", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-decode-mimeheader.php )\n *\n * Decodes encoded-word string str in MIME header.\n *\n * @str        string  The string being decoded.\n *\n * @return     mixed   The decoded string in internal character encoding.\n */",
"mb_decode_numericentity", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "convmap", T(Variant), NULL, S(0), NULL, S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-decode-numericentity.php )\n *\n * Convert numeric string reference of string str in a specified block to\n * character.\n *\n * @str        string  The string being decoded.\n * @convmap    mixed   convmap is an array that specifies the code area to\n *                     convert.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   The converted string.\n */",
"mb_detect_encoding", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "encoding_list", T(Variant), "N;", S(2), "null", S(0), "strict", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-detect-encoding.php\n * )\n *\n * Detects character encoding in string str.\n *\n * @str        string  The string being detected.\n * @encoding_list\n *             mixed   encoding_list is list of character encoding.\n *                     Encoding order may be specified by array or comma\n *                     separated list string.\n *\n *                     If encoding_list is omitted, detect_order is used.\n * @strict     mixed   strict specifies whether to use the strict encoding\n *                     detection or not. Default is FALSE.\n *\n * @return     mixed   The detected character encoding or FALSE if the\n *                     encoding cannot be detected from the given string.\n */",
"mb_detect_order", T(Variant), S(0), "encoding_list", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-detect-order.php )\n *\n * Sets the automatic character encoding detection order to encoding_list.\n *\n * @encoding_list\n *             mixed   encoding_list is an array or comma separated list of\n *                     character encoding. (\"auto\" is expanded to \"ASCII,\n *                     JIS, UTF-8, EUC-JP, SJIS\")\n *\n *                     If encoding_list is omitted, it returns the current\n *                     character encoding detection order as array.\n *\n *                     This setting affects mb_detect_encoding() and\n *                     mb_send_mail().\n *\n *                     mbstring currently implements the following\n *                     encoding detection filters. If there is an invalid\n *                     byte sequence for the following encodings, encoding\n *                     detection will fail. UTF-8, UTF-7, ASCII,\n *                     EUC-JP,SJIS, eucJP-win, SJIS-win, JIS, ISO-2022-JP\n *\n *                     For ISO-8859-*, mbstring always detects as\n *                     ISO-8859-*.\n *\n *                     For UTF-16, UTF-32, UCS2 and UCS4, encoding\n *                     detection will fail always.\n *\n *                     Example #1 Useless detect order example\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"mb_encode_mimeheader", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "charset", T(String), "N;", S(2), "null", S(0), "transfer_encoding", T(String), "N;", S(2), "null", S(0), "linefeed", T(String), "s:2:\"\r\n\";", S(9), "\"\\r\\n\"", S(0), "indent", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-encode-mimeheader.php )\n *\n * Encodes a given string str by the MIME header encoding scheme.\n *\n * @str        string  The string being encoded.\n * @charset    string  charset specifies the name of the character set in\n *                     which str is represented in. The default value is\n *                     determined by the current NLS setting\n *                     (mbstring.language). mb_internal_encoding() should\n *                     be set to same encoding.\n * @transfer_encoding\n *             string  transfer_encoding specifies the scheme of MIME\n *                     encoding. It should be either \"B\" (Base64) or \"Q\"\n *                     (Quoted-Printable). Falls back to \"B\" if not given.\n * @linefeed   string  linefeed specifies the EOL (end-of-line) marker with\n *                     which mb_encode_mimeheader() performs line-folding\n *                     (a \273 RFC term, the act of breaking a line longer\n *                     than a certain length into multiple lines. The\n *                     length is currently hard-coded to 74 characters).\n *                     Falls back to \"\\r\\n\" (CRLF) if not given.\n * @indent     int     Indentation of the first line (number of characters\n *                     in the header before str).\n *\n * @return     mixed   A converted version of the string represented in\n *                     ASCII.\n */",
"mb_encode_numericentity", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "convmap", T(Variant), NULL, S(0), NULL, S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-encode-numericentity.php )\n *\n * Converts specified character codes in string str from HTML numeric\n * character reference to character code.\n *\n * @str        string  The string being encoded.\n * @convmap    mixed   convmap is array specifies code area to convert.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   The converted string.\n */",
"mb_ereg_match", T(Boolean), S(0), "pattern", T(String), NULL, S(0), NULL, S(0), "str", T(String), NULL, S(0), NULL, S(0), "option", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg-match.php )\n *\n * A regular expression match for a multibyte string\n *\n * @pattern    string  The regular expression pattern.\n * @str        string  The string being evaluated.\n * @option     string\n *\n * @return     bool    Returns TRUE if string matches the regular\n *                     expression pattern, FALSE if not.\n */",
"mb_ereg_replace", T(Variant), S(0), "pattern", T(Variant), NULL, S(0), NULL, S(0), "replacement", T(String), NULL, S(0), NULL, S(0), "str", T(String), NULL, S(0), NULL, S(0), "option", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg-replace.php )\n *\n *\n * @pattern    mixed   The regular expression pattern.\n *\n *                     Multibyte characters may be used in pattern.\n * @replacement\n *             string  The replacement text.\n * @str        string  The string being checked.\n * @option     string  Matching condition can be set by option parameter.\n *                     If i is specified for this parameter, the case will\n *                     be ignored. If x is specified, white space will be\n *                     ignored. If m is specified, match will be executed\n *                     in multiline mode and line break will be included in\n *                     '.'. If p is specified, match will be executed in\n *                     POSIX mode, line break will be considered as normal\n *                     character. If e is specified, replacement string\n *                     will be evaluated as PHP expression.\n *\n * @return     mixed   The resultant string on success, or FALSE on error.\n */",
"mb_ereg_search_getpos", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-ereg-search-getpos.php )\n *\n *\n * @return     int     mb_ereg_search_getpos() returns the point to start\n *                     regular expression match for mb_ereg_search(),\n *                     mb_ereg_search_pos(), mb_ereg_search_regs(). The\n *                     position is represented by bytes from the head of\n *                     string.\n */", 
"mb_ereg_search_getregs", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-ereg-search-getregs.php )\n *\n *\n * @return     mixed   An array including the sub-string of matched part by\n *                     last mb_ereg_search(), mb_ereg_search_pos(),\n *                     mb_ereg_search_regs(). If there are some matches,\n *                     the first element will have the matched sub-string,\n *                     the second element will have the first part grouped\n *                     with brackets, the third element will have the\n *                     second part grouped with brackets, and so on. It\n *                     returns FALSE on error;\n */", 
"mb_ereg_search_init", T(Boolean), S(0), "str", T(String), NULL, S(0), NULL, S(0), "pattern", T(String), "N;", S(2), "null", S(0), "option", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg-search-init.php\n * )\n *\n * mb_ereg_search_init() sets string and pattern for a multibyte regular\n * expression. These values are used for mb_ereg_search(),\n * mb_ereg_search_pos(), and mb_ereg_search_regs().\n *\n * @str        string  The search string.\n * @pattern    string  The search pattern.\n * @option     string  The search option.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"mb_ereg_search_pos", T(Variant), S(0), "pattern", T(String), "N;", S(2), "null", S(0), "option", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg-search-pos.php\n * )\n *\n * Returns position and length of a matched part of the multibyte regular\n * expression for a predefined multibyte string\n *\n * The string for match is specified by mb_ereg_search_init(). If it is\n * not specified, the previous one will be used.\n *\n * @pattern    string  The search pattern.\n * @option     string  The search option.\n *\n * @return     mixed   An array including the position of a matched part\n *                     for a multibyte regular expression. The first\n *                     element of the array will be the beginning of\n *                     matched part, the second element will be length\n *                     (bytes) of matched part. It returns FALSE on error.\n */",
"mb_ereg_search_regs", T(Variant), S(0), "pattern", T(String), "N;", S(2), "null", S(0), "option", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg-search-regs.php\n * )\n *\n * Returns the matched part of a multibyte regular expression.\n *\n * @pattern    string  The search pattern.\n * @option     string  The search option.\n *\n * @return     mixed   mb_ereg_search_regs() executes the multibyte regular\n *                     expression match, and if there are some matched\n *                     part, it returns an array including substring of\n *                     matched part as first element, the first grouped\n *                     part with brackets as second element, the second\n *                     grouped part as third element, and so on. It returns\n *                     FALSE on error.\n */",
"mb_ereg_search_setpos", T(Boolean), S(0), "position", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-ereg-search-setpos.php )\n *\n *\n * @position   int     The position to set.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"mb_ereg_search", T(Variant), S(0), "pattern", T(String), "N;", S(2), "null", S(0), "option", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg-search.php )\n *\n * Performs a multibyte regular expression match for a predefined\n * multibyte string.\n *\n * @pattern    string  The search pattern.\n * @option     string  The search option.\n *\n * @return     mixed   mb_ereg_search() returns TRUE if the multibyte\n *                     string matches with the regular expression, or FALSE\n *                     otherwise. The string for matching is set by\n *                     mb_ereg_search_init(). If pattern is not specified,\n *                     the previous one is used.\n */",
"mb_ereg", T(Variant), S(0), "pattern", T(Variant), NULL, S(0), NULL, S(0), "str", T(String), NULL, S(0), NULL, S(0), "regs", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-ereg.php )\n *\n *\n * @pattern    mixed   The search pattern.\n * @str        string  The search string.\n * @regs       mixed   Contains a substring of the matched string.\n *\n * @return     mixed   Executes the regular expression match with multibyte\n *                     support, and returns 1 if matches are found. If the\n *                     optional regs parameter was specified, the function\n *                     returns the byte length of matched part, and the\n *                     array regs will contain the substring of matched\n *                     string. The function returns 1 if it matches with\n *                     the empty string. If no matches are found or an\n *                     error happens, FALSE will be returned.\n */",
"mb_eregi_replace", T(Variant), S(0), "pattern", T(Variant), NULL, S(0), NULL, S(0), "replacement", T(String), NULL, S(0), NULL, S(0), "str", T(String), NULL, S(0), NULL, S(0), "option", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-eregi-replace.php )\n *\n *\n * @pattern    mixed   The regular expression pattern. Multibyte characters\n *                     may be used. The case will be ignored.\n * @replacement\n *             string  The replacement text.\n * @str        string  The searched string.\n * @option     string  option has the same meaning as in mb_ereg_replace().\n *\n * @return     mixed   The resultant string or FALSE on error.\n */",
"mb_eregi", T(Variant), S(0), "pattern", T(Variant), NULL, S(0), NULL, S(0), "str", T(String), NULL, S(0), NULL, S(0), "regs", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-eregi.php )\n *\n *\n * @pattern    mixed   The regular expression pattern.\n * @str        string  The string being searched.\n * @regs       mixed   Contains a substring of the matched string.\n *\n * @return     mixed   Executes the regular expression match with multibyte\n *                     support, and returns 1 if matches are found. If the\n *                     optional regs parameter was specified, the function\n *                     returns the byte length of matched part, and the\n *                     array regs will contain the substring of matched\n *                     string. The function returns 1 if it matches with\n *                     the empty string. If no matches are found or an\n *                     error happens, FALSE will be returned.\n */",
"mb_get_info", T(Variant), S(0), "type", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-get-info.php )\n *\n *\n * @type       string  If type isn't specified or is specified to \"all\", an\n *                     array having the elements \"internal_encoding\",\n *                     \"http_output\", \"http_input\", \"func_overload\",\n *                     \"mail_charset\", \"mail_header_encoding\",\n *                     \"mail_body_encoding\" will be returned.\n *\n *                     If type is specified as \"http_output\",\n *                     \"http_input\", \"internal_encoding\", \"func_overload\",\n *                     the specified setting parameter will be returned.\n *\n * @return     mixed   An array of type information if type is not\n *                     specified, otherwise a specific type.\n */",
"mb_http_input", T(Variant), S(0), "type", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-http-input.php )\n *\n *\n * @type       string  Input string specifies the input type. \"G\" for GET,\n *                     \"P\" for POST, \"C\" for COOKIE, \"S\" for string, \"L\"\n *                     for list, and \"I\" for the whole list (will return\n *                     array). If type is omitted, it returns the last\n *                     input type processed.\n *\n * @return     mixed   The character encoding name, as per the type. If\n *                     mb_http_input() does not process specified HTTP\n *                     input, it returns FALSE.\n */",
"mb_http_output", T(Variant), S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-http-output.php )\n *\n * Set/Get the HTTP output character encoding. Output after this function\n * is converted to encoding.\n *\n * @encoding   string  If encoding is set, mb_http_output() sets the HTTP\n *                     output character encoding to encoding.\n *\n *                     If encoding is omitted, mb_http_output() returns\n *                     the current HTTP output character encoding.\n *\n * @return     mixed   If encoding is omitted, mb_http_output() returns the\n *                     current HTTP output character encoding. Otherwise,\n *                     Returns TRUE on success or FALSE on failure.\n */",
"mb_internal_encoding", T(Variant), S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-internal-encoding.php )\n *\n * Set/Get the internal character encoding\n *\n * @encoding   string  encoding is the character encoding name used for the\n *                     HTTP input character encoding conversion, HTTP\n *                     output character encoding conversion, and the\n *                     default character encoding for string functions\n *                     defined by the mbstring module.\n *\n * @return     mixed   If encoding is set, then Returns TRUE on success or\n *                     FALSE on failure. If encoding is omitted, then the\n *                     current character encoding name is returned.\n */",
"mb_language", T(Variant), S(0), "language", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-language.php )\n *\n * Set/Get the current language.\n *\n * @language   string  Used for encoding e-mail messages. Valid languages\n *                     are \"Japanese\", \"ja\",\"English\",\"en\" and \"uni\"\n *                     (UTF-8). mb_send_mail() uses this setting to encode\n *                     e-mail.\n *\n *                     Language and its setting is ISO-2022-JP/Base64 for\n *                     Japanese, UTF-8/Base64 for uni, ISO-8859-1/quoted\n *                     printable for English.\n *\n * @return     mixed   If language is set and language is valid, it returns\n *                     TRUE. Otherwise, it returns FALSE. When language is\n *                     omitted, it returns the language name as a string.\n *                     If no language is set previously, it then returns\n *                     FALSE.\n */",
"mb_output_handler", T(String), S(0), "contents", T(String), NULL, S(0), NULL, S(0), "status", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-output-handler.php )\n *\n * mb_output_handler() is ob_start() callback function.\n * mb_output_handler() converts characters in the output buffer from\n * internal character encoding to HTTP output character encoding.\n *\n * @contents   string  The contents of the output buffer.\n * @status     int     The status of the output buffer.\n *\n * @return     string  The converted string.\n */",
"mb_parse_str", T(Boolean), S(0), "encoded_string", T(String), NULL, S(0), NULL, S(0), "result", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-parse-str.php )\n *\n * Parses GET/POST/COOKIE data and sets global variables. Since PHP does\n * not provide raw POST/COOKIE data, it can only be used for GET data for\n * now. It parses URL encoded data, detects encoding, converts coding to\n * internal encoding and set values to the result array or global\n * variables.\n *\n * @encoded_string\n *             string  The URL encoded data.\n * @result     mixed   An array containing decoded and character encoded\n *                     converted values.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"mb_preferred_mime_name", T(Variant), S(0), "encoding", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-preferred-mime-name.php )\n *\n * Get a MIME charset string for a specific encoding.\n *\n * @encoding   string  The encoding being checked.\n *\n * @return     mixed   The MIME charset string for character encoding\n *                     encoding.\n */",
"mb_regex_encoding", T(Variant), S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-regex-encoding.php )\n *\n * Returns the current encoding for a multibyte regex as a string.\n *\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   Returns the character encoding used by multibyte\n *                     regex functions.\n */",
"mb_regex_set_options", T(String), S(0), "options", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-regex-set-options.php )\n *\n *\n * @options    string  The options to set. This is a a string where each\n *                     character is an option. To set a mode, the mode\n *                     character must be the last one set, however there\n *                     can only be set one mode but multiple options. Regex\n *                     options Option Meaning i Ambiguity match on x\n *                     Enables extended pattern form m '.' matches with\n *                     newlines s '^' -> '\\A', '$' -> '\\Z' p Same as both\n *                     the m and s options l Finds longest matches n\n *                     Ignores empty matches e eval() resulting code Regex\n *                     syntax modes Mode Meaning j Java (Sun\n *                     java.util.regex) u GNU regex g grep c Emacs r Ruby z\n *                     Perl b POSIX Basic regex d POSIX Extended regex\n *\n * @return     string  The previous options. If options is omitted, it\n *                     returns the string that describes the current\n *                     options.\n */",
"mb_send_mail", T(Boolean), S(0), "to", T(String), NULL, S(0), NULL, S(0), "subject", T(String), NULL, S(0), NULL, S(0), "message", T(String), NULL, S(0), NULL, S(0), "headers", T(String), "N;", S(2), "null", S(0), "extra_cmd", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-send-mail.php )\n *\n * Sends email. Headers and messages are converted and encoded according\n * to the mb_language() setting. It's a wrapper function for mail(), so see\n * also mail() for details.\n *\n * @to         string  The mail addresses being sent to. Multiple\n *                     recipients may be specified by putting a comma\n *                     between each address in to. This parameter is not\n *                     automatically encoded.\n * @subject    string  The subject of the mail.\n * @message    string  The message of the mail.\n * @headers    string  additional_headers is inserted at the end of the\n *                     header. This is typically used to add extra headers.\n *                     Multiple extra headers are separated with a newline\n *                     (\"\\n\").\n * @extra_cmd  string  additional_parameter is a MTA command line\n *                     parameter. It is useful when setting the correct\n *                     Return-Path header when using sendmail.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"mb_split", T(Variant), S(0), "pattern", T(String), NULL, S(0), NULL, S(0), "str", T(String), NULL, S(0), NULL, S(0), "count", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-split.php )\n *\n *\n * @pattern    string  The regular expression pattern.\n * @str        string  The string being split.\n * @count      int     If optional parameter limit is specified, it will be\n *                     split in limit elements as maximum.\n *\n * @return     mixed   The result as an array.\n */",
"mb_strcut", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "start", T(Int32), NULL, S(0), NULL, S(0), "length", T(Int32), "i:2147483647;", S(13), "0x7FFFFFFF", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strcut.php )\n *\n * mb_strcut() performs equivalent operation as mb_substr() with different\n * method. If start position is multi-byte character's second byte or\n * larger, it starts from first byte of multi-byte character.\n *\n * It subtracts string from str that is shorter than length AND character\n * that is not part of multi-byte string or not being middle of shift\n * sequence.\n *\n * @str        string  The string being cut.\n * @start      int     The position that begins the cut.\n * @length     int     The string being decoded.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   mb_strcut() returns the portion of str specified by\n *                     the start and length parameters.\n */",
"mb_strimwidth", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "start", T(Int32), NULL, S(0), NULL, S(0), "width", T(Int32), NULL, S(0), NULL, S(0), "trimmarker", T(String), "N;", S(2), "null", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strimwidth.php )\n *\n * Truncates string str to specified width.\n *\n * @str        string  The string being decoded.\n * @start      int     The start position offset. Number of characters from\n *                     the beginning of string. (First character is 0)\n * @width      int     The width of the desired trim.\n * @trimmarker string  A string that is added to the end of string when\n *                     string is truncated.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   The truncated string. If trimmarker is set,\n *                     trimmarker is appended to the return value.\n */",
"mb_stripos", T(Variant), S(0), "haystack", T(String), NULL, S(0), NULL, S(0), "needle", T(String), NULL, S(0), NULL, S(0), "offset", T(Int32), "i:0;", S(4), "0", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-stripos.php )\n *\n * mb_stripos() returns the numeric position of the first occurrence of\n * needle in the haystack string. Unlike mb_strpos(), mb_stripos() is\n * case-insensitive. If needle is not found, it returns FALSE.\n *\n * @haystack   string  The string from which to get the position of the\n *                     first occurrence of needle\n * @needle     string  The string to find in haystack\n * @offset     int     The position in haystack to start searching\n * @encoding   string  Character encoding name to use. If it is omitted,\n *                     internal character encoding is used.\n *\n * @return     mixed   Return the numeric position of the first occurrence\n *                     of needle in the haystack string, or FALSE if needle\n *                     is not found.\n */",
"mb_stristr", T(Variant), S(0), "haystack", T(String), NULL, S(0), NULL, S(0), "needle", T(String), NULL, S(0), NULL, S(0), "part", T(Boolean), "b:0;", S(4), "false", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-stristr.php )\n *\n * mb_stristr() finds the first occurrence of needle in haystack and\n * returns the portion of haystack. Unlike mb_strstr(), mb_stristr() is\n * case-insensitive. If needle is not found, it returns FALSE.\n *\n * @haystack   string  The string from which to get the first occurrence of\n *                     needle\n * @needle     string  The string to find in haystack\n * @part       bool    Determines which portion of haystack this function\n *                     returns. If set to TRUE, it returns all of haystack\n *                     from the beginning to the first occurrence of\n *                     needle. If set to FALSE, it returns all of haystack\n *                     from the first occurrence of needle to the end,\n * @encoding   string  Character encoding name to use. If it is omitted,\n *                     internal character encoding is used.\n *\n * @return     mixed   Returns the portion of haystack, or FALSE if needle\n *                     is not found.\n */",
"mb_strlen", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strlen.php )\n *\n * Gets the length of a string.\n *\n * @str        string  The string being checked for length.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   Returns the number of characters in string str\n *                     having character encoding encoding. A multi-byte\n *                     character is counted as 1.\n */",
"mb_strpos", T(Variant), S(0), "haystack", T(String), NULL, S(0), NULL, S(0), "needle", T(String), NULL, S(0), NULL, S(0), "offset", T(Int32), "i:0;", S(4), "0", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strpos.php )\n *\n * Finds position of the first occurrence of a string in a string.\n *\n * Performs a multi-byte safe strpos() operation based on number of\n * characters. The first character's position is 0, the second character\n * position is 1, and so on.\n *\n * @haystack   string  The string being checked.\n * @needle     string  The position counted from the beginning of haystack.\n * @offset     int     The search offset. If it is not specified, 0 is\n *                     used.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   Returns the numeric position of the first occurrence\n *                     of needle in the haystack string. If needle is not\n *                     found, it returns FALSE.\n */",
"mb_strrchr", T(Variant), S(0), "haystack", T(String), NULL, S(0), NULL, S(0), "needle", T(String), NULL, S(0), NULL, S(0), "part", T(Boolean), "b:0;", S(4), "false", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strrchr.php )\n *\n * mb_strrchr() finds the last occurrence of needle in haystack and\n * returns the portion of haystack. If needle is not found, it returns\n * FALSE.\n *\n * @haystack   string  The string from which to get the last occurrence of\n *                     needle\n * @needle     string  The string to find in haystack\n * @part       bool    Determines which portion of haystack this function\n *                     returns. If set to TRUE, it returns all of haystack\n *                     from the beginning to the last occurrence of needle.\n *                     If set to FALSE, it returns all of haystack from the\n *                     last occurrence of needle to the end,\n * @encoding   string  Character encoding name to use. If it is omitted,\n *                     internal character encoding is used.\n *\n * @return     mixed   Returns the portion of haystack. or FALSE if needle\n *                     is not found.\n */",
"mb_strrichr", T(Variant), S(0), "haystack", T(String), NULL, S(0), NULL, S(0), "needle", T(String), NULL, S(0), NULL, S(0), "part", T(Boolean), "b:0;", S(4), "false", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strrichr.php )\n *\n * mb_strrichr() finds the last occurrence of needle in haystack and\n * returns the portion of haystack. Unlike mb_strrchr(), mb_strrichr() is\n * case-insensitive. If needle is not found, it returns FALSE.\n *\n * @haystack   string  The string from which to get the last occurrence of\n *                     needle\n * @needle     string  The string to find in haystack\n * @part       bool    Determines which portion of haystack this function\n *                     returns. If set to TRUE, it returns all of haystack\n *                     from the beginning to the last occurrence of needle.\n *                     If set to FALSE, it returns all of haystack from the\n *                     last occurrence of needle to the end,\n * @encoding   string  Character encoding name to use. If it is omitted,\n *                     internal character encoding is used.\n *\n * @return     mixed   Returns the portion of haystack. or FALSE if needle\n *                     is not found.\n */",
"mb_strripos", T(Variant), S(0), "haystack", T(String), NULL, S(0), NULL, S(0), "needle", T(String), NULL, S(0), NULL, S(0), "offset", T(Int32), "i:0;", S(4), "0", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strripos.php )\n *\n * mb_strripos() performs multi-byte safe strripos() operation based on\n * number of characters. needle position is counted from the beginning of\n * haystack. First character's position is 0. Second character position is\n * 1. Unlike mb_strrpos(), mb_strripos() is case-insensitive.\n *\n * @haystack   string  The string from which to get the position of the\n *                     last occurrence of needle\n * @needle     string  The string to find in haystack\n * @offset     int     The position in haystack to start searching\n * @encoding   string  Character encoding name to use. If it is omitted,\n *                     internal character encoding is used.\n *\n * @return     mixed   Return the numeric position of the last occurrence\n *                     of needle in the haystack string, or FALSE if needle\n *                     is not found.\n */",
"mb_strrpos", T(Variant), S(0), "haystack", T(String), NULL, S(0), NULL, S(0), "needle", T(String), NULL, S(0), NULL, S(0), "offset", T(Variant), "i:0;", S(4), "0", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strrpos.php )\n *\n * Performs a multibyte safe strrpos() operation based on the number of\n * characters. needle position is counted from the beginning of haystack.\n * First character's position is 0. Second character position is 1.\n *\n * @haystack   string  The string being checked, for the last occurrence of\n *                     needle\n * @needle     string  The string to find in haystack.\n * @offset     mixed   May be specified to begin searching an arbitrary\n *                     number of characters into the string. Negative\n *                     values will stop searching at an arbitrary point\n *                     prior to the end of the string.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   Returns the numeric position of the last occurrence\n *                     of needle in the haystack string. If needle is not\n *                     found, it returns FALSE.\n */",
"mb_strstr", T(Variant), S(0), "haystack", T(String), NULL, S(0), NULL, S(0), "needle", T(String), NULL, S(0), NULL, S(0), "part", T(Boolean), "b:0;", S(4), "false", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strstr.php )\n *\n * mb_strstr() finds the first occurrence of needle in haystack and\n * returns the portion of haystack. If needle is not found, it returns\n * FALSE.\n *\n * @haystack   string  The string from which to get the first occurrence of\n *                     needle\n * @needle     string  The string to find in haystack\n * @part       bool    Determines which portion of haystack this function\n *                     returns. If set to TRUE, it returns all of haystack\n *                     from the beginning to the first occurrence of\n *                     needle. If set to FALSE, it returns all of haystack\n *                     from the first occurrence of needle to the end,\n * @encoding   string  Character encoding name to use. If it is omitted,\n *                     internal character encoding is used.\n *\n * @return     mixed   Returns the portion of haystack, or FALSE if needle\n *                     is not found.\n */",
"mb_strtolower", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strtolower.php )\n *\n * Returns str with all alphabetic characters converted to lowercase.\n *\n * @str        string  The string being lowercased.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   str with all alphabetic characters converted to\n *                     lowercase.\n */",
"mb_strtoupper", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strtoupper.php )\n *\n * Returns str with all alphabetic characters converted to uppercase.\n *\n * @str        string  The string being uppercased.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   str with all alphabetic characters converted to\n *                     uppercase.\n */",
"mb_strwidth", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-strwidth.php )\n *\n * Returns the width of string str.\n *\n * Multi-byte characters are usually twice the width of single byte\n * characters.\n *\n * Characters width Chars Width U+0000 - U+0019 0 U+0020 - U+1FFF 1 U+2000\n * - U+FF60 2 U+FF61 - U+FF9F 1 U+FFA0 - 2\n *\n * @str        string  The string being decoded.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   The width of string str.\n */",
"mb_substitute_character", T(Variant), S(0), "substrchar", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mb-substitute-character.php )\n *\n * Specifies a substitution character when input character encoding is\n * invalid or character code does not exist in output character encoding.\n * Invalid characters may be substituted NULL (no output), string or\n * integer value (Unicode character code value).\n *\n * This setting affects mb_convert_encoding(), mb_convert_variables(),\n * mb_output_handler(), and mb_send_mail().\n *\n * @substrchar mixed   Specify the Unicode value as an integer, or as one\n *                     of the following strings: \"none\" : no output \"long\"\n *                     : Output character code value (Example: U+3000,\n *                     JIS+7E7E) \"entity\" : Output character entity\n *                     (Example: \310\200)\n *\n * @return     mixed   If substchar is set, it returns TRUE for success,\n *                     otherwise returns FALSE. If substchar is not set, it\n *                     returns the Unicode value, or \"none\" or \"long\".\n */",
"mb_substr_count", T(Variant), S(0), "haystack", T(String), NULL, S(0), NULL, S(0), "needle", T(String), NULL, S(0), NULL, S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-substr-count.php )\n *\n * Counts the number of times the needle substring occurs in the haystack\n * string.\n *\n * @haystack   string  The string being checked.\n * @needle     string  The string being found.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   The number of times the needle substring occurs in\n *                     the haystack string.\n */",
"mb_substr", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "start", T(Int32), NULL, S(0), NULL, S(0), "length", T(Int32), "i:2147483647;", S(13), "0x7FFFFFFF", S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mb-substr.php )\n *\n * Performs a multi-byte safe substr() operation based on number of\n * characters. Position is counted from the beginning of str. First\n * character's position is 0. Second character position is 1, and so on.\n *\n * @str        string  The string being checked.\n * @start      int     The first position used in str.\n * @length     int     The maximum length of the returned string.\n * @encoding   string  encoding parameter is the character encoding. If it\n *                     is omitted, the internal character encoding value\n *                     will be used.\n *\n * @return     mixed   mb_substr() returns the portion of str specified by\n *                     the start and length parameters.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
