// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"apc_add", T(Boolean), S(0), "key", T(String), NULL, S(0), NULL, S(0), "var", T(Variant), NULL, S(0), NULL, S(0), "ttl", T(Int64), "i:0;", S(4), "0", S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16793600), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-add.php )\n *\n * Caches a variable in the data store, only if it's not already stored.\n * Unlike many other mechanisms in PHP, variables stored using apc_add()\n * will persist between requests (until the value is removed from the\n * cache).\n *\n * @key        string  Store the variable using this name. keys are\n *                     cache-unique, so attempting to use apc_add() to\n *                     store data with a key that already exists will not\n *                     overwrite the existing data, and will instead return\n *                     FALSE. (This is the only difference between\n *                     apc_add() and apc_store().)\n * @var        mixed   The variable to store\n * @ttl        int     Time To Live; store var in the cache for ttl\n *                     seconds. After the ttl has passed, the stored\n *                     variable will be expunged from the cache (on the\n *                     next request). If no ttl is supplied (or if the ttl\n *                     is 0), the value will persist until it is removed\n *                     from the cache manually, or otherwise fails to exist\n *                     in the cache (clear, restart, etc.).\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"apc_store", T(Boolean), S(0), "key", T(String), NULL, S(0), NULL, S(0), "var", T(Variant), NULL, S(0), NULL, S(0), "ttl", T(Int64), "i:0;", S(4), "0", S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16793600), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-store.php )\n *\n * Cache a variable in the data store. Unlike many other mechanisms in\n * PHP, variables stored using apc_store() will persist between requests\n * (until the value is removed from the cache).\n *\n * @key        string  Store the variable using this name. keys are\n *                     cache-unique, so storing a second value with the\n *                     same key will overwrite the original value.\n * @var        mixed   The variable to store\n * @ttl        int     Time To Live; store var in the cache for ttl\n *                     seconds. After the ttl has passed, the stored\n *                     variable will be expunged from the cache (on the\n *                     next request). If no ttl is supplied (or if the ttl\n *                     is 0), the value will persist until it is removed\n *                     from the cache manually, or otherwise fails to exist\n *                     in the cache (clear, restart, etc.).\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"apc_fetch", T(Variant), S(0), "key", T(Variant), NULL, S(0), NULL, S(0), "success", T(Variant), "N;", S(2), "null", S(1), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16793600), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-fetch.php )\n *\n * Fetchs a stored variable from the cache.\n *\n * @key        mixed   The key used to store the value (with apc_store()).\n *                     If an array is passed then each element is fetched\n *                     and returned.\n * @success    mixed   Set to TRUE in success and FALSE in failure.\n * @cache_id   int\n *\n * @return     mixed   The stored variable or array of variables on\n *                     success; FALSE on failure\n */",
"apc_delete", T(Variant), S(0), "key", T(Variant), NULL, S(0), NULL, S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16793600), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-delete.php )\n *\n * Removes a stored variable from the cache.\n *\n * @key        mixed   The key used to store the value (with apc_store()).\n * @cache_id   int\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"apc_compile_file", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "atomic", T(Boolean), "b:1;", S(4), "true", S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-compile-file.php )\n *\n * Stores a file in the bytecode cache, bypassing all filters.\n *\n * @filename   string  Full or relative path to a PHP file that will be\n *                     compiled and stored in the bytecode cache.\n * @atomic     bool\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"apc_cache_info", T(Variant), S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), "limited", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-cache-info.php )\n *\n * Retrieves cached information and meta-data from APC's data store.\n *\n * @cache_id   int     If cache_type is \"user\", information about the user\n *                     cache will be returned.\n *\n *                     If cache_type is \"filehits\", information about\n *                     which files have been served from the bytecode cache\n *                     for the current request will be returned. This\n *                     feature must be enabled at compile time using\n *                     --enable-filehits .\n *\n *                     If an invalid or no cache_type is specified,\n *                     information about the system cache (cached files)\n *                     will be returned.\n * @limited    bool    If limited is TRUE, the return value will exclude\n *                     the individual list of cache entries. This is useful\n *                     when trying to optimize calls for statistics\n *                     gathering.\n *\n * @return     mixed   Array of cached data (and meta-data) or FALSE on\n *                     failure apc_cache_info() will raise a warning if it\n *                     is unable to retrieve APC cache data. This typically\n *                     occurs when APC is not enabled.\n */",
"apc_clear_cache", T(Boolean), S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-clear-cache.php )\n *\n * Clears the user/system cache.\n *\n * @cache_id   int     If cache_type is \"user\", the user cache will be\n *                     cleared; otherwise, the system cache (cached files)\n *                     will be cleared.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"apc_define_constants", T(Boolean), S(0), "key", T(String), NULL, S(0), NULL, S(0), "constants", T(String), NULL, S(0), NULL, S(0), "case_sensitive", T(Boolean), "b:1;", S(4), "true", S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apc-define-constants.php )\n *\n * define() is notoriously slow. Since the main benefit of APC is to\n * increase the performance of scripts/applications, this mechanism is\n * provided to streamline the process of mass constant definition. However,\n * this function does not perform as well as anticipated.\n *\n * For a better-performing solution, try the \273 hidef extension from PECL.\n * To remove a set of stored constants (without clearing the entire cache),\n * an empty array may be passed as the constants parameter, effectively\n * clearing the stored value(s).\n *\n * @key        string  The key serves as the name of the constant set being\n *                     stored. This key is used to retrieve the stored\n *                     constants in apc_load_constants().\n * @constants  string  An associative array of constant_name => value\n *                     pairs. The constant_name must follow the normal\n *                     constant naming rules. value must evaluate to a\n *                     scalar value.\n * @case_sensitive\n *             bool    The default behaviour for constants is to be\n *                     declared case-sensitive; i.e. CONSTANT and Constant\n *                     represent different values. If this parameter\n *                     evaluates to FALSE the constants will be declared as\n *                     case-insensitive symbols.\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"apc_load_constants", T(Boolean), S(0), "key", T(String), NULL, S(0), NULL, S(0), "case_sensitive", T(Boolean), "b:1;", S(4), "true", S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-load-constants.php\n * )\n *\n * Loads a set of constants from the cache.\n *\n * @key        string  The name of the constant set (that was stored with\n *                     apc_define_constants()) to be retrieved.\n * @case_sensitive\n *             bool    The default behaviour for constants is to be\n *                     declared case-sensitive; i.e. CONSTANT and Constant\n *                     represent different values. If this parameter\n *                     evaluates to FALSE the constants will be declared as\n *                     case-insensitive symbols.\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"apc_sma_info", T(Array), S(0), "limited", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-sma-info.php )\n *\n * Retrieves APC's Shared Memory Allocation information.\n *\n * @limited    bool    When set to FALSE (default) apc_sma_info() will\n *                     return a detailed information about each segment.\n *\n * @return     map     Array of Shared Memory Allocation data; FALSE on\n *                     failure.\n */",
"apc_filehits", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-filehits.php )\n *\n *\n * @return     vector\n */", 
"apc_delete_file", T(Variant), S(0), "keys", T(Variant), NULL, S(0), NULL, S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-delete-file.php )\n *\n * Deletes the given files from the opcode cache.\n *\n * @keys       mixed   The files to be deleted. Accepts a string, array of\n *                     strings, or an APCIterator object.\n * @cache_id   int\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. Or if\n *                     keys is an array, then an empty array is returned on\n *                     success, or an array of failed files is returned.\n */",
"apc_inc", T(Variant), S(0), "key", T(String), NULL, S(0), NULL, S(0), "step", T(Int64), "i:1;", S(4), "1", S(0), "success", T(Variant), "N;", S(2), "null", S(1), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16793600), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-inc.php )\n *\n * Increases a stored number.\n *\n * @key        string  The key of the value being increased.\n * @step       int     The step, or value to increase.\n * @success    mixed   Optionally pass the success or fail boolean value to\n *                     this referenced variable.\n * @cache_id   int\n *\n * @return     mixed   Returns the current value of key's value on success,\n *                     or FALSE on failure\n */",
"apc_dec", T(Variant), S(0), "key", T(String), NULL, S(0), NULL, S(0), "step", T(Int64), "i:1;", S(4), "1", S(0), "success", T(Variant), "N;", S(2), "null", S(1), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16793600), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-dec.php )\n *\n * Decreases a stored integer value.\n *\n * @key        string  The key of the value being decreased.\n * @step       int     The step, or value to decrease.\n * @success    mixed   Optionally pass the success or fail boolean value to\n *                     this referenced variable.\n * @cache_id   int\n *\n * @return     mixed   Returns the current value of key's value on success,\n *                     or FALSE on failure\n */",
"apc_cas", T(Boolean), S(0), "key", T(String), NULL, S(0), NULL, S(0), "old_cas", T(Int64), NULL, S(0), NULL, S(0), "new_cas", T(Int64), NULL, S(0), NULL, S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16793600), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-cas.php )\n *\n * apc_cas WarningThis function is currently not documented; only its\n * argument list is available.\n *\n * @key        string\n * @old_cas    int\n * @new_cas    int\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"apc_exists", T(Variant), S(0), "key", T(Variant), NULL, S(0), NULL, S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16793600), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-exists.php )\n *\n * Checks if one ore more APC keys exist.\n *\n * @key        mixed   The key to check existence. If an array is passed\n *                     then each element is checked.\n * @cache_id   int\n *\n * @return     mixed   TRUE if the key exists, otherwise FALSE. If array is\n *                     passed in, then an array is returned that contains\n *                     all existing keys, or an empty array if none exist.\n */",
"apc_bin_dump", T(Variant), S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), "filter", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-bin-dump.php )\n *\n * Returns a binary dump of the given files and user variables from the\n * APC cache. A NULL for files or user_vars signals a dump of every entry,\n * whereas array() will dump nothing.\n *\n * @cache_id   int     The files. Passing in NULL signals a dump of every\n *                     entry, while passing in array() will dump nothing.\n * @filter     mixed   The user vars. Passing in NULL signals a dump of\n *                     every entry, while passing in array() will dump\n *                     nothing.\n *\n * @return     mixed   Returns a binary dump of the given files and user\n *                     variables from the APC cache, FALSE if APC is not\n *                     enabled, or NULL if an unknown error is encountered.\n */",
"apc_bin_load", T(Boolean), S(0), "data", T(String), NULL, S(0), NULL, S(0), "flags", T(Int64), "i:0;", S(4), "0", S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-bin-load.php )\n *\n * Loads the given binary dump into the APC file/user cache.\n *\n * @data       string  The binary dump being loaded, likely from\n *                     apc_bin_dump().\n * @flags      int     Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5, or\n *                     both.\n * @cache_id   int\n *\n * @return     bool    Returns TRUE if the binary dump data was loaded with\n *                     success, otherwise FALSE is returned. FALSE is\n *                     returned if APC is not enabled, or if the data is\n *                     not a valid APC binary dump (e.g., unexpected size).\n */",
"apc_bin_dumpfile", T(Variant), S(0), "cache_id", T(Int64), NULL, S(0), NULL, S(0), "filter", T(Variant), NULL, S(0), NULL, S(0), "filename", T(String), NULL, S(0), NULL, S(0), "flags", T(Int64), "i:0;", S(4), "0", S(0), "context", T(Object), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-bin-dumpfile.php )\n *\n * Outputs a binary dump of the given files and user variables from the\n * APC cache to the named file.\n *\n * @cache_id   int     The file names being dumped.\n * @filter     mixed   The user variables being dumped.\n * @filename   string  The filename where the dump is being saved.\n * @flags      int     Flags passed to the filename stream. See the\n *                     file_put_contents() documentation for details.\n * @context    resource\n *                     The context passed to the filename stream. See the\n *                     file_put_contents() documentation for details.\n *\n * @return     mixed   The number of bytes written to the file, otherwise\n *                     FALSE if APC is not enabled, filename is an invalid\n *                     file name, filename can't be opened, the file dump\n *                     can't be completed (e.g., the hard drive is out of\n *                     disk space), or an unknown error was encountered.\n */",
"apc_bin_loadfile", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "context", T(Object), "N;", S(2), "null", S(0), "flags", T(Int64), "i:0;", S(4), "0", S(0), "cache_id", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apc-bin-loadfile.php )\n *\n * Loads a binary dump from a file into the APC file/user cache.\n *\n * @filename   string  The file name containing the dump, likely from\n *                     apc_bin_dumpfile().\n * @context    resource\n *                     The files context.\n * @flags      int     Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5, or\n *                     both.\n * @cache_id   int\n *\n * @return     bool    Returns TRUE on success, otherwise FALSE Reasons it\n *                     may return FALSE include APC is not enabled,\n *                     filename is an invalid file name or empty, filename\n *                     can't be opened, the file dump can't be completed,\n *                     or if the data is not a valid APC binary dump (e.g.,\n *                     unexpected size).\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
