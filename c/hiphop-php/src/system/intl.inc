// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"intl_get_error_code", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.intl-get-error-code.php\n * )\n *\n * Useful to handle errors occurred in static methods when there's no\n * object to get error code from.\n *\n * @return     int     Error code returned by the last API function call.\n */", 
"intl_get_error_message", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.intl-get-error-message.php )\n *\n * Get error message from last internationalization function called.\n *\n * @return     string  Description of an error occurred in the last API\n *                     function call.\n */", 
"intl_error_name", T(String), S(0), "error_code", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.intl-error-name.php )\n *\n * Return ICU error code name.\n *\n * @error_code int     ICU error code.\n *\n * @return     string  The returned string will be the same as the name of\n *                     the error code constant.\n */",
"intl_is_failure", T(Boolean), S(0), "error_code", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.intl-is-failure.php )\n *\n *\n * @error_code int     is a value that returned by functions:\n *                     intl_get_error_code(), collator_get_error_code() .\n *\n * @return     bool    TRUE if it the code indicates some failure, and\n *                     FALSE in case of success or a warning.\n */",
"collator_asort", T(Variant), S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), "arr", T(Variant), NULL, S(0), NULL, S(1), "sort_flag", T(Int64), "i:0;", S(4), "q_Collator$$SORT_REGULAR", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.collator-asort.php )\n *\n * Procedural style bool collator_asort ( Collator $coll , array &$arr [,\n * int $sort_flag ] ) This function sorts an array such that array indices\n * maintain their correlation with the array elements they are associated\n * with. This is used mainly when sorting associative arrays where the\n * actual element order is significant. Array elements will have sort order\n * according to current locale rules.\n *\n * Equivalent to standard PHP asort().\n *\n * @obj        mixed   Collator object.\n * @arr        mixed\n * @sort_flag  int     Optional sorting type, one of the following:\n *\n *                     Collator::SORT_REGULAR - compare items normally\n *                     (don't change types)\n *\n *                     Collator::SORT_NUMERIC - compare items numerically\n *\n *                     Collator::SORT_STRING - compare items as strings\n *\n *                     Default $sort_flag value is Collator::SORT_REGULAR.\n *                     It is also used if an invalid $sort_flag value has\n *                     been specified.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"collator_compare", T(Variant), S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), "str1", T(String), NULL, S(0), NULL, S(0), "str2", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.collator-compare.php )\n *\n * Procedural style int collator_compare ( Collator $coll , string $str1 ,\n * string $str2 ) Compare two Unicode strings according to collation rules.\n *\n * @obj        mixed   Collator object.\n * @str1       string  The first string to compare.\n * @str2       string  The second string to compare.\n *\n * @return     mixed   1 if str1 is greater than str2 ;\n *\n *                     0 if str1 is equal to str2;\n *\n *                     -1 if str1 is less than str2 . On error boolean\n *                     FALSE is returned. WarningThis function may return\n *                     Boolean FALSE, but may also return a non-Boolean\n *                     value which evaluates to FALSE, such as 0 or \"\".\n *                     Please read the section on Booleans for more\n *                     information. Use the === operator for testing the\n *                     return value of this function.\n */",
"collator_create", T(Variant), S(0), "locale", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.collator-create.php )\n *\n * Procedural style Collator collator_create ( string $locale ) The\n * strings will be compared using the options already specified.\n *\n * @locale     string  The locale containing the required collation rules.\n *                     Special values for locales can be passed in - if\n *                     null is passed for the locale, the default locale\n *                     collation rules will be used. If empty string (\"\")\n *                     or \"root\" are passed, UCA rules will be used.\n *\n * @return     mixed   Return new instance of Collator object, or NULL on\n *                     error.\n */",
"collator_get_attribute", T(Variant), S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), "attr", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-get-attribute.php )\n *\n *\n * @obj        mixed\n * @attr       int\n *\n * @return     mixed\n */",
"collator_get_error_code", T(Variant), S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-get-error-code.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
"collator_get_error_message", T(Variant), S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-get-error-message.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
"collator_get_locale", T(Variant), S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), "type", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.collator-get-locale.php\n * )\n *\n *\n * @obj        mixed\n * @type       int\n *\n * @return     mixed\n */",
"collator_get_strength", T(Variant), S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-get-strength.php )\n *\n *\n * @obj        mixed\n *\n * @return     mixed\n */",
"collator_set_attribute", T(Variant), S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), "attr", T(Int64), NULL, S(0), NULL, S(0), "val", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-set-attribute.php )\n *\n *\n * @obj        mixed\n * @attr       int\n * @val        int\n *\n * @return     mixed\n */",
"collator_set_strength", T(Variant), S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), "strength", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-set-strength.php )\n *\n *\n * @obj        mixed\n * @strength   int\n *\n * @return     mixed\n */",
"collator_sort_with_sort_keys", T(Variant), S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), "arr", T(Variant), NULL, S(0), NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.collator-sort-with-sort-keys.php )\n *\n *\n * @obj        mixed\n * @arr        mixed\n *\n * @return     mixed\n */",
"collator_sort", T(Variant), S(0), "obj", T(Variant), NULL, S(0), NULL, S(0), "arr", T(Variant), NULL, S(0), NULL, S(1), "sort_flag", T(Int64), "i:0;", S(4), "q_Collator$$SORT_REGULAR", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.collator-sort.php )\n *\n * Procedural style bool collator_sort ( Collator $coll , array &$arr [,\n * int $sort_flag ] ) This function sorts an array according to current\n * locale rules.\n *\n * Equivalent to standard PHP sort() .\n *\n * @obj        mixed   Collator object.\n * @arr        mixed   Array of strings to sort.\n * @sort_flag  int     Optional sorting type, one of the following:\n *\n *\n *\n *                     Collator::SORT_REGULAR - compare items normally\n *                     (don't change types)\n *\n *                     Collator::SORT_NUMERIC - compare items numerically\n *\n *                     Collator::SORT_STRING - compare items as strings\n *                     Default sorting type is Collator::SORT_REGULAR.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"idn_to_ascii", T(Variant), S(0), "domain", T(String), NULL, S(0), NULL, S(0), "errorcode", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.idn-to-ascii.php )\n *\n * This function converts Unicode domain name to IDNA ASCII-compatible\n * format.\n *\n * @domain     string  Domain to convert. In PHP 5 must be UTF-8 encoded.\n * @errorcode  mixed   Conversion options - combination of IDNA_*\n *                     constants.\n *\n * @return     mixed   Domain name encoded in ASCII-compatible form.\n */",
"idn_to_unicode", T(Variant), S(0), "domain", T(String), NULL, S(0), NULL, S(0), "errorcode", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.idn-to-unicode.php )\n *\n *\n * @domain     string\n * @errorcode  mixed\n *\n * @return     mixed\n */",
"idn_to_utf8", T(Variant), S(0), "domain", T(String), NULL, S(0), NULL, S(0), "errorcode", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.idn-to-utf8.php )\n *\n * This function converts Unicode domain name from IDNA ASCII-compatible\n * format to plain Unicode.\n *\n * @domain     string  Domain to convert in IDNA ASCII-compatible format.\n * @errorcode  mixed   Conversion options - combination of IDNA_*\n *                     constants.\n *\n * @return     mixed   Domain name in Unicode. In PHP5, domain name will be\n *                     in UTF-8.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2
"Collator", "", NULL, "__construct", T(Void), S(0), "locale", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/collator.construct.php )\n *\n *\n * @locale     string\n */", S(16384),"asort", T(Boolean), S(0), "arr", T(Variant), NULL, S(0), NULL, S(1), "sort_flag", T(Int64), "i:0;", S(4), "q_Collator$$SORT_REGULAR", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/collator.asort.php )\n *\n * Procedural style bool collator_asort ( Collator $coll , array &$arr [,\n * int $sort_flag ] ) This function sorts an array such that array indices\n * maintain their correlation with the array elements they are associated\n * with. This is used mainly when sorting associative arrays where the\n * actual element order is significant. Array elements will have sort order\n * according to current locale rules.\n *\n * Equivalent to standard PHP asort().\n *\n * @arr        mixed   Collator object.\n * @sort_flag  int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"compare", T(Variant), S(0), "str1", T(String), NULL, S(0), NULL, S(0), "str2", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/collator.compare.php )\n *\n * Procedural style int collator_compare ( Collator $coll , string $str1 ,\n * string $str2 ) Compare two Unicode strings according to collation rules.\n *\n * @str1       string  Collator object.\n * @str2       string  The first string to compare.\n *\n * @return     mixed   1 if str1 is greater than str2 ;\n *\n *                     0 if str1 is equal to str2;\n *\n *                     -1 if str1 is less than str2 . On error boolean\n *                     FALSE is returned. WarningThis function may return\n *                     Boolean FALSE, but may also return a non-Boolean\n *                     value which evaluates to FALSE, such as 0 or \"\".\n *                     Please read the section on Booleans for more\n *                     information. Use the === operator for testing the\n *                     return value of this function.\n */", S(16384),"create", T(Variant), S(0), "locale", T(String), NULL, S(0), NULL, S(0), NULL, S(16896), "/**\n * ( excerpt from http://php.net/manual/en/collator.create.php )\n *\n * Procedural style Collator collator_create ( string $locale ) The\n * strings will be compared using the options already specified.\n *\n * @locale     string  The locale containing the required collation rules.\n *                     Special values for locales can be passed in - if\n *                     null is passed for the locale, the default locale\n *                     collation rules will be used. If empty string (\"\")\n *                     or \"root\" are passed, UCA rules will be used.\n *\n * @return     mixed   Return new instance of Collator object, or NULL on\n *                     error.\n */", S(16896),"getattribute", T(Int64), S(0), "attr", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/collator.getattribute.php )\n *\n * Procedural style int collator_get_attribute ( Collator $coll , int\n * $attr ) Get a value of an integer collator attribute.\n *\n * @attr       int     Collator object.\n *\n * @return     int     Attribute value, or boolean FALSE on error.\n */", S(16384),"geterrorcode", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/collator.geterrorcode.php )\n *\n * Procedural style int collator_get_error_code ( Collator $coll )\n *\n * @return     int     Error code returned by the last Collator API\n *                     function call.\n */", S(16384),"geterrormessage", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/collator.geterrormessage.php )\n *\n * Procedural style string collator_get_error_message ( Collator $coll )\n * Retrieves the message for the last error.\n *\n * @return     string  Description of an error occurred in the last\n *                     Collator API function call.\n */", S(16384),"getlocale", T(String), S(0), "type", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/collator.getlocale.php )\n *\n * Procedural style string collator_get_locale ( Collator $coll , int\n * $type ) Get collector locale name.\n *\n * @type       int     Collator object.\n *\n * @return     string  Real locale name from which the collation data\n *                     comes. If the collator was instantiated from rules\n *                     or an error occurred, returns boolean FALSE.\n */", S(16384),"getstrength", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/collator.getstrength.php )\n *\n * Procedural style int collator_get_strength ( Collator $coll )\n *\n * @return     int     Returns current collation strength, or boolean FALSE\n *                     on error.\n */", S(16384),"setattribute", T(Boolean), S(0), "attr", T(Int64), NULL, S(0), NULL, S(0), "val", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/collator.setattribute.php )\n *\n * Procedural style bool collator_set_attribute ( Collator $coll , int\n * $attr , int $val )\n *\n * @attr       int     Collator object.\n * @val        int\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"setstrength", T(Boolean), S(0), "strength", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/collator.setstrength.php )\n *\n * Procedural style bool collator_set_strength ( Collator $coll , int\n * $strength ) The \273 ICU Collation Service supports many levels of\n * comparison (named \"Levels\", but also known as \"Strengths\"). Having these\n * categories enables ICU to sort strings precisely according to local\n * conventions. However, by allowing the levels to be selectively employed,\n * searching for a string in text can be performed with various matching\n * conditions.\n *\n *\n *\n * Primary Level: Typically, this is used to denote differences between\n * base characters (for example, \"a\" < \"b\"). It is the strongest\n * difference. For example, dictionaries are divided into different\n * sections by base character. This is also called the level1 strength.\n *\n * Secondary Level: Accents in the characters are considered secondary\n * differences (for example, \"as\" < \"\303\240s\" < \"at\"). Other differences\n * between letters can also be considered secondary differences, depending\n * on the language. A secondary difference is ignored when there is a\n * primary difference anywhere in the strings. This is also called the\n * level2 strength.\n *\n * Note: In some languages (such as Danish), certain accented letters are\n * considered to be separate base characters. In most languages, however,\n * an accented letter only has a secondary difference from the unaccented\n * version of that letter.\n *\n * Tertiary Level: Upper and lower case differences in characters are\n * distinguished at the tertiary level (for example, \"ao\" < \"Ao\" < \"a\303\262\").\n * In addition, a variant of a letter differs from the base form on the\n * tertiary level (such as \"A\" and \" \"). Another example is the difference\n * between large and small Kana. A tertiary difference is ignored when\n * there is a primary or secondary difference anywhere in the strings. This\n * is also called the level3 strength.\n *\n * Quaternary Level: When punctuation is ignored (see Ignoring\n * Punctuations ) at level 13, an additional level can be used to\n * distinguish words with and without punctuation (for example, \"ab\" <\n * \"a-b\" < \"aB\"). This difference is ignored when there is a primary,\n * secondary or tertiary difference. This is also known as the level4\n * strength. The quaternary level should only be used if ignoring\n * punctuation is required or when processing Japanese text (see Hiragana\n * processing).\n *\n * Identical Level: When all other levels are equal, the identical level\n * is used as a tiebreaker. The Unicode code point values of the NFD form\n * of each string are compared at this level, just in case there is no\n * difference at levels 14. For example, Hebrew cantillation marks are only\n * distinguished at this level. This level should be used sparingly, as\n * only code point values differences between two strings is an extremely\n * rare occurrence. Using this level substantially decreases the\n * performance for both incremental comparison and sort key generation (as\n * well as increasing the sort key length). It is also known as level 5\n * strength.\n *\n * For example, people may choose to ignore accents or ignore accents and\n * case when searching for text. Almost all characters are distinguished by\n * the first three levels, and in most locales the default value is thus\n * Tertiary. However, if Alternate is set to be Shifted, then the\n * Quaternary strength can be used to break ties among whitespace,\n * punctuation, and symbols that would otherwise be ignored. If very fine\n * distinctions among characters are required, then the Identical strength\n * can be used (for example, Identical Strength distinguishes between the\n * Mathematical Bold Small A and the Mathematical Italic Small A.).\n * However, using levels higher than Tertiary the Identical strength result\n * in significantly longer sort keys, and slower string comparison\n * performance for equal strings.\n *\n * @strength   int     Collator object.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"sortwithsortkeys", T(Boolean), S(0), "arr", T(Variant), NULL, S(0), NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/collator.sortwithsortkeys.php )\n *\n * Procedural style bool collator_sort_with_sort_keys ( Collator $coll ,\n * array &$arr ) Similar to collator_sort() but uses ICU sorting keys\n * produced by ucol_getSortKey() to gain more speed on large arrays.\n *\n * @arr        mixed   Collator object.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"sort", T(Boolean), S(0), "arr", T(Variant), NULL, S(0), NULL, S(1), "sort_flag", T(Int64), "i:0;", S(4), "q_Collator$$SORT_REGULAR", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/collator.sort.php )\n *\n * Procedural style bool collator_sort ( Collator $coll , array &$arr [,\n * int $sort_flag ] ) This function sorts an array according to current\n * locale rules.\n *\n * Equivalent to standard PHP sort() .\n *\n * @arr        mixed   Collator object.\n * @sort_flag  int     Array of strings to sort.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),NULL,NULL,"SORT_REGULAR", T(Int64),"SORT_NUMERIC", T(Int64),"SORT_STRING", T(Int64),"FRENCH_COLLATION", T(Int64),"ALTERNATE_HANDLING", T(Int64),"CASE_FIRST", T(Int64),"CASE_LEVEL", T(Int64),"NORMALIZATION_MODE", T(Int64),"STRENGTH", T(Int64),"HIRAGANA_QUATERNARY_MODE", T(Int64),"NUMERIC_COLLATION", T(Int64),"DEFAULT_VALUE", T(Int64),"PRIMARY", T(Int64),"SECONDARY", T(Int64),"TERTIARY", T(Int64),"DEFAULT_STRENGTH", T(Int64),"QUATERNARY", T(Int64),"IDENTICAL", T(Int64),"OFF", T(Int64),"ON", T(Int64),"SHIFTED", T(Int64),"NON_IGNORABLE", T(Int64),"LOWER_FIRST", T(Int64),"UPPER_FIRST", T(Int64),NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.collator.php )\n *\n * Provides string comparison capability with support for appropriate\n * locale-sensitive sort orderings.\n *\n */", "Locale", "", NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/locale.construct.php )\n *\n *\n */", S(16384),NULL,NULL,"ACTUAL_LOCALE", T(Int64),"VALID_LOCALE", T(Int64),NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.locale.php )\n *\n * A \"Locale\" is an identifier used to get language, culture, or\n * regionally-specific behavior from an API. PHP locales are organized and\n * identified the same way that the CLDR locales used by ICU (and many\n * vendors of Unix-like operating systems, the Mac, Java, and so forth)\n * use. Locales are identified using RFC 4646 language tags (which use\n * hyphen, not underscore) in addition to the more traditional\n * underscore-using identifiers. Unless otherwise noted the functions in\n * this class are tolerant of both formats.\n *\n * Examples of identifiers include: en-US (English, United States)\n * zh-Hant-TW (Chinese, Traditional Script, Taiwan) fr-CA, fr-FR (French\n * for Canada and France respectively) The Locale class (and related\n * procedural functions) are used to interact with locale identifiers--to\n * verify that an ID is well-formed, valid, etc. The extensions used by\n * CLDR in UAX #35 (and inherited by ICU) are valid and used wherever they\n * would be in ICU normally. Locales cannot be instantiated as objects. All\n * of the functions/methods provided are static. The null or empty string\n * obtains the \"root\" locale. The \"root\" locale is equivalent to\n * \"en_US_POSIX\" in CLDR. Language tags (and thus locale identifiers) are\n * case insensitive. There exists a canonicalization function to make case\n * match the specification.\n *\n */", "Normalizer", "", NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/normalizer.construct.php )\n *\n *\n */", S(16384),"isnormalized", T(Variant), S(0), "input", T(String), NULL, S(0), NULL, S(0), "form", T(Int64), "i:4;", S(4), "q_Normalizer$$FORM_C", S(0), NULL, S(16896), "/**\n * ( excerpt from http://php.net/manual/en/normalizer.isnormalized.php )\n *\n * Procedural style bool normalizer_is_normalized ( string $input [,\n * string $form = Normalizer::FORM_C ] ) Checks if the provided string is\n * already in the specified normalization form.\n *\n * @input      string\n * @form       int     One of the normalization forms.\n *\n * @return     mixed   TRUE if normalized, FALSE otherwise or if there an\n *                     error\n */", S(16896),"normalize", T(Variant), S(0), "input", T(String), NULL, S(0), NULL, S(0), "form", T(Int64), "i:4;", S(4), "q_Normalizer$$FORM_C", S(0), NULL, S(16896), "/**\n * ( excerpt from http://php.net/manual/en/normalizer.normalize.php )\n *\n * Procedural style string normalizer_normalize ( string $input [, string\n * $form = Normalizer::FORM_C ] ) Normalizes the input provided and returns\n * the normalized string\n *\n * @input      string\n * @form       int\n *\n * @return     mixed   NULL if an error occurred.\n */", S(16896),NULL,NULL,"NONE", T(Int64),"FORM_D", T(Int64),"NFD", T(Int64),"FORM_KD", T(Int64),"NFKD", T(Int64),"FORM_C", T(Int64),"NFC", T(Int64),"FORM_KC", T(Int64),"NFKC", T(Int64),NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.normalizer.php )\n *\n * Normalization is a process that involves transforming characters and\n * sequences of characters into a formally-defined underlying\n * representation. This process is most important when text needs to be\n * compared for sorting and searching, but it is also used when storing\n * text to ensure that the text is stored in a consistent representation.\n *\n * The Unicode Consortium has defined a number of normalization forms\n * reflecting the various needs of applications: Normalization Form D (NFD)\n * - Canonical Decomposition Normalization Form C (NFC) - Canonical\n * Decomposition followed by Canonical Composition Normalization Form KD\n * (NFKD) - Compatibility Decomposition Normalization Form KC (NFKC) -\n * Compatibility Decomposition followed by Canonical Composition The\n * different forms are defined in terms of a set of transformations on the\n * text, transformations that are expressed by both an algorithm and a set\n * of data files.\n *\n */", 
#endif
