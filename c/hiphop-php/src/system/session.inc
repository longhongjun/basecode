// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"session_set_cookie_params", T(Void), S(0), "lifetime", T(Int64), NULL, S(0), NULL, S(0), "path", T(String), "N;", S(2), "null", S(0), "domain", T(String), "N;", S(2), "null", S(0), "secure", T(Variant), "N;", S(2), "null", S(0), "httponly", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-set-cookie-params.php )\n *\n * Set cookie parameters defined in the php.ini file. The effect of this\n * function only lasts for the duration of the script. Thus, you need to\n * call session_set_cookie_params() for every request and before\n * session_start() is called.\n *\n * @lifetime   int     Lifetime of the session cookie, defined in seconds.\n * @path       string  Path on the domain where the cookie will work. Use a\n *                     single slash ('/') for all paths on the domain.\n * @domain     string  Cookie domain, for example 'www.php.net'. To make\n *                     cookies visible on all subdomains then the domain\n *                     must be prefixed with a dot like '.php.net'.\n * @secure     mixed   If TRUE cookie will only be sent over secure\n *                     connections.\n * @httponly   mixed   If set to TRUE then PHP will attempt to send the\n *                     httponly flag when setting the session cookie.\n *\n * @return     mixed   No value is returned.\n */",
"session_get_cookie_params", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-get-cookie-params.php )\n *\n * Gets the session cookie parameters.\n *\n * @return     map     Returns an array with the current session cookie\n *                     information, the array contains the following items:\n *                     \"lifetime\" - The lifetime of the cookie in seconds.\n *                     \"path\" - The path where information is stored.\n *                     \"domain\" - The domain of the cookie. \"secure\" - The\n *                     cookie should only be sent over secure connections.\n *                     \"httponly\" - The cookie can only be accessed through\n *                     the HTTP protocol.\n */", 
"session_name", T(String), S(0), "newname", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.session-name.php )\n *\n * session_name() returns the name of the current session. If name is\n * given, session_name() will update the session name and return the old\n * session name.\n *\n * The session name is reset to the default value stored in session.name\n * at request startup time. Thus, you need to call session_name() for every\n * request (and before session_start() or session_register() are called).\n *\n * @newname    string  The session name references the session id in\n *                     cookies and URLs. It should contain only\n *                     alphanumeric characters; it should be short and\n *                     descriptive (i.e. for users with enabled cookie\n *                     warnings). If name is specified, the name of the\n *                     current session is changed to its value.\n *\n *                     Warning\n *\n *                     The session name can't consist of digits only, at\n *                     least one letter must be present. Otherwise a new\n *                     session id is generated every time.\n *\n * @return     string  Returns the name of the current session.\n */",
"session_module_name", T(Variant), S(0), "newname", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.session-module-name.php\n * )\n *\n * session_module_name() gets the name of the current session module.\n *\n * @newname    string  If module is specified, that module will be used\n *                     instead.\n *\n * @return     mixed   Returns the name of the current session module.\n */",
"session_set_save_handler", T(Boolean), S(0), "open", T(String), NULL, S(0), NULL, S(0), "close", T(String), NULL, S(0), NULL, S(0), "read", T(String), NULL, S(0), NULL, S(0), "write", T(String), NULL, S(0), NULL, S(0), "destroy", T(String), NULL, S(0), NULL, S(0), "gc", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-set-save-handler.php )\n *\n * session_set_save_handler() sets the user-level session storage\n * functions which are used for storing and retrieving data associated with\n * a session. This is most useful when a storage method other than those\n * supplied by PHP sessions is preferred. i.e. Storing the session data in\n * a local database.\n *\n * @open       string  Open function, this works like a constructor in\n *                     classes and is executed when the session is being\n *                     opened. The open function expects two parameters,\n *                     where the first is the save path and the second is\n *                     the session name.\n * @close      string  Close function, this works like a destructor in\n *                     classes and is executed when the session operation\n *                     is done.\n * @read       string  Read function must return string value always to\n *                     make save handler work as expected. Return empty\n *                     string if there is no data to read. Return values\n *                     from other handlers are converted to boolean\n *                     expression. TRUE for success, FALSE for failure.\n * @write      string  Write function that is called when session data is\n *                     to be saved. This function expects two parameters:\n *                     an identifier and the data associated with it.\n *\n *                     The \"write\" handler is not executed until after the\n *                     output stream is closed. Thus, output from debugging\n *                     statements in the \"write\" handler will never be seen\n *                     in the browser. If debugging output is necessary, it\n *                     is suggested that the debug output be written to a\n *                     file instead.\n * @destroy    string  The destroy handler, this is executed when a session\n *                     is destroyed with session_destroy() and takes the\n *                     session id as its only parameter.\n * @gc         string  The garbage collector, this is executed when the\n *                     session garbage collector is executed and takes the\n *                     max session lifetime as its only parameter.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"session_save_path", T(String), S(0), "newname", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.session-save-path.php )\n *\n * session_save_path() returns the path of the current directory used to\n * save session data.\n *\n * @newname    string  Session data path. If specified, the path to which\n *                     data is saved will be changed. session_save_path()\n *                     needs to be called before session_start() for that\n *                     purpose.\n *\n *\n *\n *                     On some operating systems, you may want to specify\n *                     a path on a filesystem that handles lots of small\n *                     files efficiently. For example, on Linux, reiserfs\n *                     may provide better performance than ext2fs.\n *\n * @return     string  Returns the path of the current directory used for\n *                     data storage.\n */",
"session_id", T(String), S(0), "newid", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.session-id.php )\n *\n * session_id() is used to get or set the session id for the current\n * session.\n *\n * The constant SID can also be used to retrieve the current name and\n * session id as a string suitable for adding to URLs. See also Session\n * handling.\n *\n * @newid      string  If id is specified, it will replace the current\n *                     session id. session_id() needs to be called before\n *                     session_start() for that purpose. Depending on the\n *                     session handler, not all characters are allowed\n *                     within the session id. For example, the file session\n *                     handler only allows characters in the range a-z A-Z\n *                     0-9 , (comma) and - (minus)! When using session\n *                     cookies, specifying an id for session_id() will\n *                     always send a new cookie when session_start() is\n *                     called, regardless if the current session id is\n *                     identical to the one being set.\n *\n * @return     string  session_id() returns the session id for the current\n *                     session or the empty string (\"\") if there is no\n *                     current session (no current session id exists).\n */",
"session_regenerate_id", T(Boolean), S(0), "delete_old_session", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-regenerate-id.php )\n *\n * session_regenerate_id() will replace the current session id with a new\n * one, and keep the current session information.\n *\n * @delete_old_session\n *             bool    Whether to delete the old associated session file or\n *                     not.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"session_cache_limiter", T(String), S(0), "new_cache_limiter", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-cache-limiter.php )\n *\n * session_cache_limiter() returns the name of the current cache limiter.\n *\n * The cache limiter defines which cache control HTTP headers are sent to\n * the client. These headers determine the rules by which the page content\n * may be cached by the client and intermediate proxies. Setting the cache\n * limiter to nocache disallows any client/proxy caching. A value of public\n * permits caching by proxies and the client, whereas private disallows\n * caching by proxies and permits the client to cache the contents.\n *\n * In private mode, the Expire header sent to the client may cause\n * confusion for some browsers, including Mozilla. You can avoid this\n * problem by using private_no_expire mode. The Expire header is never sent\n * to the client in this mode.\n *\n * The cache limiter is reset to the default value stored in\n * session.cache_limiter at request startup time. Thus, you need to call\n * session_cache_limiter() for every request (and before session_start() is\n * called).\n *\n * @new_cache_limiter\n *             string  If cache_limiter is specified, the name of the\n *                     current cache limiter is changed to the new value.\n *                     Possible values Value Headers sent public\n *\n *                     private_no_expire\n *\n *                     private\n *\n *                     nocache\n *\n * @return     string  Returns the name of the current cache limiter.\n */",
"session_cache_expire", T(Int64), S(0), "new_cache_expire", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-cache-expire.php )\n *\n * session_cache_expire() returns the current setting of\n * session.cache_expire.\n *\n * The cache expire is reset to the default value of 180 stored in\n * session.cache_limiter at request startup time. Thus, you need to call\n * session_cache_expire() for every request (and before session_start() is\n * called).\n *\n * @new_cache_expire\n *             string  If new_cache_expire is given, the current cache\n *                     expire is replaced with new_cache_expire.\n *\n *                     Setting new_cache_expire is of value only, if\n *                     session.cache_limiter is set to a value different\n *                     from nocache.\n *\n * @return     int     Returns the current setting of session.cache_expire.\n *                     The value returned should be read in minutes,\n *                     defaults to 180.\n */",
"session_encode", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.session-encode.php )\n *\n * session_encode() returns a string with the contents of the current\n * session encoded within.\n *\n * @return     mixed   Returns the contents of the current session encoded.\n */", 
"session_decode", T(Boolean), S(0), "data", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.session-decode.php )\n *\n * session_decode() decodes the session data in data, setting variables\n * stored in the session.\n *\n * @data       string  The encoded data to be stored.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"session_start", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.session-start.php )\n *\n * session_start() creates a session or resumes the current one based on a\n * session identifier passed via a GET or POST request, or passed via a\n * cookie.\n *\n * To use a named session, call session_name() before calling\n * session_start().\n *\n * When session.use_trans_sid is enabled, the session_start() function\n * will register an internal output handler for URL rewriting.\n *\n * If a user uses ob_gzhandler or similar with ob_start(), the function\n * order is important for proper output. For example, ob_gzhandler must be\n * registered before starting the session.\n *\n * @return     bool    This function returns TRUE if a session was\n *                     successfully started, otherwise FALSE.\n */", 
"session_destroy", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.session-destroy.php )\n *\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"session_unset", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.session-unset.php )\n *\n * The session_unset() function frees all session variables currently\n * registered.\n *\n * @return     mixed   No value is returned.\n */", 
"session_commit", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.session-commit.php )\n *\n *\n */", 
"session_write_close", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.session-write-close.php\n * )\n *\n * End the current session and store session data.\n *\n * Session data is usually stored after your script terminated without the\n * need to call session_write_close(), but as session data is locked to\n * prevent concurrent writes only one script may operate on a session at\n * any time. When using framesets together with sessions you will\n * experience the frames loading one by one due to this locking. You can\n * reduce the time needed to load all the frames by ending the session as\n * soon as all changes to session variables are done.\n *\n * @return     mixed   No value is returned.\n */", 
"session_register", T(Boolean), S(0), "var_names", T(Variant), NULL, S(0), NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.session-register.php )\n *\n * session_register() accepts a variable number of arguments, any of which\n * can be either a string holding the name of a variable or an array\n * consisting of variable names or other arrays. For each name,\n * session_register() registers the global variable with that name in the\n * current session.\n *\n * You can also create a session variable by simply setting the\n * appropriate member of the $_SESSION or $HTTP_SESSION_VARS (PHP < 4.1.0)\n * array.\n *\n *\n *\n * If session_start() was not called before this function is called, an\n * implicit call to session_start() with no parameters will be made.\n * $_SESSION does not mimic this behavior and requires session_start()\n * before use. WarningThis function has been DEPRECATED as of PHP 5.3.0.\n * Relying on this feature is highly discouraged.\n *\n * @var_names  mixed   A string holding the name of a variable or an array\n *                     consisting of variable names or other arrays.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"session_unregister", T(Boolean), S(0), "varname", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.session-unregister.php\n * )\n *\n * session_unregister() unregisters the global variable named name from\n * the current session. WarningThis function has been DEPRECATED as of PHP\n * 5.3.0. Relying on this feature is highly discouraged.\n *\n * @varname    string  The variable name.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"session_is_registered", T(Boolean), S(0), "varname", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.session-is-registered.php )\n *\n * Finds out whether a global variable is registered in a session.\n * WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on\n * this feature is highly discouraged.\n *\n * @varname    string  The variable name.\n *\n * @return     bool    session_is_registered() returns TRUE if there is a\n *                     global variable with the name name registered in the\n *                     current session, FALSE otherwise.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
