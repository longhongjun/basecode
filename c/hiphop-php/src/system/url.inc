// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"base64_decode", T(Variant), S(0), "data", T(String), NULL, S(0), NULL, S(0), "strict", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.base64-decode.php )\n *\n * Decodes a base64 encoded data.\n *\n * @data       string  The encoded data.\n * @strict     bool    Returns FALSE if input contains character from\n *                     outside the base64 alphabet.\n *\n * @return     mixed   Returns the original data or FALSE on failure. The\n *                     returned data may be binary.\n */",
"base64_encode", T(String), S(0), "data", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.base64-encode.php )\n *\n * Encodes the given data with base64.\n *\n * This encoding is designed to make binary data survive transport through\n * transport layers that are not 8-bit clean, such as mail bodies.\n *\n * Base64-encoded data takes about 33% more space than the original data.\n *\n * @data       string  The data to encode.\n *\n * @return     string  The encoded data, as a string.\n */",
"get_headers", T(Variant), S(0), "url", T(String), NULL, S(0), NULL, S(0), "format", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-headers.php )\n *\n * get_headers() returns an array with the headers sent by the server in\n * response to a HTTP request.\n *\n * @url        string  The target URL.\n * @format     int     If the optional format parameter is set to non-zero,\n *                     get_headers() parses the response and sets the\n *                     array's keys.\n *\n * @return     mixed   Returns an indexed or associative array with the\n *                     headers, or FALSE on failure.\n */",
"get_meta_tags", T(Array), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "use_include_path", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-meta-tags.php )\n *\n * Opens filename and parses it line by line for <meta> tags in the file.\n * The parsing stops at </head>.\n *\n * @filename   string  The path to the HTML file, as a string. This can be\n *                     a local file or an URL.\n *\n *                     Example #1 What get_meta_tags() parses\n *\n *                     (pay attention to line endings - PHP uses a native\n *                     function to parse the input, so a Mac file won't\n *                     work on Unix).\n * @use_include_path\n *             bool    Setting use_include_path to TRUE will result in PHP\n *                     trying to open the file along the standard include\n *                     path as per the include_path directive. This is used\n *                     for local files, not URLs.\n *\n * @return     vector  Returns an array with all the parsed meta tags.\n *\n *                     The value of the name property becomes the key, the\n *                     value of the content property becomes the value of\n *                     the returned array, so you can easily use standard\n *                     array functions to traverse it or access single\n *                     values. Special characters in the value of the name\n *                     property are substituted with '_', the rest is\n *                     converted to lower case. If two meta tags have the\n *                     same name, only the last one is returned.\n */",
"http_build_query", T(Variant), S(0), "formdata", T(Variant), NULL, S(0), NULL, S(0), "numeric_prefix", T(String), "N;", S(2), "null", S(0), "arg_separator", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.http-build-query.php )\n *\n * Generates a URL-encoded query string from the associative (or indexed)\n * array provided.\n *\n * @formdata   mixed   May be an array or object containing properties.\n *\n *                     If query_data is an array, it may be a simple\n *                     one-dimensional structure, or an array of arrays\n *                     (which in turn may contain other arrays).\n *\n *                     If query_data is an object, then only public\n *                     properties will be incorporated into the result.\n * @numeric_prefix\n *             string  If numeric indices are used in the base array and\n *                     this parameter is provided, it will be prepended to\n *                     the numeric index for elements in the base array\n *                     only.\n *\n *                     This is meant to allow for legal variable names\n *                     when the data is decoded by PHP or another CGI\n *                     application later on.\n * @arg_separator\n *             string  arg_separator.output is used to separate arguments,\n *                     unless this parameter is specified, and is then\n *                     used.\n *\n * @return     mixed   Returns a URL-encoded string.\n */",
"parse_url", T(Variant), S(0), "url", T(String), NULL, S(0), NULL, S(0), "component", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.parse-url.php )\n *\n * This function parses a URL and returns an associative array containing\n * any of the various components of the URL that are present.\n *\n * This function is not meant to validate the given URL, it only breaks it\n * up into the above listed parts. Partial URLs are also accepted,\n * parse_url() tries its best to parse them correctly.\n *\n * @url        string  The URL to parse. Invalid characters are replaced by\n *                     _.\n * @component  int     Specify one of PHP_URL_SCHEME, PHP_URL_HOST,\n *                     PHP_URL_PORT, PHP_URL_USER, PHP_URL_PASS,\n *                     PHP_URL_PATH, PHP_URL_QUERY or PHP_URL_FRAGMENT to\n *                     retrieve just a specific URL component as a string.\n *\n * @return     mixed   On seriously malformed URLs, parse_url() may return\n *                     FALSE. Otherwise an associative array is returned,\n *                     whose components may be (at least one): scheme -\n *                     e.g. http host port user pass path query - after the\n *                     question mark \? fragment - after the hashmark #\n *\n *                     If the component parameter is specified a string is\n *                     returned instead of an array.\n */",
"rawurldecode", T(String), S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.rawurldecode.php )\n *\n * Returns a string in which the sequences with percent (%) signs followed\n * by two hex digits have been replaced with literal characters.\n *\n * @str        string  The URL to be decoded.\n *\n * @return     string  Returns the decoded URL, as a string.\n */",
"rawurlencode", T(String), S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.rawurlencode.php )\n *\n * Encodes the given string according to \273 RFC 1738.\n *\n * @str        string  The URL to be encoded.\n *\n * @return     string  Returns a string in which all non-alphanumeric\n *                     characters except -_. have been replaced with a\n *                     percent (%) sign followed by two hex digits. This is\n *                     the encoding described in \273 RFC 1738 for protecting\n *                     literal characters from being interpreted as special\n *                     URL delimiters, and for protecting URLs from being\n *                     mangled by transmission media with character\n *                     conversions (like some email systems).\n */",
"urldecode", T(String), S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.urldecode.php )\n *\n * Decodes any %## encoding in the given string. Plus symbols ('+') are\n * decoded to a space character.\n *\n * @str        string  The string to be decoded.\n *\n * @return     string  Returns the decoded string.\n */",
"urlencode", T(String), S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.urlencode.php )\n *\n * This function is convenient when encoding a string to be used in a\n * query part of a URL, as a convenient way to pass variables to the next\n * page.\n *\n * @str        string  The string to be encoded.\n *\n * @return     string  Returns a string in which all non-alphanumeric\n *                     characters except -_. have been replaced with a\n *                     percent (%) sign followed by two hex digits and\n *                     spaces encoded as plus (+) signs. It is encoded the\n *                     same way that the posted data from a WWW form is\n *                     encoded, that is the same way as in\n *                     application/x-www-form-urlencoded media type. This\n *                     differs from the \273 RFC 1738 encoding (see\n *                     rawurlencode()) in that for historical reasons,\n *                     spaces are encoded as plus (+) signs.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
