// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"mail", T(Boolean), S(0), "to", T(String), NULL, S(0), NULL, S(0), "subject", T(String), NULL, S(0), NULL, S(0), "message", T(String), NULL, S(0), NULL, S(0), "additional_headers", T(String), "N;", S(2), "null", S(0), "additional_parameters", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mail.php )\n *\n * Sends an email.\n *\n * @to         string  Receiver, or receivers of the mail.\n *\n *                     The formatting of this string must comply with \273\n *                     RFC 2822. Some examples are: user@example.com\n *                     user@example.com, anotheruser@example.com User\n *                     <user@example.com> User <user@example.com>, Another\n *                     User <anotheruser@example.com>\n * @subject    string  Subject of the email to be sent. Caution\n *\n *                     Subject must satisfy \273 RFC 2047.\n * @message    string  Message to be sent.\n *\n *                     Each line should be separated with a LF (\\n). Lines\n *                     should not be larger than 70 characters. Caution\n *\n *                     (Windows only) When PHP is talking to a SMTP server\n *                     directly, if a full stop is found on the start of a\n *                     line, it is removed. To counter-act this, replace\n *                     these occurrences with a double dot.\n * @additional_headers\n *             string  String to be inserted at the end of the email\n *                     header.\n *\n *                     This is typically used to add extra headers (From,\n *                     Cc, and Bcc). Multiple extra headers should be\n *                     separated with a CRLF (\\r\\n).\n *\n *                     When sending mail, the mail must contain a From\n *                     header. This can be set with the additional_headers\n *                     parameter, or a default can be set in php.ini.\n *\n *                     Failing to do this will result in an error message\n *                     similar to Warning: mail(): \"sendmail_from\" not set\n *                     in php.ini or custom \"From:\" header missing. The\n *                     From header sets also Return-Path under Windows.\n *\n *                     If messages are not received, try using a LF (\\n)\n *                     only. Some poor quality Unix mail transfer agents\n *                     replace LF by CRLF automatically (which leads to\n *                     doubling CR if CRLF is used). This should be a last\n *                     resort, as it does not comply with \273 RFC 2822.\n * @additional_parameters\n *             string  The additional_parameters parameter can be used to\n *                     pass additional flags as command line options to the\n *                     program configured to be used when sending mail, as\n *                     defined by the sendmail_path configuration setting.\n *                     For example, this can be used to set the envelope\n *                     sender address when using sendmail with the -f\n *                     sendmail option.\n *\n *                     The user that the webserver runs as should be added\n *                     as a trusted user to the sendmail configuration to\n *                     prevent a 'X-Warning' header from being added to the\n *                     message when the envelope sender (-f) is set using\n *                     this method. For sendmail users, this file is\n *                     /etc/mail/trusted-users.\n *\n * @return     bool    Returns TRUE if the mail was successfully accepted\n *                     for delivery, FALSE otherwise.\n *\n *                     It is important to note that just because the mail\n *                     was accepted for delivery, it does NOT mean the mail\n *                     will actually reach the intended destination.\n */",
"ezmlm_hash", T(Int64), S(0), "addr", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ezmlm-hash.php )\n *\n *\n * @addr       string  The email address that's being hashed.\n *\n * @return     int     The hash value of addr.\n */",
"mailparse_msg_create", T(Object), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-create.php )\n *\n * Create a MIME mail resource.\n *\n * @return     resource\n *                     Returns a handle that can be used to parse a\n *                     message.\n */", 
"mailparse_msg_free", T(Boolean), S(0), "mimemail", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mailparse-msg-free.php\n * )\n *\n * Frees a MIME resource.\n *\n * @mimemail   resource\n *                     A valid MIME resource allocated by\n *                     mailparse_msg_create() or\n *                     mailparse_msg_parse_file().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"mailparse_msg_parse_file", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-parse-file.php )\n *\n * Parses a file. This is the optimal way of parsing a mail file that you\n * have on disk.\n *\n * @filename   string  Path to the file holding the message. The file is\n *                     opened and streamed through the parser.\n *\n * @return     mixed   Returns a MIME resource representing the structure,\n *                     or FALSE on error.\n */",
"mailparse_msg_parse", T(Boolean), S(0), "mimemail", T(Object), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mailparse-msg-parse.php\n * )\n *\n * Incrementally parse data into the supplied mime mail resource.\n *\n * This function allow you to stream portions of a file at a time, rather\n * than read and parse the whole thing.\n *\n * @mimemail   resource\n *                     A valid MIME resource.\n * @data       string\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"mailparse_msg_extract_part_file", T(Variant), S(0), "mimemail", T(Object), NULL, S(0), NULL, S(0), "filename", T(Variant), NULL, S(0), NULL, S(0), "callbackfunc", T(Variant), "s:0:\"\";", S(7), "\"\"", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-extract-part-file.php )\n *\n * Extracts/decodes a message section from the supplied filename.\n *\n * The contents of the section will be decoded according to their transfer\n * encoding - base64, quoted-printable and uuencoded text are supported.\n *\n * @mimemail   resource\n *                     A valid MIME resource, created with\n *                     mailparse_msg_create().\n * @filename   mixed   Can be a file name or a valid stream resource.\n * @callbackfunc\n *             mixed   If set, this must be either a valid callback that\n *                     will be passed the extracted section, or NULL to\n *                     make this function return the extracted section.\n *\n *                     If not specified, the contents will be sent to\n *                     \"stdout\".\n *\n * @return     mixed   If callbackfunc is not NULL returns TRUE on success.\n *\n *                     If callbackfunc is set to NULL, returns the\n *                     extracted section as a string.\n *\n *                     Returns FALSE on error.\n */",
"mailparse_msg_extract_whole_part_file", T(Variant), S(0), "mimemail", T(Object), NULL, S(0), NULL, S(0), "filename", T(Variant), NULL, S(0), NULL, S(0), "callbackfunc", T(Variant), "s:0:\"\";", S(7), "\"\"", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-extract-whole-part-file.php\n * )\n *\n *\n * @mimemail   resource\n *                     A valid MIME resource.\n * @filename   mixed\n * @callbackfunc\n *             mixed\n *\n * @return     mixed\n */",
"mailparse_msg_extract_part", T(Variant), S(0), "mimemail", T(Object), NULL, S(0), NULL, S(0), "msgbody", T(Variant), NULL, S(0), NULL, S(0), "callbackfunc", T(Variant), "s:0:\"\";", S(7), "\"\"", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-extract-part.php )\n *\n *\n * @mimemail   resource\n *                     A valid MIME resource.\n * @msgbody    mixed\n * @callbackfunc\n *             mixed\n *\n * @return     mixed   No value is returned.\n */",
"mailparse_msg_get_part_data", T(Array), S(0), "mimemail", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-get-part-data.php )\n *\n *\n * @mimemail   resource\n *\n *\n * @return     map\n */",
"mailparse_msg_get_part", T(Variant), S(0), "mimemail", T(Object), NULL, S(0), NULL, S(0), "mimesection", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-get-part.php )\n *\n *\n * @mimemail   resource\n *\n * @mimesection\n *             string\n *\n * @return     mixed\n */",
"mailparse_msg_get_structure", T(Array), S(0), "mimemail", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-msg-get-structure.php )\n *\n *\n * @mimemail   resource\n *\n *\n * @return     map\n */",
"mailparse_rfc822_parse_addresses", T(Array), S(0), "addresses", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-rfc822-parse-addresses.php )\n *\n * Parses a \273 RFC 822 compliant recipient list, such as that found in the\n * To: header.\n *\n * @addresses  string  A string containing addresses, like in: Wez Furlong\n *                     <wez@example.com>, doe@example.com\n *\n *                     This string must not include the header name.\n *\n * @return     vector  Returns an array of associative arrays with the\n *                     following keys for each recipient: display The\n *                     recipient name, for display purpose. If this part is\n *                     not set for a recipient, this key will hold the same\n *                     value as address. address The email address is_group\n *                     TRUE if the recipient is a newsgroup, FALSE\n *                     otherwise.\n */",
"mailparse_stream_encode", T(Boolean), S(0), "sourcefp", T(Object), NULL, S(0), NULL, S(0), "destfp", T(Object), NULL, S(0), NULL, S(0), "encoding", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-stream-encode.php )\n *\n * Streams data from the source file pointer, apply encoding and write to\n * the destination file pointer.\n *\n * @sourcefp   resource\n *                     A valid file handle. The file is streamed through\n *                     the parser.\n * @destfp     resource\n *                     The destination file handle in which the encoded\n *                     data will be written.\n * @encoding   string  One of the character encodings supported by the\n *                     mbstring module.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"mailparse_uudecode_all", T(Variant), S(0), "fp", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-uudecode-all.php )\n *\n * Scans the data from the given file pointer and extract each embedded\n * uuencoded file into a temporary file.\n *\n * @fp         resource\n *                     A valid file pointer.\n *\n * @return     mixed   Returns an array of associative arrays listing\n *                     filename information. filename Path to the temporary\n *                     file name created origfilename The original\n *                     filename, for uuencoded parts only The first\n *                     filename entry is the message body. The next entries\n *                     are the decoded uuencoded files.\n */",
"mailparse_determine_best_xfer_encoding", T(Variant), S(0), "fp", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mailparse-determine-best-xfer-encoding.php\n * )\n *\n * Figures out the best way of encoding the content read from the given\n * file pointer.\n *\n * @fp         resource\n *                     A valid file pointer, which must be seek-able.\n *\n * @return     mixed   Returns one of the character encodings supported by\n *                     the mbstring module.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
