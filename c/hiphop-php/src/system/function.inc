// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"get_defined_functions", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-defined-functions.php )\n *\n * Gets an array of all defined functions.\n *\n * @return     map     Returns an multidimensional array containing a list\n *                     of all defined functions, both built-in (internal)\n *                     and user-defined. The internal functions will be\n *                     accessible via $arr[\"internal\"], and the user\n *                     defined ones using $arr[\"user\"] (see example below).\n */", 
"function_exists", T(Boolean), S(0), "function_name", T(String), NULL, S(0), NULL, S(0), "autoload", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.function-exists.php )\n *\n * Checks the list of defined functions, both built-in (internal) and\n * user-defined, for function_name.\n *\n * @function_name\n *             string  The function name, as a string.\n * @autoload   bool    Whether to try to autoload.\n *\n * @return     bool    Returns TRUE if function_name exists and is a\n *                     function, FALSE otherwise.\n *\n *                     This function will return FALSE for constructs,\n *                     such as include_once() and echo().\n */", 
"is_callable", T(Boolean), S(0), "v", T(Some), NULL, S(0), NULL, S(0), "syntax", T(Boolean), "b:0;", S(4), "false", S(0), "name", T(Variant), "N;", S(2), "null", S(1), NULL, S(75513856), "/**\n * ( excerpt from http://php.net/manual/en/function.is-callable.php )\n *\n * Verify that the contents of a variable can be called as a function.\n * This can check that a simple variable contains the name of a valid\n * function, or that an array contains a properly encoded object and\n * function name.\n *\n * @v          mixed   Can be either the name of a function stored in a\n *                     string variable, or an object and the name of a\n *                     method within the object, like this:\n *                     array($SomeObject, 'MethodName')\n * @syntax     bool    If set to TRUE the function only verifies that name\n *                     might be a function or method. It will only reject\n *                     simple variables that are not strings, or an array\n *                     that does not have a valid structure to be used as a\n *                     callback. The valid ones are supposed to have only 2\n *                     entries, the first of which is an object or a\n *                     string, and the second a string.\n * @name       mixed   Receives the \"callable name\". In the example below\n *                     it is \"someClass::someMethod\". Note, however, that\n *                     despite the implication that someClass::SomeMethod()\n *                     is a callable static method, this is not the case.\n *\n * @return     bool    Returns TRUE if name is callable, FALSE otherwise.\n */", S(hphp_opt_is_callable), 
"call_user_func_array", T(Variant), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), "params", T(Array), NULL, S(0), NULL, S(0), NULL, S(109068288), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.call-user-func-array.php )\n *\n * Call a user defined function with the parameters in params.\n *\n * @function   mixed   The function to be called.\n * @params     vector  The parameters to be passed to the function, as an\n *                     indexed array.\n *\n * @return     mixed   Returns the function result, or FALSE on error.\n */", S(hphp_opt_call_user_func), 
"call_user_func", T(Variant), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), NULL, S(109199360), "/**\n * ( excerpt from http://php.net/manual/en/function.call-user-func.php )\n *\n * Call a user defined function given by the function parameter.\n *\n * @function   mixed   The function to be called. Class methods may also be\n *                     invoked statically using this function by passing\n *                     array($classname, $methodname) to this parameter.\n *                     Additionally class methods of an object instance may\n *                     be called by passing array($objectinstance,\n *                     $methodname) to this parameter.\n *\n * @return     mixed   Returns the function result, or FALSE on error.\n */", S(hphp_opt_call_user_func), 
"call_user_func_array_async", T(Object), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), "params", T(Array), NULL, S(0), NULL, S(0), NULL, S(67190784), "/**\n * ( HipHop specific )\n *\n * Same as call_user_func_array(), but returns an object immediately\n * without waiting for the function to finish. The object can be used with\n * end_user_func_async() to eventually retrieve function's return, if\n * needed.\n *\n * @function   mixed   The function to be called, same as in\n *                     call_user_func_array().\n * @params     vector  Parameters, same as in call_user_func_array().\n *\n * @return     object  An object end_user_func_async() uses for final\n *                     waiting of function's return.\n */", 
"call_user_func_async", T(Object), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), NULL, S(67715072), "/**\n * ( HipHop specific )\n *\n * Same as call_user_func(), but returns an object immediately without\n * waiting for the function to finish. The object can be used with\n * end_user_func_async() to eventually retrieve function's return, if\n * needed.\n *\n * @function   mixed   The function to be called, same as in\n *                     call_user_func_array().\n *\n * @return     object  An object end_user_func_async() uses for final\n *                     waiting of function's return.\n */", 
"check_user_func_async", T(Variant), S(0), "handles", T(Variant), NULL, S(0), NULL, S(0), "timeout", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Check to see if any specified jobs are done or not.\n *\n * @handles    mixed   An array of objects returned from\n *                     call_user_func_async() or\n *                     call_user_func_array_async(), or a single object for\n *                     a simple TRUE/FALSE return.\n * @timeout    int     In milli-seconds. -1 to return job status\n *                     immediately without blocking; positive numbers for\n *                     blocking until some of the specified jobs are done;\n *                     0 for infinite waiting until some of the specified\n *                     jobs are done.\n *\n * @return     mixed   An array of finished jobs if an array of jobs was\n *                     specified, otherwise TRUE for finished and FALSE for\n *                     not finished.\n */", 
"end_user_func_async", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "default_strategy", T(Int32), "i:0;", S(4), "GLOBAL_STATE_IGNORE", S(0), "additional_strategies", T(Variant), "N;", S(2), "null", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Block until function returns. Used with call_user_func_async() or\n * call_user_func_array_async().\n *\n * @handle     object  The object returned from call_user_func_async() or\n *                     call_user_func_array_async().\n * @default_strategy\n *             int     GLOBAL_STATE_ constants to specify how to treat\n *                     global states. Please read documentation for more\n *                     details.\n * @additional_strategies\n *             mixed   Extra strategy for individual variables. Please read\n *                     documentation for more details.\n *\n * @return     mixed   Function's return value.\n */", 
"call_user_func_serialized", T(String), S(0), "input", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Invoke a function with serialized function and parameters by calling\n * serialize(array(\"func\" => $func, \"params\" => $params)), and returns\n * function return in serialized format of array(\"ret\" => $ret, \"exception\"\n * => $exception). Useful for over-network invocation.\n *\n * @input      string  Serialized callback and parameters.\n *\n * @return     string  Serialized return.\n */", 
"call_user_func_array_rpc", T(Variant), S(0), "host", T(String), NULL, S(0), NULL, S(0), "port", T(Int32), NULL, S(0), NULL, S(0), "auth", T(String), NULL, S(0), NULL, S(0), "timeout", T(Int32), NULL, S(0), NULL, S(0), "function", T(Variant), NULL, S(0), NULL, S(0), "params", T(Array), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Same as call_user_func_array(), but executes on a remote HipHop RPC\n * server\n *\n * @host       string  Remote RPC server's address.\n * @port       int     Remote RPC server's port.\n * @auth       string  Remote RPC server's authentication password.\n * @timeout    int     How many seconds to wait for response.\n * @function   mixed   The function to be called, same as in\n *                     call_user_func_array().\n * @params     vector  Parameters, same as in call_user_func_array().\n *\n * @return     mixed   Returns the function result, or FALSE on error.\n */", 
"call_user_func_rpc", T(Variant), S(0), "host", T(String), NULL, S(0), NULL, S(0), "port", T(Int32), NULL, S(0), NULL, S(0), "auth", T(String), NULL, S(0), NULL, S(0), "timeout", T(Int32), NULL, S(0), NULL, S(0), "function", T(Variant), NULL, S(0), NULL, S(0), NULL, S(606208), "/**\n * ( HipHop specific )\n *\n * Same as call_user_func(), but executes on a remote HipHop RPC server\n *\n * @host       string  Remote RPC server's address.\n * @port       int     Remote RPC server's port.\n * @auth       string  Remote RPC server's authentication password.\n * @timeout    int     How many seconds to wait for response.\n * @function   mixed   The function to be called, same as in\n *                     call_user_func_array().\n *\n * @return     mixed   Returns the function result, or FALSE on error.\n */", 
"forward_static_call_array", T(Variant), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), "params", T(Array), NULL, S(0), NULL, S(0), NULL, S(67125248), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.forward-static-call-array.php )\n *\n * Calls a user defined function or method given by the function\n * parameter. This function must be called within a method context, it\n * can't be used outside a class. All arguments of the forwarded method are\n * passed as values, and as an array, similarly to call_user_func_array().\n *\n * @function   mixed   The function or method to be called. This parameter\n *                     may be an array, with the name of the class, and the\n *                     method, or a string, with a function name.\n * @params     vector  One parameter, gathering all the method parameter in\n *                     one array.\n *\n *                     Note that the parameters for\n *                     forward_static_call_array() are not passed by\n *                     reference.\n *\n * @return     mixed   Returns the function result, or FALSE on error.\n */", 
"forward_static_call", T(Variant), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), NULL, S(67256320), "/**\n * ( excerpt from http://php.net/manual/en/function.forward-static-call.php\n * )\n *\n * Calls a user defined function or method given by the function\n * parameter, with the following arguments. This function must be called\n * within a method context, it can't be used outside a class.\n *\n * @function   mixed   The function or method to be called. This parameter\n *                     may be an array, with the name of the class, and the\n *                     method, or a string, with a function name.\n *\n * @return     mixed   Returns the function result, or FALSE on error.\n */", 
"get_called_class", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-called-class.php )\n *\n * Gets the name of the class the static method is called in.\n *\n * @return     mixed   Returns the class name. Returns FALSE if called from\n *                     outside a class.\n */", 
"create_function", T(String), S(0), "args", T(String), NULL, S(0), NULL, S(0), "code", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.create-function.php )\n *\n * Creates an anonymous function from the parameters passed, and returns a\n * unique name for it.\n * Usually these parameters will be passed as single quote delimited\n * strings. The reason for using single quoted strings, is to protect the\n * variable names from parsing, otherwise, if you use double quotes there\n * will be a need to escape the variable names, e.g. \\$avar.\n *\n * @args       string  The function arguments.\n * @code       string  The function code.\n *\n * @return     string  Returns a unique function name as a string, or FALSE\n *                     on error.\n */", 
"func_get_arg", T(Variant), S(0), "arg_num", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.func-get-arg.php )\n *\n * Gets the specified argument from a user-defined function's argument\n * list.\n *\n * This function may be used in conjunction with func_get_args() and\n * func_num_args() to allow user-defined functions to accept\n * variable-length argument lists.\n *\n * @arg_num    int     The argument offset. Function arguments are counted\n *                     starting from zero.\n *\n * @return     mixed   Returns the specified argument, or FALSE on error.\n */", 
"func_get_args", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.func-get-args.php )\n *\n * Gets an array of the function's argument list.\n *\n * This function may be used in conjunction with func_get_arg() and\n * func_num_args() to allow user-defined functions to accept\n * variable-length argument lists.\n *\n * @return     vector  Returns an array in which each element is a copy of\n *                     the corresponding member of the current user-defined\n *                     function's argument list.\n */", 
"func_num_args", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.func-num-args.php )\n *\n * Gets the number of arguments passed to the function.\n *\n * This function may be used in conjunction with func_get_arg() and\n * func_get_args() to allow user-defined functions to accept\n * variable-length argument lists.\n *\n * @return     int     Returns the number of arguments passed into the\n *                     current user-defined function.\n */", 
"register_postsend_function", T(Void), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), NULL, S(212992), "/**\n * ( HipHop specific )\n *\n * Registers functions to call after HTTP response is completely sent to\n * browser.\n *\n * @function   mixed   The callback to register.\n */", 
"register_shutdown_function", T(Void), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.register-shutdown-function.php )\n *\n * Registers the function named by function to be executed when script\n * processing is complete or when exit() is called.\n *\n * Multiple calls to register_shutdown_function() can be made, and each\n * will be called in the same order as they were registered. If you call\n * exit() within one registered shutdown function, processing will stop\n * completely and no other registered shutdown functions will be called.\n *\n * @function   mixed   The shutdown function to register.\n *\n *                     The shutdown functions are called as the part of\n *                     the request so that it's possible to send the output\n *                     from them. There is currently no way to process the\n *                     data with output buffering functions in the shutdown\n *                     function.\n *\n *                     Shutdown functions are called after closing all\n *                     opened output buffers thus, for example, its output\n *                     will not be compressed if zlib.output_compression is\n *                     enabled.\n *\n * @return     mixed   No value is returned.\n */", 
"register_cleanup_function", T(Void), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), NULL, S(212992), "/**\n * ( HipHop specific )\n *\n * Registers functions to call at very end of a web page to clean up and\n * free system resources.\n *\n * @function   mixed   The callback to register.\n */", 
"register_tick_function", T(Boolean), S(0), "function", T(Variant), NULL, S(0), NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.register-tick-function.php )\n *\n *\n * @function   mixed   The function name as a string, or an array\n *                     consisting of an object and a method.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"unregister_tick_function", T(Void), S(0), "function_name", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.unregister-tick-function.php )\n *\n *\n * @function_name\n *             mixed   The function name, as a string.\n *\n * @return     mixed   No value is returned.\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#elif EXT_TYPE == 4
extern ExpressionPtr hphp_opt_is_callable(CodeGenerator *cg, AnalysisResultConstPtr ar, SimpleFunctionCallPtr call, int mode);
extern ExpressionPtr hphp_opt_call_user_func(CodeGenerator *cg, AnalysisResultConstPtr ar, SimpleFunctionCallPtr call, int mode);

#endif
