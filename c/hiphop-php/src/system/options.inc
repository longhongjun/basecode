// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"assert_options", T(Variant), S(0), "what", T(Int32), NULL, S(0), NULL, S(0), "value", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.assert-options.php )\n *\n * Set the various assert() control options or just query their current\n * settings.\n *\n * @what       int     Assert Options Option INI Setting Default value\n *                     Description ASSERT_ACTIVE assert.active 1 enable\n *                     assert() evaluation ASSERT_WARNING assert.warning 1\n *                     issue a PHP warning for each failed assertion\n *                     ASSERT_BAIL assert.bail 0 terminate execution on\n *                     failed assertions ASSERT_QUIET_EVAL\n *                     assert.quiet_eval 0 disable error_reporting during\n *                     assertion expression evaluation ASSERT_CALLBACK\n *                     assert.callback (NULL) Callback to call on failed\n *                     assertions\n * @value      mixed   An optional new value for the option.\n *\n * @return     mixed   Returns the original setting of any option or FALSE\n *                     on errors.\n */",
"assert", T(Variant), S(0), "assertion", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.assert.php )\n *\n * assert() will check the given assertion and take appropriate action if\n * its result is FALSE.\n *\n * If the assertion is given as a string it will be evaluated as PHP code\n * by assert(). The advantages of a string assertion are less overhead when\n * assertion checking is off and messages containing the assertion\n * expression when an assertion fails. This means that if you pass a\n * boolean condition as assertion this condition will not show up as\n * parameter to the assertion function which you may have defined with the\n * assert_options() function, the condition is converted to a string before\n * calling that handler function, and the boolean FALSE is converted as the\n * empty string.\n *\n * Assertions should be used as a debugging feature only. You may use them\n * for sanity-checks that test for conditions that should always be TRUE\n * and that indicate some programming errors if not or to check for the\n * presence of certain features like extension functions or certain system\n * limits and features.\n *\n * Assertions should not be used for normal runtime operations like input\n * parameter checks. As a rule of thumb your code should always be able to\n * work correctly if assertion checking is not activated.\n *\n * The behavior of assert() may be configured by assert_options() or by\n * .ini-settings described in that functions manual page.\n *\n * The assert_options() function and/or ASSERT_CALLBACK configuration\n * directive allow a callback function to be set to handle failed\n * assertions.\n *\n * assert() callbacks are particularly useful for building automated test\n * suites because they allow you to easily capture the code passed to the\n * assertion, along with information on where the assertion was made. While\n * this information can be captured via other methods, using assertions\n * makes it much faster and easier!\n *\n * The callback function should accept three arguments. The first argument\n * will contain the file the assertion failed in. The second argument will\n * contain the line the assertion failed on and the third argument will\n * contain the expression that failed (if any - literal values such as 1 or\n * \"two\" will not be passed via this argument)\n *\n * @assertion  mixed   The assertion.\n *\n * @return     mixed   FALSE if the assertion is false, TRUE otherwise.\n */",
"dl", T(Int64), S(0), "library", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dl.php )\n *\n * Loads the PHP extension given by the parameter library.\n *\n * Use extension_loaded() to test whether a given extension is already\n * available or not. This works on both built-in extensions and dynamically\n * loaded ones (either through php.ini or dl()). Warning This function has\n * been removed from some SAPI's in PHP 5.3.\n *\n * @library    string  This parameter is only the filename of the extension\n *                     to load which also depends on your platform. For\n *                     example, the sockets extension (if compiled as a\n *                     shared module, not the default!) would be called\n *                     sockets.so on Unix platforms whereas it is called\n *                     php_sockets.dll on the Windows platform.\n *\n *                     The directory where the extension is loaded from\n *                     depends on your platform:\n *\n *                     Windows - If not explicitly set in the php.ini, the\n *                     extension is loaded from C:\\php4\\extensions\\ (PHP4)\n *                     or C:\\php5\\ (PHP5) by default.\n *\n *                     Unix - If not explicitly set in the php.ini, the\n *                     default extension directory depends on whether PHP\n *                     has been built with --enable-debug or not whether\n *                     PHP has been built with (experimental) ZTS (Zend\n *                     Thread Safety) support or not the current internal\n *                     ZEND_MODULE_API_NO (Zend internal module API number,\n *                     which is basically the date on which a major module\n *                     API change happened, e.g. 20010901) Taking into\n *                     account the above, the directory then defaults to\n *                     <install-dir>/lib/php/extensions/\n *                     <debug-or-not>-<zts-or-not>-ZEND_MODULE_API_NO, e.g.\n *                     /usr/local/php/lib/php/extensions/debug-non-zts-20010901\n *                     or\n *                     /usr/local/php/lib/php/extensions/no-debug-zts-20010901.\n *\n * @return     int     Returns TRUE on success or FALSE on failure. If the\n *                     functionality of loading modules is not available or\n *                     has been disabled (either by setting enable_dl off\n *                     or by enabling safe mode in php.ini) an E_ERROR is\n *                     emitted and execution is stopped. If dl() fails\n *                     because the specified library couldn't be loaded, in\n *                     addition to FALSE an E_WARNING message is emitted.\n */",
"extension_loaded", T(Boolean), S(0), "name", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.extension-loaded.php )\n *\n * Finds out whether the extension is loaded.\n *\n * @name       string  The extension name.\n *\n *                     You can see the names of various extensions by\n *                     using phpinfo() or if you're using the CGI or CLI\n *                     version of PHP you can use the -m switch to list all\n *                     available extensions: $ php -m [PHP Modules] xml\n *                     tokenizer standard sockets session posix pcre\n *                     overload mysql mbstring ctype [Zend Modules]\n *\n * @return     bool    Returns TRUE if the extension identified by name is\n *                     loaded, FALSE otherwise.\n */",
"get_loaded_extensions", T(Array), S(0), "zend_extensions", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-loaded-extensions.php )\n *\n * This function returns the names of all the modules compiled and loaded\n * in the PHP interpreter.\n *\n * @zend_extensions\n *             bool    Only return Zend extensions, if not then regular\n *                     extensions, like mysqli are listed. Defaults to\n *                     FALSE (return regular extensions).\n *\n * @return     vector  Returns an indexed array of all the modules names.\n */",
"get_extension_funcs", T(Array), S(0), "module_name", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-extension-funcs.php\n * )\n *\n * This function returns the names of all the functions defined in the\n * module indicated by module_name.\n *\n * @module_name\n *             string  The module name.\n *\n *                     This parameter must be in lowercase.\n *\n * @return     map     Returns an array with all the functions, or FALSE if\n *                     module_name is not a valid extension.\n */",
"get_cfg_var", T(String), S(0), "option", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-cfg-var.php )\n *\n * Gets the value of a PHP configuration option.\n *\n * This function will not return configuration information set when the\n * PHP was compiled, or read from an Apache configuration file.\n *\n * To check whether the system is using a configuration file, try\n * retrieving the value of the cfg_file_path configuration setting. If this\n * is available, a configuration file is being used.\n *\n * @option     string  The configuration option name.\n *\n * @return     string  Returns the current value of the PHP configuration\n *                     variable specified by option, or FALSE if an error\n *                     occurs.\n */",
"get_current_user", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-current-user.php )\n *\n *\n * @return     string  Returns the username as a string.\n */", 
"get_defined_constants", T(Array), S(0), "categorize", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-defined-constants.php )\n *\n * Returns the names and values of all the constants currently defined.\n * This includes those created by extensions as well as those created with\n * the define() function.\n *\n * @categorize mixed   Causing this function to return a multi-dimensional\n *                     array with categories in the keys of the first\n *                     dimension and constants and their values in the\n *                     second dimension.\n *\n *\n *\n *                     The above example will output something similar to:\n *                     Array ( [Core] => Array ( [E_ERROR] => 1 [E_WARNING]\n *                     => 2 [E_PARSE] => 4 [E_NOTICE] => 8 [E_CORE_ERROR]\n *                     => 16 [E_CORE_WARNING] => 32 [E_COMPILE_ERROR] => 64\n *                     [E_COMPILE_WARNING] => 128 [E_USER_ERROR] => 256\n *                     [E_USER_WARNING] => 512 [E_USER_NOTICE] => 1024\n *                     [E_ALL] => 2047 [TRUE] => 1 ) [pcre] => Array (\n *                     [PREG_PATTERN_ORDER] => 1 [PREG_SET_ORDER] => 2\n *                     [PREG_OFFSET_CAPTURE] => 256 [PREG_SPLIT_NO_EMPTY]\n *                     => 1 [PREG_SPLIT_DELIM_CAPTURE] => 2\n *                     [PREG_SPLIT_OFFSET_CAPTURE] => 4 [PREG_GREP_INVERT]\n *                     => 1 ) [user] => Array ( [MY_CONSTANT] => 1 ) )\n *\n * @return     map\n */",
"get_include_path", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-include-path.php )\n *\n *\n * @return     string  Returns the path, as a string.\n */", 
"restore_include_path", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.restore-include-path.php )\n *\n *\n * @return     mixed   No value is returned.\n */", 
"set_include_path", T(String), S(0), "new_include_path", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.set-include-path.php )\n *\n * Sets the include_path configuration option for the duration of the\n * script.\n *\n * @new_include_path\n *             string  The new value for the include_path\n *\n * @return     string  Returns the old include_path on success or FALSE on\n *                     failure.\n */",
"get_included_files", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-included-files.php\n * )\n *\n * Gets the names of all files that have been included using include(),\n * include_once(), require() or require_once().\n *\n * @return     vector  Returns an array of the names of all files.\n *\n *                     The script originally called is considered an\n *                     \"included file,\" so it will be listed together with\n *                     the files referenced by include() and family.\n *\n *                     Files that are included or required multiple times\n *                     only show up once in the returned array.\n */", 
"inclued_get_data", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.inclued-get-data.php )\n *\n * Get the inclued data.\n *\n * @return     vector  The inclued data.\n */", 
"get_magic_quotes_gpc", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-magic-quotes-gpc.php )\n *\n * Returns the current configuration setting of magic_quotes_gpc\n *\n * Keep in mind that attempting to set magic_quotes_gpc at runtime will\n * not work.\n *\n * For more information about magic_quotes, see this security section.\n *\n * @return     int     Returns 0 if magic_quotes_gpc is off, 1 otherwise.\n */", 
"get_magic_quotes_runtime", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-magic-quotes-runtime.php )\n *\n *\n * @return     int     Returns 0 if magic_quotes_runtime is off, 1\n *                     otherwise.\n */", 
"get_required_files", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-required-files.php\n * )\n *\n *\n * @return     vector\n */", 
"getenv", T(Variant), S(0), "varname", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getenv.php )\n *\n * Gets the value of an environment variable.\n *\n * You can see a list of all the environmental variables by using\n * phpinfo(). Many of these variables are listed within \273 RFC 3875,\n * specifically section 4.1, \"Request Meta-Variables\".\n *\n * @varname    string  The variable name.\n *\n * @return     mixed   Returns the value of the environment variable\n *                     varname, or FALSE on an error.\n */",
"getlastmod", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getlastmod.php )\n *\n * Gets the time of the last modification of the current page.\n *\n * If you're interested in getting the last modification time of a\n * different file, consider using filemtime().\n *\n * @return     int     Returns the time of the last modification of the\n *                     current page. The value returned is a Unix\n *                     timestamp, suitable for feeding to date(). Returns\n *                     FALSE on error.\n */", 
"getmygid", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getmygid.php )\n *\n *\n * @return     int     Returns the group ID of the current script, or FALSE\n *                     on error.\n */", 
"getmyinode", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getmyinode.php )\n *\n * Gets the inode of the current script.\n *\n * @return     int     Returns the current script's inode as an integer, or\n *                     FALSE on error.\n */", 
"getmypid", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getmypid.php )\n *\n * Gets the current PHP process ID.\n *\n * @return     int     Returns the current PHP process ID, or FALSE on\n *                     error.\n */", 
"getmyuid", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getmyuid.php )\n *\n *\n * @return     int     Returns the user ID of the current script, or FALSE\n *                     on error.\n */", 
"getopt", T(Array), S(0), "options", T(String), NULL, S(0), NULL, S(0), "longopts", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getopt.php )\n *\n * Parses options passed to the script.\n * The options parameter may contain the following elements: Individual\n * characters (do not accept values) Characters followed by a colon\n * (parameter requires value) Characters followed by two colons (optional\n * value) Option values are the first argument after the string. It does\n * not matter if a value has leading white space or not. Optional values do\n * not accept \" \" (space) as a separator.\n *\n * The format for the options and longopts is almost the same, the only\n * difference is that longopts takes an array of options (where each\n * element is the option) where as options takes a string (where each\n * character is the option).\n *\n * @options    string  Each character in this string will be used as option\n *                     characters and matched against options passed to the\n *                     script starting with a single hyphen (-). For\n *                     example, an option string \"x\" recognizes an option\n *                     -x. Only a-z, A-Z and 0-9 are allowed.\n * @longopts   mixed   An array of options. Each element in this array will\n *                     be used as option strings and matched against\n *                     options passed to the script starting with two\n *                     hyphens (--). For example, an longopts element \"opt\"\n *                     recognizes an option --opt. Prior to PHP5.3.0 this\n *                     parameter was only available on few systems\n *\n * @return     map     This function will return an array of option /\n *                     argument pairs or FALSE on failure.\n *\n *                     The parsing of options will end at the first\n *                     non-option found, anything that follows is\n *                     discarded.\n */",
"getrusage", T(Array), S(0), "who", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getrusage.php )\n *\n * This is an interface to getrusage(2). It gets data returned from the\n * system call.\n *\n * @who        int     If who is 1, getrusage will be called with\n *                     RUSAGE_CHILDREN.\n *\n * @return     map     Returns an associative array containing the data\n *                     returned from the system call. All entries are\n *                     accessible by using their documented field names.\n */",
"clock_getres", T(Boolean), S(0), "clk_id", T(Int32), NULL, S(0), NULL, S(0), "sec", T(Variant), NULL, S(0), NULL, S(1), "nsec", T(Variant), NULL, S(0), NULL, S(1), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Gets resolution of system clock. \"man 3 clock_getres\" for more details.\n *\n * @clk_id     int     Which clock to check.\n * @sec        mixed   Return value in seconds.\n * @nsec       mixed   Return value in nano-seconds.\n *\n * @return     bool    TRUE if successful, FALSE otherwise\n */",
"clock_gettime", T(Boolean), S(0), "clk_id", T(Int32), NULL, S(0), NULL, S(0), "sec", T(Variant), NULL, S(0), NULL, S(1), "nsec", T(Variant), NULL, S(0), NULL, S(1), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Gets time of a system clock. \"man 3 clock_gettime\" for more details.\n *\n * @clk_id     int     Which clock.\n * @sec        mixed   Return value in seconds.\n * @nsec       mixed   Return value in nano-seconds.\n *\n * @return     bool    TRUE if successful, FALSE otherwise\n */",
"clock_settime", T(Boolean), S(0), "clk_id", T(Int32), NULL, S(0), NULL, S(0), "sec", T(Int64), NULL, S(0), NULL, S(0), "nsec", T(Int64), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Sets time of a system clock. \"man 3 clock_settime\" for more details.\n *\n * @clk_id     int     Which clock.\n * @sec        int     Value to set in seconds.\n * @nsec       int     Value to set in nano-seconds.\n *\n * @return     bool    TRUE if successful, FALSE otherwise\n */",
"cpu_get_count", T(Int64), S(0), NULL, S(4276224), "/**\n * ( HipHop specific )\n *\n * Gets number of processors.\n *\n * @return     int     Number of CPUs.\n */", 
"cpu_get_model", T(String), S(0), NULL, S(4276224), "/**\n * ( HipHop specific )\n *\n * Gets processor model.\n *\n * @return     string  Model name of CPU.\n */", 
"ini_alter", T(String), S(0), "varname", T(String), NULL, S(0), NULL, S(0), "newvalue", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ini-alter.php )\n *\n *\n * @varname    string\n * @newvalue   string\n *\n * @return     string\n */",
"ini_get_all", T(Array), S(0), "extension", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ini-get-all.php )\n *\n * Returns all the registered configuration options.\n *\n * @extension  string  An optional extension name. If set, the function\n *                     return only options specific for that extension.\n *\n * @return     map     Returns an associative array with directive name as\n *                     the array key.\n *\n *                     When details is TRUE (default) the array will\n *                     contain global_value (set in php.ini), local_value\n *                     (perhaps set with ini_set() or .htaccess), and\n *                     access (the access level).\n *\n *                     When details is FALSE the value will be the current\n *                     value of the option.\n *\n *                     See the manual section for information on what\n *                     access levels mean.\n *\n *                     It's possible for a directive to have multiple\n *                     access levels, which is why access shows the\n *                     appropriate bitmask values.\n */",
"ini_get", T(String), S(0), "varname", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ini-get.php )\n *\n * Returns the value of the configuration option on success.\n *\n * @varname    string  The configuration option name.\n *\n * @return     string  Returns the value of the configuration option as a\n *                     string on success, or an empty string on failure or\n *                     for null values.\n */",
"ini_restore", T(Void), S(0), "varname", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ini-restore.php )\n *\n * Restores a given configuration option to its original value.\n *\n * @varname    string  The configuration option name.\n *\n * @return     mixed   No value is returned.\n */",
"ini_set", T(String), S(0), "varname", T(String), NULL, S(0), NULL, S(0), "newvalue", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ini-set.php )\n *\n * Sets the value of the given configuration option. The configuration\n * option will keep this new value during the script's execution, and will\n * be restored at the script's ending.\n *\n * @varname    string  Not all the available options can be changed using\n *                     ini_set(). There is a list of all available options\n *                     in the appendix.\n * @newvalue   string  The new value for the option.\n *\n * @return     string  Returns the old value on success, FALSE on failure.\n */",
"memory_get_allocation", T(Int64), S(0), NULL, S(33570816), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.memory-get-allocation.php )\n *\n * Returns the total memory, in bytes, that your PHP script has allocated.\n *\n * @return     int     Returns the total memory allocated in bytes.\n */", 
"memory_get_peak_usage", T(Int64), S(0), "real_usage", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.memory-get-peak-usage.php )\n *\n * Returns the peak of memory, in bytes, that's been allocated to your PHP\n * script.\n *\n * @real_usage bool    Set this to TRUE to get the real size of memory\n *                     allocated from system. If not set or FALSE only the\n *                     memory used by emalloc() is reported.\n *\n * @return     int     Returns the memory peak in bytes.\n */",
"memory_get_usage", T(Int64), S(0), "real_usage", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.memory-get-usage.php )\n *\n * Returns the amount of memory, in bytes, that's currently being\n * allocated to your PHP script.\n *\n * @real_usage bool    Set this to TRUE to get the real size of memory\n *                     allocated from system. If not set or FALSE only the\n *                     memory used by emalloc() is reported.\n *\n * @return     int     Returns the memory amount in bytes.\n */",
"php_ini_scanned_files", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.php-ini-scanned-files.php )\n *\n * php_ini_scanned_files() returns a comma-separated list of configuration\n * files parsed after php.ini. These files are found in a directory defined\n * by the --with-config-file-scan-dir option which is set during\n * compilation.\n *\n * The returned configuration files also include the path as declared in\n * the --with-config-file-scan-dir option.\n *\n * @return     string  Returns a comma-separated string of .ini files on\n *                     success. Each comma is followed by a newline. If the\n *                     directive --with-config-file-scan-dir wasn't set,\n *                     FALSE is returned. If it was set and the directory\n *                     was empty, an empty string is returned. If a file is\n *                     unrecognizable, the file will still make it into the\n *                     returned string but a PHP error will also result.\n *                     This PHP error will be seen both at compile time and\n *                     while using php_ini_scanned_files().\n */", 
"php_logo_guid", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.php-logo-guid.php )\n *\n * This function returns the ID which can be used to display the PHP logo\n * using the built-in image. Logo is displayed only if expose_php is On.\n *\n * @return     string  Returns PHPE9568F34-D428-11d2-A769-00AA001ACF42.\n */", 
"php_sapi_name", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.php-sapi-name.php )\n *\n *\n * @return     string  Returns the interface type, as a lowercase string.\n *\n *                     Although not exhaustive, the possible return values\n *                     include aolserver, apache, apache2filter,\n *                     apache2handler, caudium, cgi (until PHP 5.3),\n *                     cgi-fcgi, cli, continuity, embed, isapi, litespeed,\n *                     milter, nsapi, phttpd, pi3web, roxen, thttpd, tux,\n *                     and webjames.\n */", 
"php_uname", T(String), S(0), "mode", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.php-uname.php )\n *\n * php_uname() returns a description of the operating system PHP is\n * running on. This is the same string you see at the very top of the\n * phpinfo() output. For the name of just the operating system, consider\n * using the PHP_OS constant, but keep in mind this constant will contain\n * the operating system PHP was built on.\n *\n * On some older UNIX platforms, it may not be able to determine the\n * current OS information in which case it will revert to displaying the OS\n * PHP was built on. This will only happen if your uname() library call\n * either doesn't exist or doesn't work.\n *\n * @mode       string  mode is a single character that defines what\n *                     information is returned: 'a': This is the default.\n *                     Contains all modes in the sequence \"s n r v m\". 's':\n *                     Operating system name. eg. FreeBSD. 'n': Host name.\n *                     eg. localhost.example.com. 'r': Release name. eg.\n *                     5.1.2-RELEASE. 'v': Version information. Varies a\n *                     lot between operating systems. 'm': Machine type.\n *                     eg. i386.\n *\n * @return     string  Returns the description, as a string.\n */",
"phpcredits", T(Boolean), S(0), "flag", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.phpcredits.php )\n *\n * This function prints out the credits listing the PHP developers,\n * modules, etc. It generates the appropriate HTML codes to insert the\n * information in a page.\n *\n * @flag       int     To generate a custom credits page, you may want to\n *                     use the flag parameter.\n *\n *                     Pre-defined phpcredits() flags name description\n *                     CREDITS_ALL All the credits, equivalent to using:\n *                     CREDITS_DOCS + CREDITS_GENERAL + CREDITS_GROUP +\n *                     CREDITS_MODULES + CREDITS_FULLPAGE. It generates a\n *                     complete stand-alone HTML page with the appropriate\n *                     tags. CREDITS_DOCS The credits for the documentation\n *                     team CREDITS_FULLPAGE Usually used in combination\n *                     with the other flags. Indicates that a complete\n *                     stand-alone HTML page needs to be printed including\n *                     the information indicated by the other flags.\n *                     CREDITS_GENERAL General credits: Language design and\n *                     concept, PHP authors and SAPI module. CREDITS_GROUP\n *                     A list of the core developers CREDITS_MODULES A list\n *                     of the extension modules for PHP, and their authors\n *                     CREDITS_SAPI A list of the server API modules for\n *                     PHP, and their authors\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"phpinfo", T(Boolean), S(0), "what", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.phpinfo.php )\n *\n * Outputs a large amount of information about the current state of PHP.\n * This includes information about PHP compilation options and extensions,\n * the PHP version, server information and environment (if compiled as a\n * module), the PHP environment, OS version information, paths, master and\n * local values of configuration options, HTTP headers, and the PHP\n * License.\n *\n * Because every system is setup differently, phpinfo() is commonly used\n * to check configuration settings and for available predefined variables\n * on a given system.\n *\n * phpinfo() is also a valuable debugging tool as it contains all EGPCS\n * (Environment, GET, POST, Cookie, Server) data.\n *\n * @what       int     The output may be customized by passing one or more\n *                     of the following constants bitwise values summed\n *                     together in the optional what parameter. One can\n *                     also combine the respective constants or bitwise\n *                     values together with the or operator.\n *\n *                     phpinfo() options Name (constant) Value Description\n *                     INFO_GENERAL 1 The configuration line, php.ini\n *                     location, build date, Web Server, System and more.\n *                     INFO_CREDITS 2 PHP Credits. See also phpcredits().\n *                     INFO_CONFIGURATION 4 Current Local and Master values\n *                     for PHP directives. See also ini_get(). INFO_MODULES\n *                     8 Loaded modules and their respective settings. See\n *                     also get_loaded_extensions(). INFO_ENVIRONMENT 16\n *                     Environment Variable information that's also\n *                     available in $_ENV. INFO_VARIABLES 32 Shows all\n *                     predefined variables from EGPCS (Environment, GET,\n *                     POST, Cookie, Server). INFO_LICENSE 64 PHP License\n *                     information. See also the \273 license FAQ. INFO_ALL -1\n *                     Shows all of the above.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"phpversion", T(String), S(0), "extension", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.phpversion.php )\n *\n * Returns a string containing the version of the currently running PHP\n * parser or extension.\n *\n * @extension  string  An optional extension name.\n *\n * @return     string  If the optional extension parameter is specified,\n *                     phpversion() returns the version of that extension,\n *                     or FALSE if there is no version information\n *                     associated or the extension isn't enabled.\n */",
"putenv", T(Boolean), S(0), "setting", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.putenv.php )\n *\n * Adds setting to the server environment. The environment variable will\n * only exist for the duration of the current request. At the end of the\n * request the environment is restored to its original state.\n *\n * Setting certain environment variables may be a potential security\n * breach. The safe_mode_allowed_env_vars directive contains a\n * comma-delimited list of prefixes. In Safe Mode, the user may only alter\n * environment variables whose names begin with the prefixes supplied by\n * this directive. By default, users will only be able to set environment\n * variables that begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this\n * directive is empty, PHP will let the user modify ANY environment\n * variable!\n *\n * The safe_mode_protected_env_vars directive contains a comma-delimited\n * list of environment variables, that the end user won't be able to change\n * using putenv(). These variables will be protected even if\n * safe_mode_allowed_env_vars is set to allow to change them.\n *\n * @setting    string  The setting, like \"FOO=BAR\"\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"set_magic_quotes_runtime", T(Boolean), S(0), "new_setting", T(Boolean), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.set-magic-quotes-runtime.php )\n *\n * Set the current active configuration setting of magic_quotes_runtime.\n * WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on\n * this feature is highly discouraged.\n *\n * @new_setting\n *             bool    FALSE for off, TRUE for on.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"set_time_limit", T(Void), S(0), "seconds", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.set-time-limit.php )\n *\n * Set the number of seconds a script is allowed to run. If this is\n * reached, the script returns a fatal error. The default limit is 30\n * seconds or, if it exists, the max_execution_time value defined in the\n * php.ini.\n *\n * When called, set_time_limit() restarts the timeout counter from zero.\n * In other words, if the timeout is the default 30 seconds, and 25 seconds\n * into script execution a call such as set_time_limit(20) is made, the\n * script will run for a total of 45 seconds before timing out.\n *\n * @seconds    int     The maximum execution time, in seconds. If set to\n *                     zero, no time limit is imposed.\n *\n * @return     mixed   No value is returned.\n */",
"sys_get_temp_dir", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.sys-get-temp-dir.php )\n *\n * Returns the path of the directory PHP stores temporary files in by\n * default.\n *\n * @return     string  Returns the path of the temporary directory.\n */", 
"version_compare", T(Variant), S(0), "version1", T(String), NULL, S(0), NULL, S(0), "version2", T(String), NULL, S(0), NULL, S(0), "sop", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.version-compare.php )\n *\n * version_compare() compares two \"PHP-standardized\" version number\n * strings. This is useful if you would like to write programs working only\n * on some versions of PHP.\n *\n * The function first replaces _, - and + with a dot . in the version\n * strings and also inserts dots . before and after any non number so that\n * for example '4.3.2RC1' becomes '4.3.2.RC.1'. Then it splits the results\n * like if you were using explode('.', $ver). Then it compares the parts\n * starting from left to right. If a part contains special version strings\n * these are handled in the following order: any string not found in this\n * list < dev < alpha = a < beta = b < RC = rc < # < pl = p. This way not\n * only versions with different levels like '4.1' and '4.1.2' can be\n * compared but also any PHP specific version containing development state.\n *\n * @version1   string  First version number.\n * @version2   string  Second version number.\n * @sop        string  If you specify the third optional operator argument,\n *                     you can test for a particular relationship. The\n *                     possible operators are: <, lt, <=, le, >, gt, >=,\n *                     ge, ==, =, eq, !=, <>, ne respectively.\n *\n *                     This parameter is case-sensitive, so values should\n *                     be lowercase.\n *\n * @return     mixed   By default, version_compare() returns -1 if the\n *                     first version is lower than the second, 0 if they\n *                     are equal, and 1 if the second is lower.\n *\n *                     When using the optional operator argument, the\n *                     function will return TRUE if the relationship is the\n *                     one specified by the operator, FALSE otherwise.\n */",
"gc_enabled", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gc-enabled.php )\n *\n * Returns status of the circular reference collector.\n *\n * @return     bool    Returns TRUE if the garbage collector is enabled,\n *                     FALSE otherwise.\n */", 
"gc_enable", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gc-enable.php )\n *\n * Activates the circular reference collector.\n *\n */", 
"gc_disable", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gc-disable.php )\n *\n * Deactivates the circular reference collector.\n *\n */", 
"gc_collect_cycles", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gc-collect-cycles.php )\n *\n * Forces collection of any existing garbage cycles.\n *\n * @return     int     Returns number of collected cycles.\n */", 
"zend_logo_guid", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.zend-logo-guid.php )\n *\n * This function returns the ID which can be used to display the Zend logo\n * using the built-in image.\n *\n * @return     string  Returns PHPE9568F35-D428-11d2-A769-00AA001ACF42.\n */", 
"zend_thread_id", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.zend-thread-id.php )\n *\n * This function returns a unique identifier for the current thread.\n *\n * @return     int     Returns the thread id as an integer.\n */", 
"zend_version", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.zend-version.php )\n *\n * Returns a string containing the version of the currently running Zend\n * Engine.\n *\n * @return     string  Returns the Zend Engine version number, as a string.\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
