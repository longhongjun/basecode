// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"ldap_connect", T(Variant), S(0), "hostname", T(String), "N;", S(2), "null", S(0), "port", T(Int32), "i:389;", S(6), "389", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-connect.php )\n *\n * Establishes a connection to a LDAP server on a specified hostname and\n * port.\n *\n * @hostname   string  If you are using OpenLDAP 2.x.x you can specify a\n *                     URL instead of the hostname. To use LDAP with SSL,\n *                     compile OpenLDAP 2.x.x with SSL support, configure\n *                     PHP with SSL, and set this parameter as\n *                     ldaps://hostname/.\n * @port       int     The port to connect to. Not used when using URLs.\n *\n * @return     mixed   Returns a positive LDAP link identifier on success,\n *                     or FALSE on error. When OpenLDAP 2.x.x is used,\n *                     ldap_connect() will always return a resource as it\n *                     does not actually connect but just initializes the\n *                     connecting parameters. The actual connect happens\n *                     with the next calls to ldap_* funcs, usually with\n *                     ldap_bind().\n *\n *                     If no arguments are specified then the link\n *                     identifier of the already opened link will be\n *                     returned.\n */",
"ldap_explode_dn", T(Variant), S(0), "dn", T(String), NULL, S(0), NULL, S(0), "with_attrib", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-explode-dn.php )\n *\n * Splits the DN returned by ldap_get_dn() and breaks it up into its\n * component parts. Each part is known as Relative Distinguished Name, or\n * RDN.\n *\n * @dn         string  The distinguished name of an LDAP entity.\n * @with_attrib\n *             int     Used to request if the RDNs are returned with only\n *                     values or their attributes as well. To get RDNs with\n *                     the attributes (i.e. in attribute=value format) set\n *                     with_attrib to 0 and to get only values set it to 1.\n *\n * @return     mixed   Returns an array of all DN components. The first\n *                     element in this array has count key and represents\n *                     the number of returned values, next elements are\n *                     numerically indexed DN components.\n */",
"ldap_dn2ufn", T(Variant), S(0), "db", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-dn2ufn.php )\n *\n * Turns the specified dn, into a more user-friendly form, stripping off\n * type names.\n *\n * @db         string  The distinguished name of an LDAP entity.\n *\n * @return     mixed   Returns the user friendly name.\n */",
"ldap_err2str", T(String), S(0), "errnum", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-err2str.php )\n *\n * Returns the string error message explaining the error number errno.\n * While LDAP errno numbers are standardized, different libraries return\n * different or even localized textual error messages. Never check for a\n * specific error message text, but always use an error number to check.\n *\n * @errnum     int     The error number.\n *\n * @return     string  Returns the error message, as a string.\n */",
"ldap_add", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "dn", T(String), NULL, S(0), NULL, S(0), "entry", T(Array), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-add.php )\n *\n * Add entries in the LDAP directory.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @entry      vector  An array that specifies the information about the\n *                     entry. The values in the entries are indexed by\n *                     individual attributes. In case of multiple values\n *                     for an attribute, they are indexed using integers\n *                     starting with 0.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ldap_mod_add", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "dn", T(String), NULL, S(0), NULL, S(0), "entry", T(Array), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-mod-add.php )\n *\n * Adds one or more attributes to the specified dn. It performs the\n * modification at the attribute level as opposed to the object level.\n * Object-level additions are done by the ldap_add() function.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @entry      vector\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ldap_mod_del", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "dn", T(String), NULL, S(0), NULL, S(0), "entry", T(Array), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-mod-del.php )\n *\n * Removes one or more attributes from the specified dn. It performs the\n * modification at the attribute level as opposed to the object level.\n * Object-level deletions are done by the ldap_delete() function.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @entry      vector\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ldap_mod_replace", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "dn", T(String), NULL, S(0), NULL, S(0), "entry", T(Array), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-mod-replace.php )\n *\n * Replaces one or more attributes from the specified dn. It performs the\n * modification at the attribute level as opposed to the object level.\n * Object-level modifications are done by the ldap_modify() function.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @entry      vector\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ldap_modify", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "dn", T(String), NULL, S(0), NULL, S(0), "entry", T(Array), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-modify.php )\n *\n * Modify the existing entries in the LDAP directory. The structure of the\n * entry is same as in ldap_add().\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @entry      vector\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ldap_bind", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "bind_rdn", T(String), "N;", S(2), "null", S(0), "bind_password", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-bind.php )\n *\n * Binds to the LDAP directory with specified RDN and password.\n * If bind_rdn and bind_password are not specified, an anonymous bind is\n * attempted.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @bind_rdn   string\n * @bind_password\n *             string\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ldap_set_rebind_proc", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "callback", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.ldap-set-rebind-proc.php )\n *\n *\n * @link       resource\n *\n * @callback   mixed\n *\n * @return     bool\n */",
"ldap_sort", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result", T(Object), NULL, S(0), NULL, S(0), "sortfilter", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-sort.php )\n *\n *\n * @link       resource\n *\n * @result     resource\n *\n * @sortfilter string\n *\n * @return     bool\n */",
"ldap_start_tls", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-start-tls.php )\n *\n *\n * @link       resource\n *\n *\n * @return     bool\n */",
"ldap_unbind", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-unbind.php )\n *\n * Unbinds from the LDAP directory.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ldap_get_option", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "option", T(Int32), NULL, S(0), NULL, S(0), "retval", T(Variant), NULL, S(0), NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-get-option.php )\n *\n * Sets retval to the value of the specified option.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @option     int     The parameter option can be one of: Option Type\n *                     LDAP_OPT_DEREF integer LDAP_OPT_SIZELIMIT integer\n *                     LDAP_OPT_TIMELIMIT integer LDAP_OPT_NETWORK_TIMEOUT\n *                     integer LDAP_OPT_PROTOCOL_VERSION integer\n *                     LDAP_OPT_ERROR_NUMBER integer LDAP_OPT_REFERRALS\n *                     bool LDAP_OPT_RESTART bool LDAP_OPT_HOST_NAME string\n *                     LDAP_OPT_ERROR_STRING string LDAP_OPT_MATCHED_DN\n *                     string LDAP_OPT_SERVER_CONTROLS array\n *                     LDAP_OPT_CLIENT_CONTROLS array\n * @retval     mixed   This will be set to the option value.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ldap_set_option", T(Boolean), S(0), "link", T(Variant), NULL, S(0), NULL, S(0), "option", T(Int32), NULL, S(0), NULL, S(0), "newval", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-set-option.php )\n *\n * Sets the value of the specified option to be newval.\n *\n * @link       mixed   An LDAP link identifier, returned by ldap_connect().\n * @option     int     The parameter option can be one of: Option Type\n *                     Available since LDAP_OPT_DEREF integer \240\n *                     LDAP_OPT_SIZELIMIT integer \240 LDAP_OPT_TIMELIMIT\n *                     integer \240 LDAP_OPT_NETWORK_TIMEOUT integer PHP 5.3.0\n *                     LDAP_OPT_PROTOCOL_VERSION integer \240\n *                     LDAP_OPT_ERROR_NUMBER integer \240 LDAP_OPT_REFERRALS\n *                     bool \240 LDAP_OPT_RESTART bool \240 LDAP_OPT_HOST_NAME\n *                     string \240 LDAP_OPT_ERROR_STRING string \240\n *                     LDAP_OPT_MATCHED_DN string \240\n *                     LDAP_OPT_SERVER_CONTROLS array \240\n *                     LDAP_OPT_CLIENT_CONTROLS array \240\n *\n *                     LDAP_OPT_SERVER_CONTROLS and\n *                     LDAP_OPT_CLIENT_CONTROLS require a list of controls,\n *                     this means that the value must be an array of\n *                     controls. A control consists of an oid identifying\n *                     the control, an optional value, and an optional flag\n *                     for criticality. In PHP a control is given by an\n *                     array containing an element with the key oid and\n *                     string value, and two optional elements. The\n *                     optional elements are key value with string value\n *                     and key iscritical with boolean value. iscritical\n *                     defaults to FALSE if not supplied. See \273\n *                     draft-ietf-ldapext-ldap-c-api-xx.txt for details.\n *                     See also the second example below.\n * @newval     mixed   The new value for the specified option.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ldap_close", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-close.php )\n *\n *\n * @link       resource\n *\n *\n * @return     bool\n */",
"ldap_list", T(Variant), S(0), "link", T(Variant), NULL, S(0), NULL, S(0), "base_dn", T(Variant), NULL, S(0), NULL, S(0), "filter", T(Variant), NULL, S(0), NULL, S(0), "attributes", T(Array), "N;", S(2), "null", S(0), "attrsonly", T(Int32), "i:0;", S(4), "0", S(0), "sizelimit", T(Int32), "i:-1;", S(5), "-1", S(0), "timelimit", T(Int32), "i:-1;", S(5), "-1", S(0), "deref", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-list.php )\n *\n * Performs the search for a specified filter on the directory with the\n * scope LDAP_SCOPE_ONELEVEL.\n *\n * LDAP_SCOPE_ONELEVEL means that the search should only return\n * information that is at the level immediately below the base_dn given in\n * the call. (Equivalent to typing \"ls\" and getting a list of files and\n * folders in the current working directory.)\n *\n * @link       mixed   An LDAP link identifier, returned by ldap_connect().\n * @base_dn    mixed   The base DN for the directory.\n * @filter     mixed\n * @attributes vector  An array of the required attributes, e.g.\n *                     array(\"mail\", \"sn\", \"cn\"). Note that the \"dn\" is\n *                     always returned irrespective of which attributes\n *                     types are requested.\n *\n *                     Using this parameter is much more efficient than\n *                     the default action (which is to return all\n *                     attributes and their associated values). The use of\n *                     this parameter should therefore be considered good\n *                     practice.\n * @attrsonly  int     Should be set to 1 if only attribute types are\n *                     wanted. If set to 0 both attributes types and\n *                     attribute values are fetched which is the default\n *                     behaviour.\n * @sizelimit  int     Enables you to limit the count of entries fetched.\n *                     Setting this to 0 means no limit.\n *\n *                     This parameter can NOT override server-side preset\n *                     sizelimit. You can set it lower though.\n *\n *                     Some directory server hosts will be configured to\n *                     return no more than a preset number of entries. If\n *                     this occurs, the server will indicate that it has\n *                     only returned a partial results set. This also\n *                     occurs if you use this parameter to limit the count\n *                     of fetched entries.\n * @timelimit  int     Sets the number of seconds how long is spend on the\n *                     search. Setting this to 0 means no limit.\n *\n *                     This parameter can NOT override server-side preset\n *                     timelimit. You can set it lower though.\n * @deref      int     Specifies how aliases should be handled during the\n *                     search. It can be one of the following:\n *                     LDAP_DEREF_NEVER - (default) aliases are never\n *                     dereferenced. LDAP_DEREF_SEARCHING - aliases should\n *                     be dereferenced during the search but not when\n *                     locating the base object of the search.\n *                     LDAP_DEREF_FINDING - aliases should be dereferenced\n *                     when locating the base object but not during the\n *                     search. LDAP_DEREF_ALWAYS - aliases should be\n *                     dereferenced always.\n *\n * @return     mixed   Returns a search result identifier or FALSE on\n *                     error.\n */",
"ldap_read", T(Variant), S(0), "link", T(Variant), NULL, S(0), NULL, S(0), "base_dn", T(Variant), NULL, S(0), NULL, S(0), "filter", T(Variant), NULL, S(0), NULL, S(0), "attributes", T(Array), "N;", S(2), "null", S(0), "attrsonly", T(Int32), "i:0;", S(4), "0", S(0), "sizelimit", T(Int32), "i:-1;", S(5), "-1", S(0), "timelimit", T(Int32), "i:-1;", S(5), "-1", S(0), "deref", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-read.php )\n *\n * Performs the search for a specified filter on the directory with the\n * scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from the\n * directory.\n *\n * @link       mixed   An LDAP link identifier, returned by ldap_connect().\n * @base_dn    mixed   The base DN for the directory.\n * @filter     mixed   An empty filter is not allowed. If you want to\n *                     retrieve absolutely all information for this entry,\n *                     use a filter of objectClass=*. If you know which\n *                     entry types are used on the directory server, you\n *                     might use an appropriate filter such as\n *                     objectClass=inetOrgPerson.\n * @attributes vector  An array of the required attributes, e.g.\n *                     array(\"mail\", \"sn\", \"cn\"). Note that the \"dn\" is\n *                     always returned irrespective of which attributes\n *                     types are requested.\n *\n *                     Using this parameter is much more efficient than\n *                     the default action (which is to return all\n *                     attributes and their associated values). The use of\n *                     this parameter should therefore be considered good\n *                     practice.\n * @attrsonly  int     Should be set to 1 if only attribute types are\n *                     wanted. If set to 0 both attributes types and\n *                     attribute values are fetched which is the default\n *                     behaviour.\n * @sizelimit  int     Enables you to limit the count of entries fetched.\n *                     Setting this to 0 means no limit.\n *\n *                     This parameter can NOT override server-side preset\n *                     sizelimit. You can set it lower though.\n *\n *                     Some directory server hosts will be configured to\n *                     return no more than a preset number of entries. If\n *                     this occurs, the server will indicate that it has\n *                     only returned a partial results set. This also\n *                     occurs if you use this parameter to limit the count\n *                     of fetched entries.\n * @timelimit  int     Sets the number of seconds how long is spend on the\n *                     search. Setting this to 0 means no limit.\n *\n *                     This parameter can NOT override server-side preset\n *                     timelimit. You can set it lower though.\n * @deref      int     Specifies how aliases should be handled during the\n *                     search. It can be one of the following:\n *                     LDAP_DEREF_NEVER - (default) aliases are never\n *                     dereferenced. LDAP_DEREF_SEARCHING - aliases should\n *                     be dereferenced during the search but not when\n *                     locating the base object of the search.\n *                     LDAP_DEREF_FINDING - aliases should be dereferenced\n *                     when locating the base object but not during the\n *                     search. LDAP_DEREF_ALWAYS - aliases should be\n *                     dereferenced always.\n *\n * @return     mixed   Returns a search result identifier or FALSE on\n *                     error.\n */",
"ldap_search", T(Variant), S(0), "link", T(Variant), NULL, S(0), NULL, S(0), "base_dn", T(Variant), NULL, S(0), NULL, S(0), "filter", T(Variant), NULL, S(0), NULL, S(0), "attributes", T(Array), "N;", S(2), "null", S(0), "attrsonly", T(Int32), "i:0;", S(4), "0", S(0), "sizelimit", T(Int32), "i:-1;", S(5), "-1", S(0), "timelimit", T(Int32), "i:-1;", S(5), "-1", S(0), "deref", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-search.php )\n *\n * Performs the search for a specified filter on the directory with the\n * scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the entire\n * directory.\n *\n * From 4.0.5 on it's also possible to do parallel searches. To do this\n * you use an array of link identifiers, rather than a single identifier,\n * as the first argument. If you don't want the same base DN and the same\n * filter for all the searches, you can also use an array of base DNs\n * and/or an array of filters. Those arrays must be of the same size as the\n * link identifier array since the first entries of the arrays are used for\n * one search, the second entries are used for another, and so on. When\n * doing parallel searches an array of search result identifiers is\n * returned, except in case of error, then the entry corresponding to the\n * search will be FALSE. This is very much like the value normally\n * returned, except that a result identifier is always returned when a\n * search was made. There are some rare cases where the normal search\n * returns FALSE while the parallel search returns an identifier.\n *\n * @link       mixed   An LDAP link identifier, returned by ldap_connect().\n * @base_dn    mixed   The base DN for the directory.\n * @filter     mixed   The search filter can be simple or advanced, using\n *                     boolean operators in the format described in the\n *                     LDAP documentation (see the \273 Netscape Directory SDK\n *                     for full information on filters).\n * @attributes vector  An array of the required attributes, e.g.\n *                     array(\"mail\", \"sn\", \"cn\"). Note that the \"dn\" is\n *                     always returned irrespective of which attributes\n *                     types are requested.\n *\n *                     Using this parameter is much more efficient than\n *                     the default action (which is to return all\n *                     attributes and their associated values). The use of\n *                     this parameter should therefore be considered good\n *                     practice.\n * @attrsonly  int     Should be set to 1 if only attribute types are\n *                     wanted. If set to 0 both attributes types and\n *                     attribute values are fetched which is the default\n *                     behaviour.\n * @sizelimit  int     Enables you to limit the count of entries fetched.\n *                     Setting this to 0 means no limit.\n *\n *                     This parameter can NOT override server-side preset\n *                     sizelimit. You can set it lower though.\n *\n *                     Some directory server hosts will be configured to\n *                     return no more than a preset number of entries. If\n *                     this occurs, the server will indicate that it has\n *                     only returned a partial results set. This also\n *                     occurs if you use this parameter to limit the count\n *                     of fetched entries.\n * @timelimit  int     Sets the number of seconds how long is spend on the\n *                     search. Setting this to 0 means no limit.\n *\n *                     This parameter can NOT override server-side preset\n *                     timelimit. You can set it lower though.\n * @deref      int     Specifies how aliases should be handled during the\n *                     search. It can be one of the following:\n *                     LDAP_DEREF_NEVER - (default) aliases are never\n *                     dereferenced. LDAP_DEREF_SEARCHING - aliases should\n *                     be dereferenced during the search but not when\n *                     locating the base object of the search.\n *                     LDAP_DEREF_FINDING - aliases should be dereferenced\n *                     when locating the base object but not during the\n *                     search. LDAP_DEREF_ALWAYS - aliases should be\n *                     dereferenced always.\n *\n * @return     mixed   Returns a search result identifier or FALSE on\n *                     error.\n */",
"ldap_rename", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "dn", T(String), NULL, S(0), NULL, S(0), "newrdn", T(String), NULL, S(0), NULL, S(0), "newparent", T(String), NULL, S(0), NULL, S(0), "deleteoldrdn", T(Boolean), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-rename.php )\n *\n * The entry specified by dn is renamed/moved.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @newrdn     string  The new RDN.\n * @newparent  string  The new parent/superior entry.\n * @deleteoldrdn\n *             bool    If TRUE the old RDN value(s) is removed, else the\n *                     old RDN value(s) is retained as non-distinguished\n *                     values of the entry.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ldap_delete", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "dn", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-delete.php )\n *\n * Deletes a particular entry in LDAP directory.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ldap_compare", T(Variant), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "dn", T(String), NULL, S(0), NULL, S(0), "attribute", T(String), NULL, S(0), NULL, S(0), "value", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-compare.php )\n *\n * Compare value of attribute with value of same attribute in an LDAP\n * directory entry.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @dn         string  The distinguished name of an LDAP entity.\n * @attribute  string  The attribute name.\n * @value      string  The compared value.\n *\n * @return     mixed   Returns TRUE if value matches otherwise returns\n *                     FALSE. Returns -1 on error.\n */",
"ldap_errno", T(Int64), S(0), "link", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-errno.php )\n *\n * Returns the standardized error number returned by the last LDAP\n * command. This number can be converted into a textual error message using\n * ldap_err2str().\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n *\n * @return     int     Return the LDAP error number of the last LDAP\n *                     command for this link.\n */",
"ldap_error", T(String), S(0), "link", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-error.php )\n *\n * Returns the string error message explaining the error generated by the\n * last LDAP command for the given link_identifier. While LDAP errno\n * numbers are standardized, different libraries return different or even\n * localized textual error messages. Never check for a specific error\n * message text, but always use an error number to check.\n *\n * Unless you lower your warning level in your php.ini sufficiently or\n * prefix your LDAP commands with @ (at) characters to suppress warning\n * output, the errors generated will also show up in your HTML output.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n *\n * @return     string  Returns string error message.\n */",
"ldap_get_dn", T(Variant), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result_entry", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-get-dn.php )\n *\n * Finds out the DN of an entry in the result.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n *\n * @return     mixed   Returns the DN of the result entry and FALSE on\n *                     error.\n */",
"ldap_count_entries", T(Int64), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-count-entries.php\n * )\n *\n * Returns the number of entries stored in the result of previous search\n * operations.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result     resource\n *                     The internal LDAP result.\n *\n * @return     int     Returns number of entries in the result or FALSE on\n *                     error.\n */",
"ldap_get_entries", T(Variant), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-get-entries.php )\n *\n * Reads multiple entries from the given result, and then reading the\n * attributes and multiple values.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result     resource\n *\n *\n * @return     mixed   Returns a complete result information in a\n *                     multi-dimensional array on success and FALSE on\n *                     error.\n *\n *                     The structure of the array is as follows. The\n *                     attribute index is converted to lowercase.\n *                     (Attributes are case-insensitive for directory\n *                     servers, but not when used as array indices.)\n */",
"ldap_first_entry", T(Variant), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-first-entry.php )\n *\n * Returns the entry identifier for first entry in the result. This entry\n * identifier is then supplied to ldap_next_entry() routine to get\n * successive entries from the result.\n *\n * Entries in the LDAP result are read sequentially using the\n * ldap_first_entry() and ldap_next_entry() functions.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result     resource\n *\n *\n * @return     mixed   Returns the result entry identifier for the first\n *                     entry on success and FALSE on error.\n */",
"ldap_next_entry", T(Variant), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result_entry", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-next-entry.php )\n *\n * Retrieve the entries stored in the result. Successive calls to the\n * ldap_next_entry() return entries one by one till there are no more\n * entries. The first call to ldap_next_entry() is made after the call to\n * ldap_first_entry() with the result_entry_identifier as returned from the\n * ldap_first_entry().\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n *\n * @return     mixed   Returns entry identifier for the next entry in the\n *                     result whose entries are being read starting with\n *                     ldap_first_entry(). If there are no more entries in\n *                     the result then it returns FALSE.\n */",
"ldap_get_attributes", T(Array), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result_entry", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-get-attributes.php\n * )\n *\n * Reads attributes and values from an entry in the search result.\n *\n * Having located a specific entry in the directory, you can find out what\n * information is held for that entry by using this call. You would use\n * this call for an application which \"browses\" directory entries and/or\n * where you do not know the structure of the directory entries. In many\n * applications you will be searching for a specific attribute such as an\n * email address or a surname, and won't care what other data is held.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n *\n * @return     vector  Returns a complete entry information in a\n *                     multi-dimensional array on success and FALSE on\n *                     error.\n */",
"ldap_first_attribute", T(Variant), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result_entry", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.ldap-first-attribute.php )\n *\n * Gets the first attribute in the given entry. Remaining attributes are\n * retrieved by calling ldap_next_attribute() successively.\n *\n * Similar to reading entries, attributes are also read one by one from a\n * particular entry.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n *\n * @return     mixed   Returns the first attribute in the entry on success\n *                     and FALSE on error.\n */",
"ldap_next_attribute", T(Variant), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result_entry", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-next-attribute.php\n * )\n *\n * Retrieves the attributes in an entry. The first call to\n * ldap_next_attribute() is made with the result_entry_identifier returned\n * from ldap_first_attribute().\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n *\n * @return     mixed   Returns the next attribute in an entry on success\n *                     and FALSE on error.\n */",
"ldap_first_reference", T(Variant), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.ldap-first-reference.php )\n *\n *\n * @link       resource\n *\n * @result     resource\n *\n *\n * @return     mixed\n */",
"ldap_next_reference", T(Variant), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result_entry", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-next-reference.php\n * )\n *\n *\n * @link       resource\n *\n * @result_entry\n *             resource\n *\n *\n * @return     mixed\n */",
"ldap_parse_reference", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result_entry", T(Object), NULL, S(0), NULL, S(0), "referrals", T(Variant), NULL, S(0), NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.ldap-parse-reference.php )\n *\n *\n * @link       resource\n *\n * @result_entry\n *             resource\n *\n * @referrals  mixed\n *\n * @return     bool\n */",
"ldap_parse_result", T(Boolean), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result", T(Object), NULL, S(0), NULL, S(0), "errcode", T(Variant), NULL, S(0), NULL, S(1), "matcheddn", T(Variant), "N;", S(2), "null", S(1), "errmsg", T(Variant), "N;", S(2), "null", S(1), "referrals", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-parse-result.php )\n *\n *\n * @link       resource\n *\n * @result     resource\n *\n * @errcode    mixed\n * @matcheddn  mixed\n * @errmsg     mixed\n * @referrals  mixed\n *\n * @return     bool\n */",
"ldap_free_result", T(Boolean), S(0), "result", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-free-result.php )\n *\n * Frees up the memory allocated internally to store the result. All\n * result memory will be automatically freed when the script terminates.\n *\n * Typically all the memory allocated for the LDAP result gets freed at\n * the end of the script. In case the script is making successive searches\n * which return large result sets, ldap_free_result() could be called to\n * keep the runtime memory usage by the script low.\n *\n * @result     resource\n *\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ldap_get_values_len", T(Variant), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result_entry", T(Object), NULL, S(0), NULL, S(0), "attribute", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-get-values-len.php\n * )\n *\n * Reads all the values of the attribute in the entry in the result.\n *\n * This function is used exactly like ldap_get_values() except that it\n * handles binary data and not string data.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n * @attribute  string\n *\n * @return     mixed   Returns an array of values for the attribute on\n *                     success and FALSE on error. Individual values are\n *                     accessed by integer index in the array. The first\n *                     index is 0. The number of values can be found by\n *                     indexing \"count\" in the resultant array.\n */",
"ldap_get_values", T(Variant), S(0), "link", T(Object), NULL, S(0), NULL, S(0), "result_entry", T(Object), NULL, S(0), NULL, S(0), "attribute", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ldap-get-values.php )\n *\n * Reads all the values of the attribute in the entry in the result.\n *\n * This call needs a result_entry_identifier, so needs to be preceded by\n * one of the ldap search calls and one of the calls to get an individual\n * entry.\n *\n * You application will either be hard coded to look for certain\n * attributes (such as \"surname\" or \"mail\") or you will have to use the\n * ldap_get_attributes() call to work out what attributes exist for a given\n * entry.\n *\n * @link       resource\n *                     An LDAP link identifier, returned by ldap_connect().\n * @result_entry\n *             resource\n *\n * @attribute  string\n *\n * @return     mixed   Returns an array of values for the attribute on\n *                     success and FALSE on error. The number of values can\n *                     be found by indexing \"count\" in the resultant array.\n *                     Individual values are accessed by integer index in\n *                     the array. The first index is 0.\n *\n *                     LDAP allows more than one entry for an attribute,\n *                     so it can, for example, store a number of email\n *                     addresses for one person's directory entry all\n *                     labeled with the attribute \"mail\"\n *                     return_value[\"count\"] = number of values for\n *                     attribute return_value[0] = first value of attribute\n *                     return_value[i] = ith value of attribute\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
