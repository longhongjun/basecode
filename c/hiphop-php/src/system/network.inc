// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"gethostname", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gethostname.php )\n *\n * Gets the standard host name for the local machine.\n *\n * @return     mixed   Returns a string with the hostname on success,\n *                     otherwise FALSE is returned.\n */", 
"gethostbyaddr", T(Variant), S(0), "ip_address", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gethostbyaddr.php )\n *\n * Returns the host name of the Internet host specified by ip_address.\n *\n * @ip_address string  The host IP address.\n *\n * @return     mixed   Returns the host name or the unmodified ip_address\n *                     on failure.\n */",
"gethostbyname", T(String), S(0), "hostname", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gethostbyname.php )\n *\n * Returns the IPv4 address of the Internet host specified by hostname.\n *\n * @hostname   string  The host name.\n *\n * @return     string  Returns the IPv4 address or a string containing the\n *                     unmodified hostname on failure.\n */",
"gethostbynamel", T(Variant), S(0), "hostname", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gethostbynamel.php )\n *\n * Returns a list of IPv4 addresses to which the Internet host specified\n * by hostname resolves.\n *\n * @hostname   string  The host name.\n *\n * @return     mixed   Returns an array of IPv4 addresses or FALSE if\n *                     hostname could not be resolved.\n */",
"getprotobyname", T(Variant), S(0), "name", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getprotobyname.php )\n *\n * getprotobyname() returns the protocol number associated with the\n * protocol name as per /etc/protocols.\n *\n * @name       string  The protocol name.\n *\n * @return     mixed   Returns the protocol number or -1 if the protocol is\n *                     not found.\n */",
"getprotobynumber", T(Variant), S(0), "number", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getprotobynumber.php )\n *\n * getprotobynumber() returns the protocol name associated with protocol\n * number as per /etc/protocols.\n *\n * @number     int     The protocol number.\n *\n * @return     mixed   Returns the protocol name as a string, or FALSE on\n *                     failure.\n */",
"getservbyname", T(Variant), S(0), "service", T(String), NULL, S(0), NULL, S(0), "protocol", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getservbyname.php )\n *\n * getservbyname() returns the Internet port which corresponds to service\n * for the specified protocol as per /etc/services.\n *\n * @service    string  The Internet service name, as a string.\n * @protocol   string  protocol is either \"tcp\" or \"udp\" (in lowercase).\n *\n * @return     mixed   Returns the port number, or FALSE if service or\n *                     protocol is not found.\n */",
"getservbyport", T(Variant), S(0), "port", T(Int32), NULL, S(0), NULL, S(0), "protocol", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getservbyport.php )\n *\n * getservbyport() returns the Internet service associated with port for\n * the specified protocol as per /etc/services.\n *\n * @port       int     The port number.\n * @protocol   string  protocol is either \"tcp\" or \"udp\" (in lowercase).\n *\n * @return     mixed   Returns the Internet service name as a string.\n */",
"inet_ntop", T(Variant), S(0), "in_addr", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.inet-ntop.php )\n *\n *\n * @in_addr    string  A 32bit IPv4, or 128bit IPv6 address.\n *\n * @return     mixed   Returns a string representation of the address or\n *                     FALSE on failure.\n */",
"inet_pton", T(Variant), S(0), "address", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.inet-pton.php )\n *\n * This function converts a human readable IPv4 or IPv6 address (if PHP\n * was built with IPv6 support enabled) into an address family appropriate\n * 32bit or 128bit binary structure.\n *\n * @address    string  A human readable IPv4 or IPv6 address.\n *\n * @return     mixed   Returns the in_addr representation of the given\n *                     address\n */",
"ip2long", T(Variant), S(0), "ip_address", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ip2long.php )\n *\n * The function ip2long() generates an IPv4 Internet network address from\n * its Internet standard format (dotted string) representation.\n *\n * ip2long() will also work with non-complete IP addresses. Read \273\n * http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/commtrf2/inet_addr.htm\n * for more info.\n *\n * @ip_address string  A standard format address.\n *\n * @return     mixed   Returns the IPv4 address or FALSE if ip_address is\n *                     invalid.\n */",
"long2ip", T(String), S(0), "proper_address", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.long2ip.php )\n *\n * The function long2ip() generates an Internet address in dotted format\n * (i.e.: aaa.bbb.ccc.ddd) from the proper address representation.\n *\n * @proper_address\n *             int     A proper address representation.\n *\n * @return     string  Returns the Internet IP address as a string.\n */",
"dns_check_record", T(Boolean), S(0), "host", T(String), NULL, S(0), NULL, S(0), "type", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dns-check-record.php )\n *\n *\n * @host       string\n * @type       string\n *\n * @return     bool\n */",
"checkdnsrr", T(Boolean), S(0), "host", T(String), NULL, S(0), NULL, S(0), "type", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.checkdnsrr.php )\n *\n * Searches DNS for records of type type corresponding to host.\n *\n * @host       string  host may either be the IP address in dotted-quad\n *                     notation or the host name.\n * @type       string  type may be any one of: A, MX, NS, SOA, PTR, CNAME,\n *                     AAAA, A6, SRV, NAPTR, TXT or ANY.\n *\n * @return     bool    Returns TRUE if any records are found; returns FALSE\n *                     if no records were found or if an error occurred.\n */",
"dns_get_record", T(Variant), S(0), "hostname", T(String), NULL, S(0), NULL, S(0), "type", T(Int32), "i:-1;", S(5), "-1", S(0), "authns", T(Variant), "N;", S(2), "null", S(1), "addtl", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dns-get-record.php )\n *\n * Fetch DNS Resource Records associated with the given hostname.\n *\n * @hostname   string  hostname should be a valid DNS hostname such as\n *                     \"www.example.com\". Reverse lookups can be generated\n *                     using in-addr.arpa notation, but gethostbyaddr() is\n *                     more suitable for the majority of reverse lookups.\n *\n *                     Per DNS standards, email addresses are given in\n *                     user.host format (for example:\n *                     hostmaster.example.com as opposed to\n *                     hostmaster@example.com), be sure to check this value\n *                     and modify if necessary before using it with a\n *                     functions such as mail().\n * @type       int     By default, dns_get_record() will search for any\n *                     resource records associated with hostname. To limit\n *                     the query, specify the optional type parameter. May\n *                     be any one of the following: DNS_A, DNS_CNAME,\n *                     DNS_HINFO, DNS_MX, DNS_NS, DNS_PTR, DNS_SOA,\n *                     DNS_TXT, DNS_AAAA, DNS_SRV, DNS_NAPTR, DNS_A6,\n *                     DNS_ALL or DNS_ANY.\n *\n *                     Because of eccentricities in the performance of\n *                     libresolv between platforms, DNS_ANY will not always\n *                     return every record, the slower DNS_ALL will collect\n *                     all records more reliably.\n * @authns     mixed   Passed by reference and, if given, will be populated\n *                     with Resource Records for the Authoritative Name\n *                     Servers.\n * @addtl      mixed   Passed by reference and, if given, will be populated\n *                     with any Additional Records.\n *\n * @return     mixed\n */",
"dns_get_mx", T(Boolean), S(0), "hostname", T(String), NULL, S(0), NULL, S(0), "mxhosts", T(Variant), NULL, S(0), NULL, S(1), "weights", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dns-get-mx.php )\n *\n *\n * @hostname   string\n * @mxhosts    mixed\n * @weights    mixed\n *\n * @return     bool\n */",
"getmxrr", T(Boolean), S(0), "hostname", T(String), NULL, S(0), NULL, S(0), "mxhosts", T(Variant), NULL, S(0), NULL, S(1), "weight", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getmxrr.php )\n *\n * Searches DNS for MX records corresponding to hostname.\n *\n * @hostname   string  The Internet host name.\n * @mxhosts    mixed   A list of the MX records found is placed into the\n *                     array mxhosts.\n * @weight     mixed   If the weight array is given, it will be filled with\n *                     the weight information gathered.\n *\n * @return     bool    Returns TRUE if any records are found; returns FALSE\n *                     if no records were found or if an error occurred.\n */",
"fsockopen", T(Variant), S(0), "hostname", T(String), NULL, S(0), NULL, S(0), "port", T(Int32), "i:-1;", S(5), "-1", S(0), "errnum", T(Variant), "N;", S(2), "null", S(1), "errstr", T(Variant), "N;", S(2), "null", S(1), "timeout", T(Double), "d:0;", S(4), "0.0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fsockopen.php )\n *\n * Initiates a socket connection to the resource specified by hostname.\n *\n * PHP supports targets in the Internet and Unix domains as described in\n * List of Supported Socket Transports. A list of supported transports can\n * also be retrieved using stream_get_transports().\n *\n * The socket will by default be opened in blocking mode. You can switch\n * it to non-blocking mode by using stream_set_blocking().\n *\n * @hostname   string  If you have compiled in OpenSSL support, you may\n *                     prefix the hostname with either ssl:// or tls:// to\n *                     use an SSL or TLS client connection over TCP/IP to\n *                     connect to the remote host.\n * @port       int     The port number.\n * @errnum     mixed   If provided, holds the system level error number\n *                     that occurred in the system-level connect() call.\n *\n *                     If the value returned in errno is 0 and the\n *                     function returned FALSE, it is an indication that\n *                     the error occurred before the connect() call. This\n *                     is most likely due to a problem initializing the\n *                     socket.\n * @errstr     mixed   The error message as a string.\n * @timeout    float   The connection timeout, in seconds.\n *\n *                     If you need to set a timeout for reading/writing\n *                     data over the socket, use stream_set_timeout(), as\n *                     the timeout parameter to fsockopen() only applies\n *                     while connecting the socket.\n *\n * @return     mixed   fsockopen() returns a file pointer which may be used\n *                     together with the other file functions (such as\n *                     fgets(), fgetss(), fwrite(), fclose(), and feof()).\n *                     If the call fails, it will return FALSE\n */",
"pfsockopen", T(Variant), S(0), "hostname", T(String), NULL, S(0), NULL, S(0), "port", T(Int32), "i:-1;", S(5), "-1", S(0), "errnum", T(Variant), "N;", S(2), "null", S(1), "errstr", T(Variant), "N;", S(2), "null", S(1), "timeout", T(Double), "d:0;", S(4), "0.0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pfsockopen.php )\n *\n * This function behaves exactly as fsockopen() with the difference that\n * the connection is not closed after the script finishes. It is the\n * persistent version of fsockopen().\n * For parameter information, see the fsockopen() documentation.\n *\n * @hostname   string\n * @port       int\n * @errnum     mixed\n * @errstr     mixed\n * @timeout    float\n *\n * @return     mixed\n */",
"socket_get_status", T(Variant), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-get-status.php )\n *\n *\n * @stream     resource\n *\n *\n * @return     mixed\n */",
"socket_set_blocking", T(Boolean), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), "mode", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-set-blocking.php\n * )\n *\n *\n * @stream     resource\n *\n * @mode       int\n *\n * @return     bool\n */",
"socket_set_timeout", T(Boolean), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), "seconds", T(Int32), NULL, S(0), NULL, S(0), "microseconds", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-set-timeout.php\n * )\n *\n *\n * @stream     resource\n *\n * @seconds    int\n * @microseconds\n *             int\n *\n * @return     bool\n */",
"header", T(Void), S(0), "str", T(String), NULL, S(0), NULL, S(0), "replace", T(Boolean), "b:1;", S(4), "true", S(0), "http_response_code", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.header.php )\n *\n * header() is used to send a raw HTTP header. See the \273 HTTP/1.1\n * specification for more information on HTTP headers.\n *\n * Remember that header() must be called before any actual output is sent,\n * either by normal HTML tags, blank lines in a file, or from PHP. It is a\n * very common error to read code with include(), or require(), functions,\n * or another file access function, and have spaces or empty lines that are\n * output before header() is called. The same problem exists when using a\n * single PHP/HTML file.\n *\n * @str        string  The header string.\n *\n *                     There are two special-case header calls. The first\n *                     is a header that starts with the string \"HTTP/\"\n *                     (case is not significant), which will be used to\n *                     figure out the HTTP status code to send. For\n *                     example, if you have configured Apache to use a PHP\n *                     script to handle requests for missing files (using\n *                     the ErrorDocument directive), you may want to make\n *                     sure that your script generates the proper status\n *                     code.\n *\n *\n *\n *\n *\n *                     The second special case is the \"Location:\" header.\n *                     Not only does it send this header back to the\n *                     browser, but it also returns a REDIRECT (302) status\n *                     code to the browser unless the 201 or a 3xx status\n *                     code has already been set.\n * @replace    bool    The optional replace parameter indicates whether the\n *                     header should replace a previous similar header, or\n *                     add a second header of the same type. By default it\n *                     will replace, but if you pass in FALSE as the second\n *                     argument you can force multiple headers of the same\n *                     type. For example:\n * @http_response_code\n *             int     Forces the HTTP response code to the specified\n *                     value.\n *\n * @return     mixed   No value is returned.\n */",
"headers_list", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.headers-list.php )\n *\n * headers_list() will return a list of headers to be sent to the browser\n * / client. To determine whether or not these headers have been sent yet,\n * use headers_sent().\n *\n * @return     vector  Returns a numerically indexed array of headers.\n */", 
"get_http_request_size", T(Int32), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.get-http-request-size.php )\n *\n * get_http_request_size() will return the size of the http request.\n *\n * @return     int     Returns the size of the http request.\n */", 
"headers_sent", T(Boolean), S(0), "file", T(Variant), "N;", S(2), "null", S(1), "line", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.headers-sent.php )\n *\n * Checks if or where headers have been sent.\n *\n * You can't add any more header lines using the header() function once\n * the header block has already been sent. Using this function you can at\n * least prevent getting HTTP header related error messages. Another option\n * is to use Output Buffering.\n *\n * @file       mixed   If the optional file and line parameters are set,\n *                     headers_sent() will put the PHP source file name and\n *                     line number where output started in the file and\n *                     line variables.\n * @line       mixed   The line number where the output started.\n *\n * @return     bool    headers_sent() will return FALSE if no HTTP headers\n *                     have already been sent or TRUE otherwise.\n */",
"header_register_callback", T(Boolean), S(0), "callback", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.header-register-callback.php )\n *\n * Registers a function that will be called when PHP starts sending\n * output.\n *\n * @callback   mixed   Function called just before the headers are sent. It\n *                     gets no parameters and the return value is ignored.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"header_remove", T(Void), S(0), "name", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.header-remove.php )\n *\n * Removes an HTTP header previously set using header().\n *\n * @name       string  The header name to be removed. This parameter is\n *                     case-insensitive.\n *\n * @return     mixed   No value is returned.\n */",
"setcookie", T(Boolean), S(0), "name", T(String), NULL, S(0), NULL, S(0), "value", T(String), "N;", S(2), "null", S(0), "expire", T(Int64), "i:0;", S(4), "0", S(0), "path", T(String), "N;", S(2), "null", S(0), "domain", T(String), "N;", S(2), "null", S(0), "secure", T(Boolean), "b:0;", S(4), "false", S(0), "httponly", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.setcookie.php )\n *\n * setcookie() defines a cookie to be sent along with the rest of the HTTP\n * headers. Like other headers, cookies must be sent before any output from\n * your script (this is a protocol restriction). This requires that you\n * place calls to this function prior to any output, including <html> and\n * <head> tags as well as any whitespace.\n *\n * Once the cookies have been set, they can be accessed on the next page\n * load with the $_COOKIE or $HTTP_COOKIE_VARS arrays. Note, superglobals\n * such as $_COOKIE became available in PHP 4.1.0. Cookie values also exist\n * in $_REQUEST.\n * All the arguments except the name argument are optional. You may also\n * replace an argument with an empty string (\"\") in order to skip that\n * argument. Because the expire argument is integer, it cannot be skipped\n * with an empty string, use a zero (0) instead.\n *\n * See \273 Netscape cookie specification for specifics on how each\n * setcookie() parameter works\n *\n * @name       string  The name of the cookie.\n * @value      string  The value of the cookie. This value is stored on the\n *                     clients computer; do not store sensitive\n *                     information. Assuming the name is 'cookiename', this\n *                     value is retrieved through $_COOKIE['cookiename']\n * @expire     int     The time the cookie expires. This is a Unix\n *                     timestamp so is in number of seconds since the\n *                     epoch. In other words, you'll most likely set this\n *                     with the time() function plus the number of seconds\n *                     before you want it to expire. Or you might use\n *                     mktime(). time()+60*60*24*30 will set the cookie to\n *                     expire in 30 days. If set to 0, or omitted, the\n *                     cookie will expire at the end of the session (when\n *                     the browser closes).\n *\n *\n *\n *                     You may notice the expire parameter takes on a Unix\n *                     timestamp, as opposed to the date format Wdy,\n *                     DD-Mon-YYYY HH:MM:SS GMT, this is because PHP does\n *                     this conversion internally.\n *\n *                     expire is compared to the client's time which can\n *                     differ from server's time.\n * @path       string  The path on the server in which the cookie will be\n *                     available on. If set to '/', the cookie will be\n *                     available within the entire domain. If set to\n *                     '/foo/', the cookie will only be available within\n *                     the /foo/ directory and all sub-directories such as\n *                     /foo/bar/ of domain. The default value is the\n *                     current directory that the cookie is being set in.\n * @domain     string  The domain that the cookie is available. To make the\n *                     cookie available on all subdomains of example.com\n *                     then you'd set it to '.example.com'. The . is not\n *                     required but makes it compatible with more browsers.\n *                     Setting it to www.example.com will make the cookie\n *                     only available in the www subdomain. Refer to tail\n *                     matching in the \273 spec for details.\n * @secure     bool    Indicates that the cookie should only be transmitted\n *                     over a secure HTTPS connection from the client. When\n *                     set to TRUE, the cookie will only be set if a secure\n *                     connection exists. On the server-side, it's on the\n *                     programmer to send this kind of cookie only on\n *                     secure connection (e.g. with respect to\n *                     $_SERVER[\"HTTPS\"]).\n * @httponly   bool    When TRUE the cookie will be made accessible only\n *                     through the HTTP protocol. This means that the\n *                     cookie won't be accessible by scripting languages,\n *                     such as JavaScript. This setting can effectively\n *                     help to reduce identity theft through XSS attacks\n *                     (although it is not supported by all browsers).\n *                     Added in PHP 5.2.0. TRUE or FALSE\n *\n * @return     bool    If output exists prior to calling this function,\n *                     setcookie() will fail and return FALSE. If\n *                     setcookie() successfully runs, it will return TRUE.\n *                     This does not indicate whether the user accepted the\n *                     cookie.\n */",
"setrawcookie", T(Boolean), S(0), "name", T(String), NULL, S(0), NULL, S(0), "value", T(String), "N;", S(2), "null", S(0), "expire", T(Int64), "i:0;", S(4), "0", S(0), "path", T(String), "N;", S(2), "null", S(0), "domain", T(String), "N;", S(2), "null", S(0), "secure", T(Boolean), "b:0;", S(4), "false", S(0), "httponly", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.setrawcookie.php )\n *\n * setrawcookie() is exactly the same as setcookie() except that the\n * cookie value will not be automatically urlencoded when sent to the\n * browser.\n * For parameter information, see the setcookie() documentation.\n *\n * @name       string\n * @value      string\n * @expire     int\n * @path       string\n * @domain     string\n * @secure     bool\n * @httponly   bool\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"define_syslog_variables", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.define-syslog-variables.php )\n *\n * Initializes all variables used in the syslog functions.\n *\n */", 
"openlog", T(Boolean), S(0), "ident", T(String), NULL, S(0), NULL, S(0), "option", T(Int32), NULL, S(0), NULL, S(0), "facility", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openlog.php )\n *\n * openlog() opens a connection to the system logger for a program.\n *\n * The use of openlog() is optional. It will automatically be called by\n * syslog() if necessary, in which case ident will default to FALSE.\n *\n * @ident      string  The string ident is added to each message.\n * @option     int     The option argument is used to indicate what logging\n *                     options will be used when generating a log message.\n *                     openlog() Options Constant Description LOG_CONS if\n *                     there is an error while sending data to the system\n *                     logger, write directly to the system console\n *                     LOG_NDELAY open the connection to the logger\n *                     immediately LOG_ODELAY (default) delay opening the\n *                     connection until the first message is logged\n *                     LOG_PERROR print log message also to standard error\n *                     LOG_PID include PID with each message You can use\n *                     one or more of this options. When using multiple\n *                     options you need to OR them, i.e. to open the\n *                     connection immediately, write to the console and\n *                     include the PID in each message, you will use:\n *                     LOG_CONS | LOG_NDELAY | LOG_PID\n * @facility   int     The facility argument is used to specify what type\n *                     of program is logging the message. This allows you\n *                     to specify (in your machine's syslog configuration)\n *                     how messages coming from different facilities will\n *                     be handled. openlog() Facilities Constant\n *                     Description LOG_AUTH security/authorization messages\n *                     (use LOG_AUTHPRIV instead in systems where that\n *                     constant is defined) LOG_AUTHPRIV\n *                     security/authorization messages (private) LOG_CRON\n *                     clock daemon (cron and at) LOG_DAEMON other system\n *                     daemons LOG_KERN kernel messages LOG_LOCAL0 ...\n *                     LOG_LOCAL7 reserved for local use, these are not\n *                     available in Windows LOG_LPR line printer subsystem\n *                     LOG_MAIL mail subsystem LOG_NEWS USENET news\n *                     subsystem LOG_SYSLOG messages generated internally\n *                     by syslogd LOG_USER generic user-level messages\n *                     LOG_UUCP UUCP subsystem\n *\n *                     LOG_USER is the only valid log type under Windows\n *                     operating systems\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"closelog", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.closelog.php )\n *\n * closelog() closes the descriptor being used to write to the system\n * logger. The use of closelog() is optional.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"syslog", T(Boolean), S(0), "priority", T(Int32), NULL, S(0), NULL, S(0), "message", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.syslog.php )\n *\n * syslog() generates a log message that will be distributed by the system\n * logger.\n *\n * For information on setting up a user defined log handler, see the\n * syslog.conf (5) Unix manual page. More information on the syslog\n * facilities and option can be found in the man pages for syslog (3) on\n * Unix machines.\n *\n * @priority   int     priority is a combination of the facility and the\n *                     level. Possible values are: syslog() Priorities (in\n *                     descending order) Constant Description LOG_EMERG\n *                     system is unusable LOG_ALERT action must be taken\n *                     immediately LOG_CRIT critical conditions LOG_ERR\n *                     error conditions LOG_WARNING warning conditions\n *                     LOG_NOTICE normal, but significant, condition\n *                     LOG_INFO informational message LOG_DEBUG debug-level\n *                     message\n * @message    string  The message to send, except that the two characters\n *                     %m will be replaced by the error message string\n *                     (strerror) corresponding to the present value of\n *                     errno.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
