// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"posix_access", T(Boolean), S(0), "file", T(String), NULL, S(0), NULL, S(0), "mode", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-access.php )\n *\n * posix_access() checks the user's permission of a file.\n *\n * @file       string  The name of the file to be tested.\n * @mode       int     A mask consisting of one or more of POSIX_F_OK,\n *                     POSIX_R_OK, POSIX_W_OK and POSIX_X_OK.\n *\n *                     POSIX_R_OK, POSIX_W_OK and POSIX_X_OK request\n *                     checking whether the file exists and has read, write\n *                     and execute permissions, respectively. POSIX_F_OK\n *                     just requests checking for the existence of the\n *                     file.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"posix_ctermid", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-ctermid.php )\n *\n * Generates a string which is the pathname for the current controlling\n * terminal for the process. On error this will set errno, which can be\n * checked using posix_get_last_error()\n *\n * @return     string  Upon successful completion, returns string of the\n *                     pathname to the current controlling terminal.\n *                     Otherwise FALSE is returned and errno is set, which\n *                     can be checked with posix_get_last_error().\n */", 
"posix_get_last_error", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.posix-get-last-error.php )\n *\n * Retrieve the error number set by the last posix function that failed.\n * The system error message associated with the errno may be checked with\n * posix_strerror().\n *\n * @return     int     Returns the errno (error number) set by the last\n *                     posix function that failed. If no errors exist, 0 is\n *                     returned.\n */", 
"posix_getcwd", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getcwd.php )\n *\n * Gets the absolute pathname of the script's current working directory.\n * On error, it sets errno which can be checked using\n * posix_get_last_error()\n *\n * @return     string  Returns a string of the absolute pathname on\n *                     success. On error, returns FALSE and sets errno\n *                     which can be checked with posix_get_last_error().\n */", 
"posix_getegid", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getegid.php )\n *\n * Return the numeric effective group ID of the current process.\n *\n * @return     int     Returns an integer of the effective group ID.\n */", 
"posix_geteuid", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-geteuid.php )\n *\n * Return the numeric effective user ID of the current process. See also\n * posix_getpwuid() for information on how to convert this into a useable\n * username.\n *\n * @return     int     Returns the user id, as an integer\n */", 
"posix_getgid", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getgid.php )\n *\n * Return the numeric real group ID of the current process.\n *\n * @return     int     Returns the real group id, as an integer.\n */", 
"posix_getgrgid", T(Variant), S(0), "gid", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getgrgid.php )\n *\n * Gets information about a group provided its id.\n *\n * @gid        int     The group id.\n *\n * @return     mixed   The array elements returned are: The group\n *                     information array Element Description name The name\n *                     element contains the name of the group. This is a\n *                     short, usually less than 16 character \"handle\" of\n *                     the group, not the real, full name. passwd The\n *                     passwd element contains the group's password in an\n *                     encrypted format. Often, for example on a system\n *                     employing \"shadow\" passwords, an asterisk is\n *                     returned instead. gid Group ID, should be the same\n *                     as the gid parameter used when calling the function,\n *                     and hence redundant. members This consists of an\n *                     array of string's for all the members in the group.\n */",
"posix_getgrnam", T(Variant), S(0), "name", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getgrnam.php )\n *\n * Gets information about a group provided its name.\n *\n * @name       string\n *\n * @return     mixed   The array elements returned are: The group\n *                     information array Element Description name The name\n *                     element contains the name of the group. This is a\n *                     short, usually less than 16 character \"handle\" of\n *                     the group, not the real, full name. This should be\n *                     the same as the name parameter used when calling the\n *                     function, and hence redundant. passwd The passwd\n *                     element contains the group's password in an\n *                     encrypted format. Often, for example on a system\n *                     employing \"shadow\" passwords, an asterisk is\n *                     returned instead. gid Group ID of the group in\n *                     numeric form. members This consists of an array of\n *                     string's for all the members in the group.\n */",
"posix_getgroups", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getgroups.php )\n *\n * Gets the group set of the current process.\n *\n * @return     mixed   Returns an array of integers containing the numeric\n *                     group ids of the group set of the current process.\n */", 
"posix_getlogin", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getlogin.php )\n *\n * Returns the login name of the user owning the current process.\n *\n * @return     mixed   Returns the login name of the user, as a string.\n */", 
"posix_getpgid", T(Variant), S(0), "pid", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getpgid.php )\n *\n * Returns the process group identifier of the process pid or FALSE on\n * failure.\n *\n * @pid        int     The process id.\n *\n * @return     mixed   Returns the identifier, as an integer.\n */",
"posix_getpgrp", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getpgrp.php )\n *\n * Return the process group identifier of the current process.\n *\n * @return     int     Returns the identifier, as an integer.\n */", 
"posix_getpid", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getpid.php )\n *\n * Return the process identifier of the current process.\n *\n * @return     int     Returns the identifier, as an integer.\n */", 
"posix_getppid", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getppid.php )\n *\n * Return the process identifier of the parent process of the current\n * process.\n *\n * @return     int     Returns the identifier, as an integer.\n */", 
"posix_getpwnam", T(Variant), S(0), "username", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getpwnam.php )\n *\n * Returns an array of information about the given user.\n *\n * @username   string  An alphanumeric username.\n *\n * @return     mixed   On success an array with the following elements is\n *                     returned, else FALSE is returned: The user\n *                     information array Element Description name The name\n *                     element contains the username of the user. This is a\n *                     short, usually less than 16 character \"handle\" of\n *                     the user, not the real, full name. This should be\n *                     the same as the username parameter used when calling\n *                     the function, and hence redundant. passwd The passwd\n *                     element contains the user's password in an encrypted\n *                     format. Often, for example on a system employing\n *                     \"shadow\" passwords, an asterisk is returned instead.\n *                     uid User ID of the user in numeric form. gid The\n *                     group ID of the user. Use the function\n *                     posix_getgrgid() to resolve the group name and a\n *                     list of its members. gecos GECOS is an obsolete term\n *                     that refers to the finger information field on a\n *                     Honeywell batch processing system. The field,\n *                     however, lives on, and its contents have been\n *                     formalized by POSIX. The field contains a comma\n *                     separated list containing the user's full name,\n *                     office phone, office number, and home phone number.\n *                     On most systems, only the user's full name is\n *                     available. dir This element contains the absolute\n *                     path to the home directory of the user. shell The\n *                     shell element contains the absolute path to the\n *                     executable of the user's default shell.\n */",
"posix_getpwuid", T(Variant), S(0), "uid", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getpwuid.php )\n *\n * Returns an array of information about the user referenced by the given\n * user ID.\n *\n * @uid        int     The user identifier.\n *\n * @return     mixed   Returns an associative array with the following\n *                     elements: The user information array Element\n *                     Description name The name element contains the\n *                     username of the user. This is a short, usually less\n *                     than 16 character \"handle\" of the user, not the\n *                     real, full name. passwd The passwd element contains\n *                     the user's password in an encrypted format. Often,\n *                     for example on a system employing \"shadow\"\n *                     passwords, an asterisk is returned instead. uid User\n *                     ID, should be the same as the uid parameter used\n *                     when calling the function, and hence redundant. gid\n *                     The group ID of the user. Use the function\n *                     posix_getgrgid() to resolve the group name and a\n *                     list of its members. gecos GECOS is an obsolete term\n *                     that refers to the finger information field on a\n *                     Honeywell batch processing system. The field,\n *                     however, lives on, and its contents have been\n *                     formalized by POSIX. The field contains a comma\n *                     separated list containing the user's full name,\n *                     office phone, office number, and home phone number.\n *                     On most systems, only the user's full name is\n *                     available. dir This element contains the absolute\n *                     path to the home directory of the user. shell The\n *                     shell element contains the absolute path to the\n *                     executable of the user's default shell.\n */",
"posix_getrlimit", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getrlimit.php )\n *\n * posix_getrlimit() returns an array of information about the current\n * resource's soft and hard limits.\n *\n * Each resource has an associated soft and hard limit. The soft limit is\n * the value that the kernel enforces for the corresponding resource. The\n * hard limit acts as a ceiling for the soft limit. An unprivileged process\n * may only set its soft limit to a value from 0 to the hard limit, and\n * irreversibly lower its hard limit.\n *\n * @return     mixed   Returns an associative array of elements for each\n *                     limit that is defined. Each limit has a soft and a\n *                     hard limit. List of possible limits returned Limit\n *                     name Limit description core The maximum size of the\n *                     core file. When 0, not core files are created. When\n *                     core files are larger than this size, they will be\n *                     truncated at this size. totalmem The maximum size of\n *                     the memory of the process, in bytes. virtualmem The\n *                     maximum size of the virtual memory for the process,\n *                     in bytes. data The maximum size of the data segment\n *                     for the process, in bytes. stack The maximum size of\n *                     the process stack, in bytes. rss The maximum number\n *                     of virtual pages resident in RAM maxproc The maximum\n *                     number of processes that can be created for the real\n *                     user ID of the calling process. memlock The maximum\n *                     number of bytes of memory that may be locked into\n *                     RAM. cpu The amount of time the process is allowed\n *                     to use the CPU. filesize The maximum size of the\n *                     data segment for the process, in bytes. openfiles\n *                     One more than the maximum number of open file\n *                     descriptors.\n */", 
"posix_getsid", T(Variant), S(0), "pid", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getsid.php )\n *\n * Return the session id of the process pid. The session id of a process\n * is the process group id of the session leader.\n *\n * @pid        int     The process identifier. If set to 0, the current\n *                     process is assumed. If an invalid pid is specified,\n *                     then FALSE is returned and an error is set which can\n *                     be checked with posix_get_last_error().\n *\n * @return     mixed   Returns the identifier, as an integer.\n */",
"posix_getuid", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-getuid.php )\n *\n * Return the numeric real user ID of the current process.\n *\n * @return     int     Returns the user id, as an integer\n */", 
"posix_initgroups", T(Boolean), S(0), "name", T(String), NULL, S(0), NULL, S(0), "base_group_id", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-initgroups.php )\n *\n * Calculates the group access list for the user specified in name.\n *\n * @name       string  The user to calculate the list for.\n * @base_group_id\n *             int     Typically the group number from the password file.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"posix_isatty", T(Boolean), S(0), "fd", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-isatty.php )\n *\n * Determines if the file descriptor fd refers to a valid terminal type\n * device.\n *\n * @fd         mixed   The file descriptor.\n *\n * @return     bool    Returns TRUE if fd is an open descriptor connected\n *                     to a terminal and FALSE otherwise.\n */",
"posix_kill", T(Boolean), S(0), "pid", T(Int32), NULL, S(0), NULL, S(0), "sig", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-kill.php )\n *\n * Send the signal sig to the process with the process identifier pid.\n *\n * @pid        int     The process identifier.\n * @sig        int     One of the PCNTL signals constants.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"posix_mkfifo", T(Boolean), S(0), "pathname", T(String), NULL, S(0), NULL, S(0), "mode", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-mkfifo.php )\n *\n * posix_mkfifo() creates a special FIFO file which exists in the file\n * system and acts as a bidirectional communication endpoint for processes.\n *\n * @pathname   string  Path to the FIFO file.\n * @mode       int     The second parameter mode has to be given in octal\n *                     notation (e.g. 0644). The permission of the newly\n *                     created FIFO also depends on the setting of the\n *                     current umask(). The permissions of the created file\n *                     are (mode & ~umask).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"posix_mknod", T(Boolean), S(0), "pathname", T(String), NULL, S(0), NULL, S(0), "mode", T(Int32), NULL, S(0), NULL, S(0), "major", T(Int32), "i:0;", S(4), "0", S(0), "minor", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-mknod.php )\n *\n * Creates a special or ordinary file.\n *\n * @pathname   string  The file to create\n * @mode       int     This parameter is constructed by a bitwise OR\n *                     between file type (one of the following constants:\n *                     POSIX_S_IFREG, POSIX_S_IFCHR, POSIX_S_IFBLK,\n *                     POSIX_S_IFIFO or POSIX_S_IFSOCK) and permissions.\n * @major      int     The major device kernel identifier (required to pass\n *                     when using S_IFCHR or S_IFBLK).\n * @minor      int     The minor device kernel identifier.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"posix_setegid", T(Boolean), S(0), "gid", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-setegid.php )\n *\n * Set the effective group ID of the current process. This is a privileged\n * function and needs appropriate privileges (usually root) on the system\n * to be able to perform this function.\n *\n * @gid        int     The group id.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"posix_seteuid", T(Boolean), S(0), "uid", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-seteuid.php )\n *\n * Set the real user ID of the current process. This is a privileged\n * function and needs appropriate privileges (usually root) on the system\n * to be able to perform this function.\n *\n * @uid        int     The user id.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"posix_setgid", T(Boolean), S(0), "gid", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-setgid.php )\n *\n * Set the real group ID of the current process. This is a privileged\n * function and needs appropriate privileges (usually root) on the system\n * to be able to perform this function. The appropriate order of function\n * calls is posix_setgid() first, posix_setuid() last.\n *\n * If the caller is a super user, this will also set the effective group\n * id.\n *\n * @gid        int     The group id.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"posix_setpgid", T(Boolean), S(0), "pid", T(Int32), NULL, S(0), NULL, S(0), "pgid", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-setpgid.php )\n *\n * Let the process pid join the process group pgid.\n *\n * @pid        int     The process id.\n * @pgid       int     The process group id.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"posix_setsid", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-setsid.php )\n *\n * Make the current process a session leader.\n *\n * @return     int     Returns the session id, or -1 on errors.\n */", 
"posix_setuid", T(Boolean), S(0), "uid", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-setuid.php )\n *\n * Set the real user ID of the current process. This is a privileged\n * function that needs appropriate privileges (usually root) on the system\n * to be able to perform this function.\n *\n * @uid        int     The user id.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"posix_strerror", T(String), S(0), "errnum", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-strerror.php )\n *\n * Returns the POSIX system error message associated with the given errno.\n * You may get the errno parameter by calling posix_get_last_error().\n *\n * @errnum     int     A POSIX error number, returned by\n *                     posix_get_last_error(). If set to 0, then the string\n *                     \"Success\" is returned.\n *\n * @return     string  Returns the error message, as a string.\n */",
"posix_times", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-times.php )\n *\n * Gets information about the current CPU usage.\n *\n * @return     mixed   Returns a hash of strings with information about the\n *                     current process CPU usage. The indices of the hash\n *                     are: ticks - the number of clock ticks that have\n *                     elapsed since reboot. utime - user time used by the\n *                     current process. stime - system time used by the\n *                     current process. cutime - user time used by current\n *                     process and children. cstime - system time used by\n *                     current process and children.\n */", 
"posix_ttyname", T(Variant), S(0), "fd", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-ttyname.php )\n *\n * Returns a string for the absolute path to the current terminal device\n * that is open on the file descriptor fd.\n *\n * @fd         mixed   The file descriptor.\n *\n * @return     mixed   On success, returns a string of the absolute path of\n *                     the fd. On failure, returns FALSE\n */",
"posix_uname", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.posix-uname.php )\n *\n * Gets information about the system.\n *\n * Posix requires that assumptions must not be made about the format of\n * the values, e.g. the assumption that a release may contain three digits\n * or anything else returned by this function.\n *\n * @return     mixed   Returns a hash of strings with information about the\n *                     system. The indices of the hash are sysname -\n *                     operating system name (e.g. Linux) nodename - system\n *                     name (e.g. valiant) release - operating system\n *                     release (e.g. 2.2.10) version - operating system\n *                     version (e.g. #4 Tue Jul 20 17:01:36 MEST 1999)\n *                     machine - system architecture (e.g. i586) domainname\n *                     - DNS domainname (e.g. example.com)\n *\n *                     domainname is a GNU extension and not part of\n *                     POSIX.1, so this field is only available on GNU\n *                     systems or when using the GNU libc.\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
