// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"pdo_drivers", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pdo-drivers.php )\n *\n *\n * @return     vector\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2
"PDO", "", NULL, "__construct", T(Void), S(0), "dsn", T(String), NULL, S(0), NULL, S(0), "username", T(String), "N;", S(2), "null", S(0), "password", T(String), "N;", S(2), "null", S(0), "options", T(Array), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.construct.php )\n *\n *\n * @dsn        string\n * @username   string\n * @password   string\n * @options    map\n */", S(16384),"prepare", T(Variant), S(0), "statement", T(String), NULL, S(0), NULL, S(0), "options", T(Array), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.prepare.php )\n *\n * Prepares an SQL statement to be executed by the PDOStatement::execute()\n * method. The SQL statement can contain zero or more named (:name) or\n * question mark (\?) parameter markers for which real values will be\n * substituted when the statement is executed. You cannot use both named\n * and question mark parameter markers within the same SQL statement; pick\n * one or the other parameter style. Use these parameters to bind any\n * user-input, do not include the user-input directly in the query.\n *\n * You must include a unique parameter marker for each value you wish to\n * pass in to the statement when you call PDOStatement::execute(). You\n * cannot use a named parameter marker of the same name twice in a prepared\n * statement. You cannot bind multiple values to a single named parameter\n * in, for example, the IN() clause of an SQL statement.\n *\n * Calling PDO::prepare() and PDOStatement::execute() for statements that\n * will be issued multiple times with different parameter values optimizes\n * the performance of your application by allowing the driver to negotiate\n * client and/or server side caching of the query plan and meta\n * information, and helps to prevent SQL injection attacks by eliminating\n * the need to manually quote the parameters.\n *\n * PDO will emulate prepared statements/bound parameters for drivers that\n * do not natively support them, and can also rewrite named or question\n * mark style parameter markers to something more appropriate, if the\n * driver supports one style but not the other.\n *\n * @statement  string  This must be a valid SQL statement for the target\n *                     database server.\n * @options    map     This array holds one or more key=>value pairs to set\n *                     attribute values for the PDOStatement object that\n *                     this method returns. You would most commonly use\n *                     this to set the PDO::ATTR_CURSOR value to\n *                     PDO::CURSOR_SCROLL to request a scrollable cursor.\n *                     Some drivers have driver specific options that may\n *                     be set at prepare-time.\n *\n * @return     mixed   If the database server successfully prepares the\n *                     statement, PDO::prepare() returns a PDOStatement\n *                     object. If the database server cannot successfully\n *                     prepare the statement, PDO::prepare() returns FALSE\n *                     or emits PDOException (depending on error handling).\n *\n *                     Emulated prepared statements does not communicate\n *                     with the database server so PDO::prepare() does not\n *                     check the statement.\n */", S(16384),"begintransaction", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.begintransaction.php )\n *\n * Turns off autocommit mode. While autocommit mode is turned off, changes\n * made to the database via the PDO object instance are not committed until\n * you end the transaction by calling PDO::commit(). Calling\n * PDO::rollBack() will roll back all changes to the database and return\n * the connection to autocommit mode.\n *\n * Some databases, including MySQL, automatically issue an implicit COMMIT\n * when a database definition language (DDL) statement such as DROP TABLE\n * or CREATE TABLE is issued within a transaction. The implicit COMMIT will\n * prevent you from rolling back any other changes within the transaction\n * boundary.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"commit", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.commit.php )\n *\n * Commits a transaction, returning the database connection to autocommit\n * mode until the next call to PDO::beginTransaction() starts a new\n * transaction.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"rollback", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.rollback.php )\n *\n * Rolls back the current transaction, as initiated by\n * PDO::beginTransaction(). It is an error to call this method if no\n * transaction is active.\n *\n * If the database was set to autocommit mode, this function will restore\n * autocommit mode after it has rolled back the transaction.\n *\n * Some databases, including MySQL, automatically issue an implicit COMMIT\n * when a database definition language (DDL) statement such as DROP TABLE\n * or CREATE TABLE is issued within a transaction. The implicit COMMIT will\n * prevent you from rolling back any other changes within the transaction\n * boundary.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"setattribute", T(Boolean), S(0), "attribute", T(Int64), NULL, S(0), NULL, S(0), "value", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.setattribute.php )\n *\n * Sets an attribute on the database handle. Some of the available generic\n * attributes are listed below; some drivers may make use of additional\n * driver specific attributes.\n *\n * PDO::ATTR_CASE: Force column names to a specific case.\n *\n * PDO::CASE_LOWER: Force column names to lower case.\n *\n * PDO::CASE_NATURAL: Leave column names as returned by the database\n * driver.\n *\n * PDO::CASE_UPPER: Force column names to upper case. PDO::ATTR_ERRMODE:\n * Error reporting. PDO::ERRMODE_SILENT: Just set error codes.\n * PDO::ERRMODE_WARNING: Raise E_WARNING. PDO::ERRMODE_EXCEPTION: Throw\n * exceptions. PDO::ATTR_ORACLE_NULLS (available with all drivers, not just\n * Oracle): Conversion of NULL and empty strings. PDO::NULL_NATURAL: No\n * conversion. PDO::NULL_EMPTY_STRING: Empty string is converted to NULL.\n * PDO::NULL_TO_STRING: NULL is converted to an empty string.\n * PDO::ATTR_STRINGIFY_FETCHES: Convert numeric values to strings when\n * fetching. Requires bool. PDO::ATTR_STATEMENT_CLASS: Set user-supplied\n * statement class derived from PDOStatement. Cannot be used with\n * persistent PDO instances. Requires array(string classname, array(mixed\n * constructor_args)). PDO::ATTR_TIMEOUT: Specifies the timeout duration in\n * seconds. Not all drivers support this option, and it's meaning may\n * differ from driver to driver. For example, sqlite will wait for up to\n * this time value before giving up on obtaining an writable lock, but\n * other drivers may interpret this as a connect or a read timeout\n * interval. Requires int. PDO::ATTR_AUTOCOMMIT (available in OCI, Firebird\n * and MySQL): Whether to autocommit every single statement.\n * PDO::MYSQL_ATTR_USE_BUFFERED_QUERY (available in MySQL): Use buffered\n * queries.\n *\n * @attribute  int\n * @value      mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"getattribute", T(Variant), S(0), "attribute", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.getattribute.php )\n *\n * This function returns the value of a database connection attribute. To\n * retrieve PDOStatement attributes, refer to PDOStatement::getAttribute().\n *\n * Note that some database/driver combinations may not support all of the\n * database connection attributes.\n *\n * @attribute  int     One of the PDO::ATTR_* constants. The constants that\n *                     apply to database connections are as follows:\n *                     PDO::ATTR_AUTOCOMMIT PDO::ATTR_CASE\n *                     PDO::ATTR_CLIENT_VERSION PDO::ATTR_CONNECTION_STATUS\n *                     PDO::ATTR_DRIVER_NAME PDO::ATTR_ERRMODE\n *                     PDO::ATTR_ORACLE_NULLS PDO::ATTR_PERSISTENT\n *                     PDO::ATTR_PREFETCH PDO::ATTR_SERVER_INFO\n *                     PDO::ATTR_SERVER_VERSION PDO::ATTR_TIMEOUT\n *\n * @return     mixed   A successful call returns the value of the requested\n *                     PDO attribute. An unsuccessful call returns null.\n */", S(16384),"exec", T(Variant), S(0), "query", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.exec.php )\n *\n * PDO::exec() executes an SQL statement in a single function call,\n * returning the number of rows affected by the statement.\n *\n * PDO::exec() does not return results from a SELECT statement. For a\n * SELECT statement that you only need to issue once during your program,\n * consider issuing PDO::query(). For a statement that you need to issue\n * multiple times, prepare a PDOStatement object with PDO::prepare() and\n * issue the statement with PDOStatement::execute().\n *\n * @query      string  The SQL statement to prepare and execute.\n *\n *                     Data inside the query should be properly escaped.\n *\n * @return     mixed   PDO::exec() returns the number of rows that were\n *                     modified or deleted by the SQL statement you issued.\n *                     If no rows were affected, PDO::exec() returns 0.\n *                     WarningThis function may return Boolean FALSE, but\n *                     may also return a non-Boolean value which evaluates\n *                     to FALSE, such as 0 or \"\". Please read the section\n *                     on Booleans for more information. Use the ===\n *                     operator for testing the return value of this\n *                     function.\n *\n *                     The following example incorrectly relies on the\n *                     return value of PDO::exec(), wherein a statement\n *                     that affected 0 rows results in a call to die():\n */", S(16384),"lastinsertid", T(Variant), S(0), "seqname", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.lastinsertid.php )\n *\n * Returns the ID of the last inserted row, or the last value from a\n * sequence object, depending on the underlying driver. For example,\n * PDO_PGSQL() requires you to specify the name of a sequence object for\n * the name parameter.\n *\n * This method may not return a meaningful or consistent result across\n * different PDO drivers, because the underlying database may not even\n * support the notion of auto-increment fields or sequences.\n *\n * @seqname    string  Name of the sequence object from which the ID should\n *                     be returned.\n *\n * @return     mixed   If a sequence name was not specified for the name\n *                     parameter, PDO::lastInsertId() returns a string\n *                     representing the row ID of the last row that was\n *                     inserted into the database.\n *\n *                     If a sequence name was specified for the name\n *                     parameter, PDO::lastInsertId() returns a string\n *                     representing the last value retrieved from the\n *                     specified sequence object.\n *\n *                     If the PDO driver does not support this capability,\n *                     PDO::lastInsertId() triggers an IM001 SQLSTATE.\n */", S(16384),"errorcode", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.errorcode.php )\n *\n *\n * @return     mixed   Returns an SQLSTATE, a five characters alphanumeric\n *                     identifier defined in the ANSI SQL-92 standard.\n *                     Briefly, an SQLSTATE consists of a two characters\n *                     class value followed by a three characters subclass\n *                     value. A class value of 01 indicates a warning and\n *                     is accompanied by a return code of\n *                     SQL_SUCCESS_WITH_INFO. Class values other than '01',\n *                     except for the class 'IM', indicate an error. The\n *                     class 'IM' is specific to warnings and errors that\n *                     derive from the implementation of PDO (or perhaps\n *                     ODBC, if you're using the ODBC driver) itself. The\n *                     subclass value '000' in any class indicates that\n *                     there is no subclass for that SQLSTATE.\n *\n *                     PDO::errorCode() only retrieves error codes for\n *                     operations performed directly on the database\n *                     handle. If you create a PDOStatement object through\n *                     PDO::prepare() or PDO::query() and invoke an error\n *                     on the statement handle, PDO::errorCode() will not\n *                     reflect that error. You must call\n *                     PDOStatement::errorCode() to return the error code\n *                     for an operation performed on a particular statement\n *                     handle.\n *\n *                     Returns NULL if no operation has been run on the\n *                     database handle.\n */", S(16384),"errorinfo", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.errorinfo.php )\n *\n *\n * @return     vector  PDO::errorInfo() returns an array of error\n *                     information about the last operation performed by\n *                     this database handle. The array consists of the\n *                     following fields: Element Information 0 SQLSTATE\n *                     error code (a five characters alphanumeric\n *                     identifier defined in the ANSI SQL standard). 1\n *                     Driver-specific error code. 2 Driver-specific error\n *                     message.\n *\n *                     If the SQLSTATE error code is not set or there is\n *                     no driver-specific error, the elements following\n *                     element 0 will be set to NULL.\n *\n *                     PDO::errorInfo() only retrieves error information\n *                     for operations performed directly on the database\n *                     handle. If you create a PDOStatement object through\n *                     PDO::prepare() or PDO::query() and invoke an error\n *                     on the statement handle, PDO::errorInfo() will not\n *                     reflect the error from the statement handle. You\n *                     must call PDOStatement::errorInfo() to return the\n *                     error information for an operation performed on a\n *                     particular statement handle.\n */", S(16384),"query", T(Variant), S(0), "sql", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.query.php )\n *\n * PDO::query() executes an SQL statement in a single function call,\n * returning the result set (if any) returned by the statement as a\n * PDOStatement object.\n *\n * For a query that you need to issue multiple times, you will realize\n * better performance if you prepare a PDOStatement object using\n * PDO::prepare() and issue the statement with multiple calls to\n * PDOStatement::execute().\n *\n * If you do not fetch all of the data in a result set before issuing your\n * next call to PDO::query(), your call may fail. Call\n * PDOStatement::closeCursor() to release the database resources associated\n * with the PDOStatement object before issuing your next call to\n * PDO::query().\n *\n * Although this function is only documented as having a single parameter,\n * you may pass additional arguments to this function. They will be treated\n * as though you called PDOStatement::setFetchMode() on the resultant\n * statement object.\n *\n * @sql        string  The SQL statement to prepare and execute.\n *\n *                     Data inside the query should be properly escaped.\n *\n * @return     mixed   PDO::query() returns a PDOStatement object, or FALSE\n *                     on failure.\n */", S(16384),"quote", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "paramtype", T(Int64), "i:2;", S(4), "q_PDO$$PARAM_STR", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.quote.php )\n *\n * PDO::quote() places quotes around the input string (if required) and\n * escapes special characters within the input string, using a quoting\n * style appropriate to the underlying driver.\n *\n * If you are using this function to build SQL statements, you are\n * strongly recommended to use PDO::prepare() to prepare SQL statements\n * with bound parameters instead of using PDO::quote() to interpolate user\n * input into an SQL statement. Prepared statements with bound parameters\n * are not only more portable, more convenient, immune to SQL injection,\n * but are often much faster to execute than interpolated queries, as both\n * the server and client side can cache a compiled form of the query.\n *\n * Not all PDO drivers implement this method (notably PDO_ODBC). Consider\n * using prepared statements instead.\n *\n * @str        string  The string to be quoted.\n * @paramtype  int     Provides a data type hint for drivers that have\n *                     alternate quoting styles.\n *\n * @return     mixed   Returns a quoted string that is theoretically safe\n *                     to pass into an SQL statement. Returns FALSE if the\n *                     driver does not support quoting in this way.\n */", S(16384),"__wakeup", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.wakeup.php )\n *\n *\n * @return     mixed\n */", S(16384),"__sleep", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdo.sleep.php )\n *\n *\n * @return     mixed\n */", S(16384),"getavailabledrivers", T(Array), S(0), NULL, S(16896), "/**\n * ( excerpt from http://php.net/manual/en/pdo.getavailabledrivers.php )\n *\n * This function returns all currently available PDO drivers which can be\n * used in DSN parameter of PDO::__construct(). This is a static method.\n *\n * @return     vector  PDO::getAvailableDrivers() returns an array of PDO\n *                     driver names. If no drivers are available, it\n *                     returns an empty array.\n */", S(16896),NULL,NULL,"PARAM_BOOL", T(Int64),"PARAM_NULL", T(Int64),"PARAM_INT", T(Int64),"PARAM_STR", T(Int64),"PARAM_LOB", T(Int64),"PARAM_STMT", T(Int64),"PARAM_INPUT_OUTPUT", T(Int64),"PARAM_EVT_ALLOC", T(Int64),"PARAM_EVT_FREE", T(Int64),"PARAM_EVT_EXEC_PRE", T(Int64),"PARAM_EVT_EXEC_POST", T(Int64),"PARAM_EVT_FETCH_PRE", T(Int64),"PARAM_EVT_FETCH_POST", T(Int64),"PARAM_EVT_NORMALIZE", T(Int64),"FETCH_USE_DEFAULT", T(Int64),"FETCH_LAZY", T(Int64),"FETCH_ASSOC", T(Int64),"FETCH_NUM", T(Int64),"FETCH_BOTH", T(Int64),"FETCH_OBJ", T(Int64),"FETCH_BOUND", T(Int64),"FETCH_COLUMN", T(Int64),"FETCH_CLASS", T(Int64),"FETCH_INTO", T(Int64),"FETCH_FUNC", T(Int64),"FETCH_GROUP", T(Int64),"FETCH_UNIQUE", T(Int64),"FETCH_KEY_PAIR", T(Int64),"FETCH_CLASSTYPE", T(Int64),"FETCH_SERIALIZE", T(Int64),"FETCH_PROPS_LATE", T(Int64),"FETCH_NAMED", T(Int64),"ATTR_AUTOCOMMIT", T(Int64),"ATTR_PREFETCH", T(Int64),"ATTR_TIMEOUT", T(Int64),"ATTR_ERRMODE", T(Int64),"ATTR_SERVER_VERSION", T(Int64),"ATTR_CLIENT_VERSION", T(Int64),"ATTR_SERVER_INFO", T(Int64),"ATTR_CONNECTION_STATUS", T(Int64),"ATTR_CASE", T(Int64),"ATTR_CURSOR_NAME", T(Int64),"ATTR_CURSOR", T(Int64),"ATTR_ORACLE_NULLS", T(Int64),"ATTR_PERSISTENT", T(Int64),"ATTR_STATEMENT_CLASS", T(Int64),"ATTR_FETCH_TABLE_NAMES", T(Int64),"ATTR_FETCH_CATALOG_NAMES", T(Int64),"ATTR_DRIVER_NAME", T(Int64),"ATTR_STRINGIFY_FETCHES", T(Int64),"ATTR_MAX_COLUMN_LEN", T(Int64),"ATTR_EMULATE_PREPARES", T(Int64),"ATTR_DEFAULT_FETCH_MODE", T(Int64),"ERRMODE_SILENT", T(Int64),"ERRMODE_WARNING", T(Int64),"ERRMODE_EXCEPTION", T(Int64),"CASE_NATURAL", T(Int64),"CASE_LOWER", T(Int64),"CASE_UPPER", T(Int64),"NULL_NATURAL", T(Int64),"NULL_EMPTY_STRING", T(Int64),"NULL_TO_STRING", T(Int64),"ERR_NONE", T(String),"FETCH_ORI_NEXT", T(Int64),"FETCH_ORI_PRIOR", T(Int64),"FETCH_ORI_FIRST", T(Int64),"FETCH_ORI_LAST", T(Int64),"FETCH_ORI_ABS", T(Int64),"FETCH_ORI_REL", T(Int64),"CURSOR_FWDONLY", T(Int64),"CURSOR_SCROLL", T(Int64),"MYSQL_ATTR_USE_BUFFERED_QUERY", T(Int64),"MYSQL_ATTR_LOCAL_INFILE", T(Int64),"MYSQL_ATTR_MAX_BUFFER_SIZE", T(Int64),"MYSQL_ATTR_INIT_COMMAND", T(Int64),"MYSQL_ATTR_READ_DEFAULT_FILE", T(Int64),"MYSQL_ATTR_READ_DEFAULT_GROUP", T(Int64),"MYSQL_ATTR_COMPRESS", T(Int64),"MYSQL_ATTR_DIRECT_QUERY", T(Int64),"MYSQL_ATTR_FOUND_ROWS", T(Int64),"MYSQL_ATTR_IGNORE_SPACE", T(Int64),NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.pdo.php )\n *\n * Represents a connection between PHP and a database server.\n *\n */", "PDOStatement", "", "iterator",NULL, "__construct", T(Void), S(0), NULL, S(16512), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.construct.php )\n *\n *\n */", S(16512),"execute", T(Variant), S(0), "params", T(Array), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.execute.php )\n *\n * Execute the prepared statement. If the prepared statement included\n * parameter markers, you must either: PDOStatement::bindParam() to bind\n * PHP variables to the parameter markers: bound variables pass their value\n * as input and receive the output value, if any, of their associated\n * parameter markers\n *\n * @params     map     An array of values with as many elements as there\n *                     are bound parameters in the SQL statement being\n *                     executed. All values are treated as PDO::PARAM_STR.\n *\n *                     You cannot bind multiple values to a single\n *                     parameter; for example, you cannot bind two values\n *                     to a single named parameter in an IN() clause.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", S(16384),"fetch", T(Variant), S(0), "how", T(Int64), "i:0;", S(4), "0", S(0), "orientation", T(Int64), "i:0;", S(4), "q_PDO$$FETCH_ORI_NEXT", S(0), "offset", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.fetch.php )\n *\n * Fetches a row from a result set associated with a PDOStatement object.\n * The fetch_style parameter determines how PDO returns the row.\n *\n * @how        int     Controls how the next row will be returned to the\n *                     caller. This value must be one of the PDO::FETCH_*\n *                     constants, defaulting to PDO::FETCH_BOTH.\n *\n *                     PDO::FETCH_ASSOC: returns an array indexed by\n *                     column name as returned in your result set\n *\n *                     PDO::FETCH_BOTH (default): returns an array indexed\n *                     by both column name and 0-indexed column number as\n *                     returned in your result set\n *\n *                     PDO::FETCH_BOUND: returns TRUE and assigns the\n *                     values of the columns in your result set to the PHP\n *                     variables to which they were bound with the\n *                     PDOStatement::bindColumn() method\n *\n *                     PDO::FETCH_CLASS: returns a new instance of the\n *                     requested class, mapping the columns of the result\n *                     set to named properties in the class. If fetch_style\n *                     includes PDO::FETCH_CLASSTYPE (e.g. PDO::FETCH_CLASS\n *                     | PDO::FETCH_CLASSTYPE) then the name of the class\n *                     is determined from a value of the first column.\n *\n *                     PDO::FETCH_INTO: updates an existing instance of\n *                     the requested class, mapping the columns of the\n *                     result set to named properties in the class\n *\n *                     PDO::FETCH_LAZY: combines PDO::FETCH_BOTH and\n *                     PDO::FETCH_OBJ, creating the object variable names\n *                     as they are accessed\n *\n *                     PDO::FETCH_NUM: returns an array indexed by column\n *                     number as returned in your result set, starting at\n *                     column 0\n *\n *                     PDO::FETCH_OBJ: returns an anonymous object with\n *                     property names that correspond to the column names\n *                     returned in your result set\n * @orientation\n *             int     For a PDOStatement object representing a scrollable\n *                     cursor, this value determines which row will be\n *                     returned to the caller. This value must be one of\n *                     the PDO::FETCH_ORI_* constants, defaulting to\n *                     PDO::FETCH_ORI_NEXT. To request a scrollable cursor\n *                     for your PDOStatement object, you must set the\n *                     PDO::ATTR_CURSOR attribute to PDO::CURSOR_SCROLL\n *                     when you prepare the SQL statement with\n *                     PDO::prepare().\n * @offset     int     For a PDOStatement object representing a scrollable\n *                     cursor for which the cursor_orientation parameter is\n *                     set to PDO::FETCH_ORI_ABS, this value specifies the\n *                     absolute number of the row in the result set that\n *                     shall be fetched.\n *\n *                     For a PDOStatement object representing a scrollable\n *                     cursor for which the cursor_orientation parameter is\n *                     set to PDO::FETCH_ORI_REL, this value specifies the\n *                     row to fetch relative to the cursor position before\n *                     PDOStatement::fetch() was called.\n *\n * @return     mixed   The return value of this function on success depends\n *                     on the fetch type. In all cases, FALSE is returned\n *                     on failure.\n */", S(16384),"fetchobject", T(Variant), S(0), "class_name", T(String), "N;", S(2), "null", S(0), "ctor_args", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.fetchobject.php )\n *\n * Fetches the next row and returns it as an object. This function is an\n * alternative to PDOStatement::fetch() with PDO::FETCH_CLASS or\n * PDO::FETCH_OBJ style.\n *\n * @class_name string  Name of the created class.\n * @ctor_args  mixed   Elements of this array are passed to the\n *                     constructor.\n *\n * @return     mixed   Returns an instance of the required class with\n *                     property names that correspond to the column names\n *                     or FALSE on failure.\n */", S(16384),"fetchcolumn", T(Variant), S(0), "column_numner", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.fetchcolumn.php )\n *\n * Returns a single column from the next row of a result set or FALSE if\n * there are no more rows.\n *\n * @column_numner\n *             int     0-indexed number of the column you wish to retrieve\n *                     from the row. If no value is supplied,\n *                     PDOStatement::fetchColumn() fetches the first\n *                     column.\n *\n * @return     mixed   PDOStatement::fetchColumn() returns a single column\n *                     in the next row of a result set. Warning\n *\n *                     There is no way to return another column from the\n *                     same row if you use PDOStatement::fetchColumn() to\n *                     retrieve data.\n */", S(16384),"fetchall", T(Variant), S(0), "how", T(Int64), "i:0;", S(4), "0", S(0), "class_name", T(Variant), "N;", S(2), "null", S(0), "ctor_args", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.fetchall.php )\n *\n *\n * @how        int     Controls the contents of the returned array as\n *                     documented in PDOStatement::fetch().\n *\n *                     To return an array consisting of all values of a\n *                     single column from the result set, specify\n *                     PDO::FETCH_COLUMN. You can specify which column you\n *                     want with the column-index parameter.\n *\n *                     To fetch only the unique values of a single column\n *                     from the result set, bitwise-OR PDO::FETCH_COLUMN\n *                     with PDO::FETCH_UNIQUE.\n *\n *                     To return an associative array grouped by the\n *                     values of a specified column, bitwise-OR\n *                     PDO::FETCH_COLUMN with PDO::FETCH_GROUP.\n * @class_name mixed   Returns the indicated 0-indexed column when the\n *                     value of fetch_style is PDO::FETCH_COLUMN.\n * @ctor_args  mixed   Arguments of custom class constructor.\n *\n * @return     mixed   PDOStatement::fetchAll() returns an array containing\n *                     all of the remaining rows in the result set. The\n *                     array represents each row as either an array of\n *                     column values or an object with properties\n *                     corresponding to each column name.\n *\n *                     Using this method to fetch large result sets will\n *                     result in a heavy demand on system and possibly\n *                     network resources. Rather than retrieving all of the\n *                     data and manipulating it in PHP, consider using the\n *                     database server to manipulate the result sets. For\n *                     example, use the WHERE and SORT BY clauses in SQL to\n *                     restrict results before retrieving and processing\n *                     them with PHP.\n */", S(16384),"bindvalue", T(Boolean), S(0), "paramno", T(Variant), NULL, S(0), NULL, S(0), "param", T(Variant), NULL, S(0), NULL, S(0), "type", T(Int64), "i:2;", S(4), "q_PDO$$PARAM_STR", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.bindvalue.php )\n *\n * Binds a value to a corresponding named or question mark placeholder in\n * the SQL statement that was use to prepare the statement.\n *\n * @paramno    mixed   Parameter identifier. For a prepared statement using\n *                     named placeholders, this will be a parameter name of\n *                     the form :name. For a prepared statement using\n *                     question mark placeholders, this will be the\n *                     1-indexed position of the parameter.\n * @param      mixed   The value to bind to the parameter.\n * @type       int     Explicit data type for the parameter using the\n *                     PDO::PARAM_* constants.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"bindparam", T(Boolean), S(0), "paramno", T(Variant), NULL, S(0), NULL, S(0), "param", T(Variant), NULL, S(0), NULL, S(1), "type", T(Int64), "i:2;", S(4), "q_PDO$$PARAM_STR", S(0), "max_value_len", T(Int64), "i:0;", S(4), "0", S(0), "driver_params", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.bindparam.php )\n *\n * Binds a PHP variable to a corresponding named or question mark\n * placeholder in the SQL statement that was use to prepare the statement.\n * Unlike PDOStatement::bindValue(), the variable is bound as a reference\n * and will only be evaluated at the time that PDOStatement::execute() is\n * called.\n *\n * Most parameters are input parameters, that is, parameters that are used\n * in a read-only fashion to build up the query. Some drivers support the\n * invocation of stored procedures that return data as output parameters,\n * and some also as input/output parameters that both send in data and are\n * updated to receive it.\n *\n * @paramno    mixed   Parameter identifier. For a prepared statement using\n *                     named placeholders, this will be a parameter name of\n *                     the form :name. For a prepared statement using\n *                     question mark placeholders, this will be the\n *                     1-indexed position of the parameter.\n * @param      mixed   Name of the PHP variable to bind to the SQL\n *                     statement parameter.\n * @type       int     Explicit data type for the parameter using the\n *                     PDO::PARAM_* constants. To return an INOUT parameter\n *                     from a stored procedure, use the bitwise OR operator\n *                     to set the PDO::PARAM_INPUT_OUTPUT bits for the\n *                     data_type parameter.\n * @max_value_len\n *             int     Length of the data type. To indicate that a\n *                     parameter is an OUT parameter from a stored\n *                     procedure, you must explicitly set the length.\n * @driver_params\n *             mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"bindcolumn", T(Boolean), S(0), "paramno", T(Variant), NULL, S(0), NULL, S(0), "param", T(Variant), NULL, S(0), NULL, S(1), "type", T(Int64), "i:2;", S(4), "q_PDO$$PARAM_STR", S(0), "max_value_len", T(Int64), "i:0;", S(4), "0", S(0), "driver_params", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.bindcolumn.php )\n *\n * PDOStatement::bindColumn() arranges to have a particular variable bound\n * to a given column in the result-set from a query. Each call to\n * PDOStatement::fetch() or PDOStatement::fetchAll() will update all the\n * variables that are bound to columns.\n *\n * Since information about the columns is not always available to PDO\n * until the statement is executed, portable applications should call this\n * function after PDOStatement::execute().\n *\n * However, to be able to bind a LOB column as a stream when using the\n * PgSQL driver, applications should call this method before calling\n * PDOStatement::execute(), otherwise the large object OID will be returned\n * as an integer.\n *\n * @paramno    mixed   Number of the column (1-indexed) or name of the\n *                     column in the result set. If using the column name,\n *                     be aware that the name should match the case of the\n *                     column, as returned by the driver.\n * @param      mixed   Name of the PHP variable to which the column will be\n *                     bound.\n * @type       int     Data type of the parameter, specified by the\n *                     PDO::PARAM_* constants.\n * @max_value_len\n *             int     A hint for pre-allocation.\n * @driver_params\n *             mixed   Optional parameter(s) for the driver.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"rowcount", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.rowcount.php )\n *\n * PDOStatement::rowCount() returns the number of rows affected by the\n * last DELETE, INSERT, or UPDATE statement executed by the corresponding\n * PDOStatement object.\n *\n * If the last SQL statement executed by the associated PDOStatement was a\n * SELECT statement, some databases may return the number of rows returned\n * by that statement. However, this behaviour is not guaranteed for all\n * databases and should not be relied on for portable applications.\n *\n * @return     int     Returns the number of rows.\n */", S(16384),"errorcode", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.errorcode.php )\n *\n *\n * @return     mixed   Identical to PDO::errorCode(), except that\n *                     PDOStatement::errorCode() only retrieves error codes\n *                     for operations performed with PDOStatement objects.\n */", S(16384),"errorinfo", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.errorinfo.php )\n *\n *\n * @return     vector  PDOStatement::errorInfo() returns an array of error\n *                     information about the last operation performed by\n *                     this statement handle. The array consists of the\n *                     following fields: Element Information 0 SQLSTATE\n *                     error code (a five characters alphanumeric\n *                     identifier defined in the ANSI SQL standard). 1\n *                     Driver specific error code. 2 Driver specific error\n *                     message.\n */", S(16384),"setattribute", T(Variant), S(0), "attribute", T(Int64), NULL, S(0), NULL, S(0), "value", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.setattribute.php )\n *\n * Sets an attribute on the statement. Currently, no generic attributes\n * are set but only driver specific: PDO::ATTR_CURSOR_NAME (Firebird and\n * ODBC specific): Set the name of cursor for UPDATE ... WHERE CURRENT OF.\n *\n * @attribute  int\n * @value      mixed\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", S(16384),"getattribute", T(Variant), S(0), "attribute", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.getattribute.php )\n *\n * Gets an attribute of the statement. Currently, no generic attributes\n * exist but only driver specific: PDO::ATTR_CURSOR_NAME (Firebird and ODBC\n * specific): Get the name of cursor for UPDATE ... WHERE CURRENT OF.\n *\n * @attribute  int\n *\n * @return     mixed   Returns the attribute value.\n */", S(16384),"columncount", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.columncount.php )\n *\n * Use PDOStatement::columnCount() to return the number of columns in the\n * result set represented by the PDOStatement object.\n *\n * If the PDOStatement object was returned from PDO::query(), the column\n * count is immediately available.\n *\n * If the PDOStatement object was returned from PDO::prepare(), an\n * accurate column count will not be available until you invoke\n * PDOStatement::execute().\n *\n * @return     int     Returns the number of columns in the result set\n *                     represented by the PDOStatement object. If there is\n *                     no result set, PDOStatement::columnCount() returns\n *                     0.\n */", S(16384),"getcolumnmeta", T(Variant), S(0), "column", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.getcolumnmeta.php )\n *\n *\n * @column     int     The 0-indexed column in the result set.\n *\n * @return     mixed   Returns an associative array containing the\n *                     following values representing the metadata for a\n *                     single column: Column metadata Name Value\n *                     native_type The PHP native type used to represent\n *                     the column value. driver:decl_type The SQL type used\n *                     to represent the column value in the database. If\n *                     the column in the result set is the result of a\n *                     function, this value is not returned by\n *                     PDOStatement::getColumnMeta(). flags Any flags set\n *                     for this column. name The name of this column as\n *                     returned by the database. table The name of this\n *                     column's table as returned by the database. len The\n *                     length of this column. Normally -1 for types other\n *                     than floating point decimals. precision The numeric\n *                     precision of this column. Normally 0 for types other\n *                     than floating point decimals. pdo_type The type of\n *                     this column as represented by the PDO::PARAM_*\n *                     constants.\n *\n *                     Returns FALSE if the requested column does not\n *                     exist in the result set, or if no result set exists.\n */", S(16384),"setfetchmode", T(Boolean), S(0), "mode", T(Int64), NULL, S(0), NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.setfetchmode.php )\n *\n *\n * @mode       int     The fetch mode must be one of the PDO::FETCH_*\n *                     constants.\n *\n * @return     bool    Returns 1 on success or FALSE on failure.\n */", S(147456),"nextrowset", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.nextrowset.php )\n *\n * Some database servers support stored procedures that return more than\n * one rowset (also known as a result set). PDOStatement::nextRowset()\n * enables you to access the second and subsequent rowsets associated with\n * a PDOStatement object. Each rowset can have a different set of columns\n * from the preceding rowset.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"closecursor", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.closecursor.php )\n *\n * PDOStatement::closeCursor() frees up the connection to the server so\n * that other SQL statements may be issued, but leaves the statement in a\n * state that enables it to be executed again.\n *\n * This method is useful for database drivers that do not support\n * executing a PDOStatement object when a previously executed PDOStatement\n * object still has unfetched rows. If your database driver suffers from\n * this limitation, the problem may manifest itself in an out-of-sequence\n * error.\n *\n * PDOStatement::closeCursor() is implemented either as an optional driver\n * specific method (allowing for maximum efficiency), or as the generic PDO\n * fallback if no driver specific function is installed. The PDO generic\n * fallback is semantically the same as writing the following code in your\n * PHP script:\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", S(16384),"debugdumpparams", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.debugdumpparams.php\n * )\n *\n * Dumps the informations contained by a prepared statement directly on\n * the output. It will provide the SQL query in use, the number of\n * parameters used (Params), the list of parameters, with their name, type\n * (paramtype) as an integer, their key name or position, the value, and\n * the position in the query (if this is supported by the PDO driver,\n * otherwise, it will be -1).\n *\n * This is a debug function, which dump directly the data on the normal\n * output. TipAs with anything that outputs its result directly to the\n * browser, the output-control functions can be used to capture the output\n * of this function, and save it in a string (for example).\n *\n * This will only dumps the parameters in the statement at the moment of\n * the dump. Extra parameters are not stored in the statement, and not\n * displayed.\n *\n * @return     mixed   No value is returned.\n */", S(16384),"current", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.current.php )\n *\n *\n * @return     mixed\n */", S(16384),"key", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.key.php )\n *\n *\n * @return     mixed\n */", S(16384),"next", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.next.php )\n *\n *\n * @return     mixed\n */", S(16384),"rewind", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.rewind.php )\n *\n *\n * @return     mixed\n */", S(16384),"valid", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.valid.php )\n *\n *\n * @return     mixed\n */", S(16384),"__wakeup", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.wakeup.php )\n *\n *\n * @return     mixed\n */", S(16384),"__sleep", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/pdostatement.sleep.php )\n *\n *\n * @return     mixed\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.pdostatement.php )\n *\n * Represents a prepared statement and, after the statement is executed,\n * an associated result set.\n *\n */", 
#endif
