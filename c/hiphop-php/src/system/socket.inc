// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"socket_create", T(Variant), S(0), "domain", T(Int32), NULL, S(0), NULL, S(0), "type", T(Int32), NULL, S(0), NULL, S(0), "protocol", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-create.php )\n *\n * Creates and returns a socket resource, also referred to as an endpoint\n * of communication. A typical network connection is made up of 2 sockets,\n * one performing the role of the client, and another performing the role\n * of the server.\n *\n * @domain     int     The domain parameter specifies the protocol family\n *                     to be used by the socket. Available address/protocol\n *                     families Domain Description AF_INET IPv4 Internet\n *                     based protocols. TCP and UDP are common protocols of\n *                     this protocol family. AF_INET6 IPv6 Internet based\n *                     protocols. TCP and UDP are common protocols of this\n *                     protocol family. AF_UNIX Local communication\n *                     protocol family. High efficiency and low overhead\n *                     make it a great form of IPC (Interprocess\n *                     Communication).\n * @type       int     The type parameter selects the type of communication\n *                     to be used by the socket. Available socket types\n *                     Type Description SOCK_STREAM Provides sequenced,\n *                     reliable, full-duplex, connection-based byte\n *                     streams. An out-of-band data transmission mechanism\n *                     may be supported. The TCP protocol is based on this\n *                     socket type. SOCK_DGRAM Supports datagrams\n *                     (connectionless, unreliable messages of a fixed\n *                     maximum length). The UDP protocol is based on this\n *                     socket type. SOCK_SEQPACKET Provides a sequenced,\n *                     reliable, two-way connection-based data transmission\n *                     path for datagrams of fixed maximum length; a\n *                     consumer is required to read an entire packet with\n *                     each read call. SOCK_RAW Provides raw network\n *                     protocol access. This special type of socket can be\n *                     used to manually construct any type of protocol. A\n *                     common use for this socket type is to perform ICMP\n *                     requests (like ping). SOCK_RDM Provides a reliable\n *                     datagram layer that does not guarantee ordering.\n *                     This is most likely not implemented on your\n *                     operating system.\n * @protocol   int     The protocol parameter sets the specific protocol\n *                     within the specified domain to be used when\n *                     communicating on the returned socket. The proper\n *                     value can be retrieved by name by using\n *                     getprotobyname(). If the desired protocol is TCP, or\n *                     UDP the corresponding constants SOL_TCP, and SOL_UDP\n *                     can also be used. Common protocols Name Description\n *                     icmp The Internet Control Message Protocol is used\n *                     primarily by gateways and hosts to report errors in\n *                     datagram communication. The \"ping\" command (present\n *                     in most modern operating systems) is an example\n *                     application of ICMP. udp The User Datagram Protocol\n *                     is a connectionless, unreliable, protocol with fixed\n *                     record lengths. Due to these aspects, UDP requires a\n *                     minimum amount of protocol overhead. tcp The\n *                     Transmission Control Protocol is a reliable,\n *                     connection based, stream oriented, full duplex\n *                     protocol. TCP guarantees that all data packets will\n *                     be received in the order in which they were sent. If\n *                     any packet is somehow lost during communication, TCP\n *                     will automatically retransmit the packet until the\n *                     destination host acknowledges that packet. For\n *                     reliability and performance reasons, the TCP\n *                     implementation itself decides the appropriate octet\n *                     boundaries of the underlying datagram communication\n *                     layer. Therefore, TCP applications must allow for\n *                     the possibility of partial record transmission.\n *\n * @return     mixed   socket_create() returns a socket resource on\n *                     success, or FALSE on error. The actual error code\n *                     can be retrieved by calling socket_last_error().\n *                     This error code may be passed to socket_strerror()\n *                     to get a textual explanation of the error.\n */",
"socket_create_listen", T(Variant), S(0), "port", T(Int32), NULL, S(0), NULL, S(0), "backlog", T(Int32), "i:128;", S(6), "128", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.socket-create-listen.php )\n *\n * socket_create_listen() creates a new socket resource of type AF_INET\n * listening on all local interfaces on the given port waiting for new\n * connections.\n *\n * This function is meant to ease the task of creating a new socket which\n * only listens to accept new connections.\n *\n * @port       int     The port on which to listen on all interfaces.\n * @backlog    int     The backlog parameter defines the maximum length the\n *                     queue of pending connections may grow to. SOMAXCONN\n *                     may be passed as backlog parameter, see\n *                     socket_listen() for more information.\n *\n * @return     mixed   socket_create_listen() returns a new socket resource\n *                     on success or FALSE on error. The error code can be\n *                     retrieved with socket_last_error(). This code may be\n *                     passed to socket_strerror() to get a textual\n *                     explanation of the error.\n */",
"socket_create_pair", T(Boolean), S(0), "domain", T(Int32), NULL, S(0), NULL, S(0), "type", T(Int32), NULL, S(0), NULL, S(0), "protocol", T(Int32), NULL, S(0), NULL, S(0), "fd", T(Variant), NULL, S(0), NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-create-pair.php\n * )\n *\n * socket_create_pair() creates two connected and indistinguishable\n * sockets, and stores them in fd. This function is commonly used in IPC\n * (InterProcess Communication).\n *\n * @domain     int     The domain parameter specifies the protocol family\n *                     to be used by the socket. See socket_create() for\n *                     the full list.\n * @type       int     The type parameter selects the type of communication\n *                     to be used by the socket. See socket_create() for\n *                     the full list.\n * @protocol   int     The protocol parameter sets the specific protocol\n *                     within the specified domain to be used when\n *                     communicating on the returned socket. The proper\n *                     value can be retrieved by name by using\n *                     getprotobyname(). If the desired protocol is TCP, or\n *                     UDP the corresponding constants SOL_TCP, and SOL_UDP\n *                     can also be used.\n *\n *                     See socket_create() for the full list of supported\n *                     protocols.\n * @fd         mixed   Reference to an array in which the two socket\n *                     resources will be inserted.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"socket_get_option", T(Variant), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "level", T(Int32), NULL, S(0), NULL, S(0), "optname", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-get-option.php )\n *\n * The socket_get_option() function retrieves the value for the option\n * specified by the optname parameter for the specified socket.\n *\n * @socket     resource\n *\n * @level      int\n * @optname    int\n *\n * @return     mixed   Returns the value of the given option, or FALSE on\n *                     errors.\n */",
"socket_getpeername", T(Boolean), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "address", T(Variant), NULL, S(0), NULL, S(1), "port", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-getpeername.php\n * )\n *\n * Queries the remote side of the given socket which may either result in\n * host/port or in a Unix filesystem path, dependent on its type.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n * @address    mixed   If the given socket is of type AF_INET or AF_INET6,\n *                     socket_getpeername() will return the peers (remote)\n *                     IP address in appropriate notation (e.g. 127.0.0.1\n *                     or fe80::1) in the address parameter and, if the\n *                     optional port parameter is present, also the\n *                     associated port.\n *\n *                     If the given socket is of type AF_UNIX,\n *                     socket_getpeername() will return the Unix filesystem\n *                     path (e.g. /var/run/daemon.sock) in the address\n *                     parameter.\n * @port       mixed   If given, this will hold the port associated to\n *                     address.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n *                     socket_getpeername() may also return FALSE if the\n *                     socket type is not any of AF_INET, AF_INET6, or\n *                     AF_UNIX, in which case the last socket error code is\n *                     not updated.\n */",
"socket_getsockname", T(Boolean), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "address", T(Variant), NULL, S(0), NULL, S(1), "port", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-getsockname.php\n * )\n *\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n * @address    mixed   If the given socket is of type AF_INET or AF_INET6,\n *                     socket_getsockname() will return the local IP\n *                     address in appropriate notation (e.g. 127.0.0.1 or\n *                     fe80::1) in the address parameter and, if the\n *                     optional port parameter is present, also the\n *                     associated port.\n *\n *                     If the given socket is of type AF_UNIX,\n *                     socket_getsockname() will return the Unix filesystem\n *                     path (e.g. /var/run/daemon.sock) in the address\n *                     parameter.\n * @port       mixed   If provided, this will hold the associated port.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n *                     socket_getsockname() may also return FALSE if the\n *                     socket type is not any of AF_INET, AF_INET6, or\n *                     AF_UNIX, in which case the last socket error code is\n *                     not updated.\n */",
"socket_set_block", T(Boolean), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-set-block.php )\n *\n * The socket_set_block() function removes the O_NONBLOCK flag on the\n * socket specified by the socket parameter.\n *\n * When an operation (e.g. receive, send, connect, accept, ...) is\n * performed on a blocking socket, the script will pause its execution\n * until it receives a signal or it can perform the operation.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"socket_set_nonblock", T(Boolean), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-set-nonblock.php\n * )\n *\n * The socket_set_nonblock() function sets the O_NONBLOCK flag on the\n * socket specified by the socket parameter.\n *\n * When an operation (e.g. receive, send, connect, accept, ...) is\n * performed on a non-blocking socket, the script not pause its execution\n * until it receives a signal or it can perform the operation. Rather, if\n * the operation would result in a block, the called function will fail.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"socket_set_option", T(Boolean), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "level", T(Int32), NULL, S(0), NULL, S(0), "optname", T(Int32), NULL, S(0), NULL, S(0), "optval", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-set-option.php )\n *\n * The socket_set_option() function sets the option specified by the\n * optname parameter, at the specified protocol level, to the value pointed\n * to by the optval parameter for the socket.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n * @level      int     The level parameter specifies the protocol level at\n *                     which the option resides. For example, to retrieve\n *                     options at the socket level, a level parameter of\n *                     SOL_SOCKET would be used. Other levels, such as TCP,\n *                     can be used by specifying the protocol number of\n *                     that level. Protocol numbers can be found by using\n *                     the getprotobyname() function.\n * @optname    int     The available socket options are the same as those\n *                     for the socket_get_option() function.\n * @optval     mixed   The option value.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"socket_connect", T(Boolean), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "address", T(String), NULL, S(0), NULL, S(0), "port", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-connect.php )\n *\n * Initiate a connection to address using the socket resource socket,\n * which must be a valid socket resource created with socket_create().\n *\n * @socket     resource\n *\n * @address    string  The address parameter is either an IPv4 address in\n *                     dotted-quad notation (e.g. 127.0.0.1) if socket is\n *                     AF_INET, a valid IPv6 address (e.g. ::1) if IPv6\n *                     support is enabled and socket is AF_INET6 or the\n *                     pathname of a Unix domain socket, if the socket\n *                     family is AF_UNIX.\n * @port       int     The port parameter is only used and is mandatory\n *                     when connecting to an AF_INET or an AF_INET6 socket,\n *                     and designates the port on the remote host to which\n *                     a connection should be made.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     error code can be retrieved with\n *                     socket_last_error(). This code may be passed to\n *                     socket_strerror() to get a textual explanation of\n *                     the error.\n *\n *                     If the socket is non-blocking then this function\n *                     returns FALSE with an error Operation now in\n *                     progress.\n */",
"socket_bind", T(Boolean), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "address", T(String), NULL, S(0), NULL, S(0), "port", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-bind.php )\n *\n * Binds the name given in address to the socket described by socket. This\n * has to be done before a connection is be established using\n * socket_connect() or socket_listen().\n *\n * @socket     resource\n *                     A valid socket resource created with\n *                     socket_create().\n * @address    string  If the socket is of the AF_INET family, the address\n *                     is an IP in dotted-quad notation (e.g. 127.0.0.1).\n *\n *                     If the socket is of the AF_UNIX family, the address\n *                     is the path of a Unix-domain socket (e.g.\n *                     /tmp/my.sock).\n * @port       int     The port parameter is only used when connecting to\n *                     an AF_INET socket, and designates the port on the\n *                     remote host to which a connection should be made.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n *\n *                     The error code can be retrieved with\n *                     socket_last_error(). This code may be passed to\n *                     socket_strerror() to get a textual explanation of\n *                     the error.\n */",
"socket_listen", T(Boolean), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "backlog", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-listen.php )\n *\n * After the socket socket has been created using socket_create() and\n * bound to a name with socket_bind(), it may be told to listen for\n * incoming connections on socket.\n *\n * socket_listen() is applicable only to sockets of type SOCK_STREAM or\n * SOCK_SEQPACKET.\n *\n * @socket     resource\n *                     A valid socket resource created with\n *                     socket_create().\n * @backlog    int     A maximum of backlog incoming connections will be\n *                     queued for processing. If a connection request\n *                     arrives with the queue full the client may receive\n *                     an error with an indication of ECONNREFUSED, or, if\n *                     the underlying protocol supports retransmission, the\n *                     request may be ignored so that retries may succeed.\n *\n *                     The maximum number passed to the backlog parameter\n *                     highly depends on the underlying platform. On Linux,\n *                     it is silently truncated to SOMAXCONN. On win32, if\n *                     passed SOMAXCONN, the underlying service provider\n *                     responsible for the socket will set the backlog to a\n *                     maximum reasonable value. There is no standard\n *                     provision to find out the actual backlog value on\n *                     this platform.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. The\n *                     error code can be retrieved with\n *                     socket_last_error(). This code may be passed to\n *                     socket_strerror() to get a textual explanation of\n *                     the error.\n */",
"socket_select", T(Variant), S(0), "read", T(Variant), NULL, S(0), NULL, S(1), "write", T(Variant), NULL, S(0), NULL, S(1), "except", T(Variant), NULL, S(0), NULL, S(1), "vtv_sec", T(Variant), NULL, S(0), NULL, S(0), "tv_usec", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-select.php )\n *\n * socket_select() accepts arrays of sockets and waits for them to change\n * status. Those coming with BSD sockets background will recognize that\n * those socket resource arrays are in fact the so-called file descriptor\n * sets. Three independent arrays of socket resources are watched.\n * Warning\n *\n * On exit, the arrays are modified to indicate which socket resource\n * actually changed status.\n *\n * You do not need to pass every array to socket_select(). You can leave\n * it out and use an empty array or NULL instead. Also do not forget that\n * those arrays are passed by reference and will be modified after\n * socket_select() returns.\n *\n * Due a limitation in the current Zend Engine it is not possible to pass\n * a constant modifier like NULL directly as a parameter to a function\n * which expects this parameter to be passed by reference. Instead use a\n * temporary variable or an expression with the leftmost member being a\n * temporary variable: Example #1 Using NULL with socket_select()\n *\n * @read       mixed   The sockets listed in the read array will be watched\n *                     to see if characters become available for reading\n *                     (more precisely, to see if a read will not block -\n *                     in particular, a socket resource is also ready on\n *                     end-of-file, in which case a socket_read() will\n *                     return a zero length string).\n * @write      mixed   The sockets listed in the write array will be\n *                     watched to see if a write will not block.\n * @except     mixed   The sockets listed in the except array will be\n *                     watched for exceptions.\n * @vtv_sec    mixed   The tv_sec and tv_usec together form the timeout\n *                     parameter. The timeout is an upper bound on the\n *                     amount of time elapsed before socket_select()\n *                     return. tv_sec may be zero , causing socket_select()\n *                     to return immediately. This is useful for polling.\n *                     If tv_sec is NULL (no timeout), socket_select() can\n *                     block indefinitely.\n * @tv_usec    int\n *\n * @return     mixed   On success socket_select() returns the number of\n *                     socket resources contained in the modified arrays,\n *                     which may be zero if the timeout expires before\n *                     anything interesting happens. On error FALSE is\n *                     returned. The error code can be retrieved with\n *                     socket_last_error().\n *\n *                     Be sure to use the === operator when checking for\n *                     an error. Since the socket_select() may return 0 the\n *                     comparison with == would evaluate to TRUE: Example\n *                     #2 Understanding socket_select()'s result\n */",
"socket_server", T(Variant), S(0), "hostname", T(String), NULL, S(0), NULL, S(0), "port", T(Int32), "i:-1;", S(5), "-1", S(0), "errnum", T(Variant), "N;", S(2), "null", S(1), "errstr", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-server.php )\n *\n *\n * @hostname   string\n * @port       int\n * @errnum     mixed\n * @errstr     mixed\n *\n * @return     mixed\n */",
"socket_accept", T(Variant), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-accept.php )\n *\n * After the socket socket has been created using socket_create(), bound\n * to a name with socket_bind(), and told to listen for connections with\n * socket_listen(), this function will accept incoming connections on that\n * socket. Once a successful connection is made, a new socket resource is\n * returned, which may be used for communication. If there are multiple\n * connections queued on the socket, the first will be used. If there are\n * no pending connections, socket_accept() will block until a connection\n * becomes present. If socket has been made non-blocking using\n * socket_set_blocking() or socket_set_nonblock(), FALSE will be returned.\n *\n * The socket resource returned by socket_accept() may not be used to\n * accept new connections. The original listening socket socket, however,\n * remains open and may be reused.\n *\n * @socket     resource\n *                     A valid socket resource created with\n *                     socket_create().\n *\n * @return     mixed   Returns a new socket resource on success, or FALSE\n *                     on error. The actual error code can be retrieved by\n *                     calling socket_last_error(). This error code may be\n *                     passed to socket_strerror() to get a textual\n *                     explanation of the error.\n */",
"socket_read", T(Variant), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "length", T(Int32), NULL, S(0), NULL, S(0), "type", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-read.php )\n *\n * The function socket_read() reads from the socket resource socket\n * created by the socket_create() or socket_accept() functions.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n * @length     int     The maximum number of bytes read is specified by the\n *                     length parameter. Otherwise you can use \\r, \\n, or\n *                     \\0 to end reading (depending on the type parameter,\n *                     see below).\n * @type       int     Optional type parameter is a named constant:\n *                     PHP_BINARY_READ (Default) - use the system recv()\n *                     function. Safe for reading binary data.\n *                     PHP_NORMAL_READ - reading stops at \\n or \\r.\n *\n * @return     mixed   socket_read() returns the data as a string on\n *                     success, or FALSE on error (including if the remote\n *                     host has closed the connection). The error code can\n *                     be retrieved with socket_last_error(). This code may\n *                     be passed to socket_strerror() to get a textual\n *                     representation of the error.\n *\n *                     socket_read() returns a zero length string (\"\")\n *                     when there is no more data to read.\n */",
"socket_write", T(Variant), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "buffer", T(String), NULL, S(0), NULL, S(0), "length", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-write.php )\n *\n * The function socket_write() writes to the socket from the given buffer.\n *\n * @socket     resource\n *\n * @buffer     string  The buffer to be written.\n * @length     int     The optional parameter length can specify an\n *                     alternate length of bytes written to the socket. If\n *                     this length is greater then the buffer length, it is\n *                     silently truncated to the length of the buffer.\n *\n * @return     mixed   Returns the number of bytes successfully written to\n *                     the socket or FALSE on failure. The error code can\n *                     be retrieved with socket_last_error(). This code may\n *                     be passed to socket_strerror() to get a textual\n *                     explanation of the error.\n *\n *                     It is perfectly valid for socket_write() to return\n *                     zero which means no bytes have been written. Be sure\n *                     to use the === operator to check for FALSE in case\n *                     of an error.\n */",
"socket_send", T(Variant), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "buf", T(String), NULL, S(0), NULL, S(0), "len", T(Int32), NULL, S(0), NULL, S(0), "flags", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-send.php )\n *\n * The function socket_send() sends len bytes to the socket socket from\n * buf.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n * @buf        string  A buffer containing the data that will be sent to\n *                     the remote host.\n * @len        int     The number of bytes that will be sent to the remote\n *                     host from buf.\n * @flags      int     The value of flags can be any combination of the\n *                     following flags, joined with the binary OR (|)\n *                     operator. Possible values for flags MSG_OOB Send OOB\n *                     (out-of-band) data. MSG_EOR Indicate a record mark.\n *                     The sent data completes the record. MSG_EOF Close\n *                     the sender side of the socket and include an\n *                     appropriate notification of this at the end of the\n *                     sent data. The sent data completes the transaction.\n *                     MSG_DONTROUTE Bypass routing, use direct interface.\n *\n * @return     mixed   socket_send() returns the number of bytes sent, or\n *                     FALSE on error.\n */",
"socket_sendto", T(Variant), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "buf", T(String), NULL, S(0), NULL, S(0), "len", T(Int32), NULL, S(0), NULL, S(0), "flags", T(Int32), NULL, S(0), NULL, S(0), "addr", T(String), NULL, S(0), NULL, S(0), "port", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-sendto.php )\n *\n * The function socket_sendto() sends len bytes from buf through the\n * socket socket to the port at the address addr.\n *\n * @socket     resource\n *                     A valid socket resource created using\n *                     socket_create().\n * @buf        string  The sent data will be taken from buffer buf.\n * @len        int     len bytes from buf will be sent.\n * @flags      int     The value of flags can be any combination of the\n *                     following flags, joined with the binary OR (|)\n *                     operator. Possible values for flags MSG_OOB Send OOB\n *                     (out-of-band) data. MSG_EOR Indicate a record mark.\n *                     The sent data completes the record. MSG_EOF Close\n *                     the sender side of the socket and include an\n *                     appropriate notification of this at the end of the\n *                     sent data. The sent data completes the transaction.\n *                     MSG_DONTROUTE Bypass routing, use direct interface.\n * @addr       string  IP address of the remote host.\n * @port       int     port is the remote port number at which the data\n *                     will be sent.\n *\n * @return     mixed   socket_sendto() returns the number of bytes sent to\n *                     the remote host, or FALSE if an error occurred.\n */",
"socket_recv", T(Variant), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "buf", T(Variant), NULL, S(0), NULL, S(1), "len", T(Int32), NULL, S(0), NULL, S(0), "flags", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-recv.php )\n *\n * The socket_recv() function receives len bytes of data in buf from\n * socket. socket_recv() can be used to gather data from connected sockets.\n * Additionally, one or more flags can be specified to modify the behaviour\n * of the function.\n *\n * buf is passed by reference, so it must be specified as a variable in\n * the argument list. Data read from socket by socket_recv() will be\n * returned in buf.\n *\n * @socket     resource\n *                     The socket must be a socket resource previously\n *                     created by socket_create().\n * @buf        mixed   The data received will be fetched to the variable\n *                     specified with buf. If an error occurs, if the\n *                     connection is reset, or if no data is available, buf\n *                     will be set to NULL.\n * @len        int     Up to len bytes will be fetched from remote host.\n * @flags      int     The value of flags can be any combination of the\n *                     following flags, joined with the binary OR (|)\n *                     operator. Possible values for flags Flag Description\n *                     MSG_OOB Process out-of-band data. MSG_PEEK Receive\n *                     data from the beginning of the receive queue without\n *                     removing it from the queue. MSG_WAITALL Block until\n *                     at least len are received. However, if a signal is\n *                     caught or the remote host disconnects, the function\n *                     may return less data. MSG_DONTWAIT With this flag\n *                     set, the function returns even if it would normally\n *                     have blocked.\n *\n * @return     mixed   socket_recv() returns the number of bytes received,\n *                     or FALSE if there was an error. The actual error\n *                     code can be retrieved by calling\n *                     socket_last_error(). This error code may be passed\n *                     to socket_strerror() to get a textual explanation of\n *                     the error.\n */",
"socket_recvfrom", T(Variant), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "buf", T(Variant), NULL, S(0), NULL, S(1), "len", T(Int32), NULL, S(0), NULL, S(0), "flags", T(Int32), NULL, S(0), NULL, S(0), "name", T(Variant), NULL, S(0), NULL, S(1), "port", T(Variant), "i:0;", S(4), "0", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-recvfrom.php )\n *\n * The socket_recvfrom() function receives len bytes of data in buf from\n * name on port port (if the socket is not of type AF_UNIX) using socket.\n * socket_recvfrom() can be used to gather data from both connected and\n * unconnected sockets. Additionally, one or more flags can be specified to\n * modify the behaviour of the function.\n *\n * The name and port must be passed by reference. If the socket is not\n * connection-oriented, name will be set to the internet protocol address\n * of the remote host or the path to the UNIX socket. If the socket is\n * connection-oriented, name is NULL. Additionally, the port will contain\n * the port of the remote host in the case of an unconnected AF_INET or\n * AF_INET6 socket.\n *\n * @socket     resource\n *                     The socket must be a socket resource previously\n *                     created by socket_create().\n * @buf        mixed   The data received will be fetched to the variable\n *                     specified with buf.\n * @len        int     Up to len bytes will be fetched from remote host.\n * @flags      int     The value of flags can be any combination of the\n *                     following flags, joined with the binary OR (|)\n *                     operator. Possible values for flags Flag Description\n *                     MSG_OOB Process out-of-band data. MSG_PEEK Receive\n *                     data from the beginning of the receive queue without\n *                     removing it from the queue. MSG_WAITALL Block until\n *                     at least len are received. However, if a signal is\n *                     caught or the remote host disconnects, the function\n *                     may return less data. MSG_DONTWAIT With this flag\n *                     set, the function returns even if it would normally\n *                     have blocked.\n * @name       mixed   If the socket is of the type AF_UNIX type, name is\n *                     the path to the file. Else, for unconnected sockets,\n *                     name is the IP address of, the remote host, or NULL\n *                     if the socket is connection-oriented.\n * @port       mixed   This argument only applies to AF_INET and AF_INET6\n *                     sockets, and specifies the remote port from which\n *                     the data is received. If the socket is\n *                     connection-oriented, port will be NULL.\n *\n * @return     mixed   socket_recvfrom() returns the number of bytes\n *                     received, or FALSE if there was an error. The actual\n *                     error code can be retrieved by calling\n *                     socket_last_error(). This error code may be passed\n *                     to socket_strerror() to get a textual explanation of\n *                     the error.\n */",
"socket_shutdown", T(Boolean), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "how", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-shutdown.php )\n *\n * The socket_shutdown() function allows you to stop incoming, outgoing or\n * all data (the default) from being sent through the socket\n *\n * @socket     resource\n *                     A valid socket resource created with\n *                     socket_create().\n * @how        int     The value of how can be one of the following:\n *                     possible values for how 0 Shutdown socket reading 1\n *                     Shutdown socket writing 2 Shutdown socket reading\n *                     and writing\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"socket_close", T(Void), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-close.php )\n *\n * socket_close() closes the socket resource given by socket. This\n * function is specific to sockets and cannot be used on any other type of\n * resources.\n *\n * @socket     resource\n *                     A valid socket resource created with socket_create()\n *                     or socket_accept().\n *\n * @return     mixed   No value is returned.\n */",
"socket_strerror", T(String), S(0), "errnum", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-strerror.php )\n *\n * socket_strerror() takes as its errno parameter a socket error code as\n * returned by socket_last_error() and returns the corresponding\n * explanatory text.\n *\n * Although the error messages generated by the socket extension are in\n * English, the system messages retrieved with this function will appear\n * depending on the current locale (LC_MESSAGES).\n *\n * @errnum     int     A valid socket error number, likely produced by\n *                     socket_last_error().\n *\n * @return     string  Returns the error message associated with the errno\n *                     parameter.\n */",
"socket_last_error", T(Int64), S(0), "socket", T(Object), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-last-error.php )\n *\n * If a socket resource is passed to this function, the last error which\n * occurred on this particular socket is returned. If the socket resource\n * is omitted, the error code of the last failed socket function is\n * returned. The latter is particularly helpful for functions like\n * socket_create() which don't return a socket on failure and\n * socket_select() which can fail for reasons not directly tied to a\n * particular socket. The error code is suitable to be fed to\n * socket_strerror() which returns a string describing the given error\n * code.\n *\n * @socket     resource\n *                     A valid socket resource created with\n *                     socket_create().\n *\n * @return     int     This function returns a socket error code.\n */",
"socket_clear_error", T(Void), S(0), "socket", T(Object), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.socket-clear-error.php\n * )\n *\n * This function clears the error code on the given socket or the global\n * last socket error if no socket is specified.\n *\n * This function allows explicitly resetting the error code value either\n * of a socket or of the extension global last error code. This may be\n * useful to detect within a part of the application if an error occurred\n * or not.\n *\n * @socket     resource\n *                     A valid socket resource created with\n *                     socket_create().\n *\n * @return     mixed   No value is returned.\n */",
"getaddrinfo", T(Variant), S(0), "host", T(String), NULL, S(0), NULL, S(0), "port", T(String), NULL, S(0), NULL, S(0), "family", T(Int32), "i:0;", S(4), "0", S(0), "socktype", T(Int32), "i:0;", S(4), "0", S(0), "protocol", T(Int32), "i:0;", S(4), "0", S(0), "flags", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getaddrinfo.php )\n *\n *\n * @host       string\n * @port       string\n * @family     int\n * @socktype   int\n * @protocol   int\n * @flags      int\n *\n * @return     mixed\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
