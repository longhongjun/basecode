// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"is_bool", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-bool.php )\n *\n * Finds whether the given variable is a boolean.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is a boolean, FALSE otherwise.\n */",
"is_int", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-int.php )\n *\n * Finds whether the type of the given variable is integer.\n *\n * To test if a variable is a number or a numeric string (such as form\n * input, which is always a string), you must use is_numeric().\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is an integer, FALSE otherwise.\n */",
"is_integer", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-integer.php )\n *\n *\n * @var        mixed\n *\n * @return     bool\n */",
"is_long", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-long.php )\n *\n *\n * @var        mixed\n *\n * @return     bool\n */",
"is_double", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-double.php )\n *\n *\n * @var        mixed\n *\n * @return     bool\n */",
"is_float", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-float.php )\n *\n * Finds whether the type of the given variable is float.\n *\n * To test if a variable is a number or a numeric string (such as form\n * input, which is always a string), you must use is_numeric().\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is a float, FALSE otherwise.\n */",
"is_numeric", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-numeric.php )\n *\n * Finds whether the given variable is numeric. Numeric strings consist of\n * optional sign, any number of digits, optional decimal part and optional\n * exponential part. Thus +0123.45e6 is a valid numeric value. Hexadecimal\n * notation (0xFF) is allowed too but only without sign, decimal and\n * exponential part.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is a number or a numeric string,\n *                     FALSE otherwise.\n */",
"is_real", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-real.php )\n *\n *\n * @var        mixed\n *\n * @return     bool\n */",
"is_string", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-string.php )\n *\n * Finds whether the type given variable is string.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is of type string, FALSE\n *                     otherwise.\n */",
"is_scalar", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-scalar.php )\n *\n * Finds whether the given variable is a scalar.\n *\n * Scalar variables are those containing an integer, float, string or\n * boolean. Types array, object and resource are not scalar.\n *\n * is_scalar() does not consider resource type values to be scalar as\n * resources are abstract datatypes which are currently based on integers.\n * This implementation detail should not be relied upon, as it may change.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is a scalar FALSE otherwise.\n */",
"is_array", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-array.php )\n *\n * Finds whether the given variable is an array.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is an array, FALSE otherwise.\n */",
"is_object", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-object.php )\n *\n * Finds whether the given variable is an object.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is an object, FALSE otherwise.\n */",
"is_resource", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-resource.php )\n *\n * Finds whether the given variable is a resource.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is a resource, FALSE otherwise.\n */",
"is_null", T(Boolean), S(0), "var", T(Some), NULL, S(0), NULL, S(0), NULL, S(7356416), "/**\n * ( excerpt from http://php.net/manual/en/function.is-null.php )\n *\n * Finds whether the given variable is NULL.\n *\n * @var        mixed   The variable being evaluated.\n *\n * @return     bool    Returns TRUE if var is null, FALSE otherwise.\n */",
"gettype", T(String), S(0), "v", T(Some), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gettype.php )\n *\n * Returns the type of the PHP variable var. Warning Never use gettype()\n * to test for a certain type, since the returned string may be subject to\n * change in a future version. In addition, it is slow too, as it involves\n * string comparison. Instead, use the is_* functions.\n *\n * @v          mixed   The variable being type checked.\n *\n * @return     string  Possibles values for the returned string are:\n *                     \"boolean\" \"integer\" \"double\" (for historical reasons\n *                     \"double\" is returned in case of a float, and not\n *                     simply \"float\") \"string\" \"array\" \"object\" \"resource\"\n *                     \"NULL\" \"unknown type\"\n */",
"get_resource_type", T(String), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-resource-type.php )\n *\n * This function gets the type of the given resource.\n *\n * @handle     resource\n *                     The evaluated resource handle.\n *\n * @return     string  If the given handle is a resource, this function\n *                     will return a string representing its type. If the\n *                     type is not identified by this function, the return\n *                     value will be the string Unknown.\n *\n *                     This function will return FALSE and generate an\n *                     error if handle is not a resource.\n */",
"intval", T(Int64), S(0), "v", T(Some), NULL, S(0), NULL, S(0), "base", T(Int64), "i:10;", S(5), "10", S(0), NULL, S(5259264), "/**\n * ( excerpt from http://php.net/manual/en/function.intval.php )\n *\n * Returns the integer value of var, using the specified base for the\n * conversion (the default is base 10). intval() should not be used on\n * objects, as doing so will emit an E_NOTICE level error and return 1.\n *\n * @v          mixed   The scalar value being converted to an integer\n * @base       int     The base for the conversion\n *\n * @return     int     The integer value of var on success, or 0 on\n *                     failure. Empty arrays and objects return 0,\n *                     non-empty arrays and objects return 1.\n *\n *                     The maximum value depends on the system. 32 bit\n *                     systems have a maximum signed integer range of\n *                     -2147483648 to 2147483647. So for example on such a\n *                     system, intval('1000000000000') will return\n *                     2147483647. The maximum signed integer value for 64\n *                     bit systems is 9223372036854775807.\n *\n *                     Strings will most likely return 0 although this\n *                     depends on the leftmost characters of the string.\n *                     The common rules of integer casting apply.\n */",
"doubleval", T(Double), S(0), "v", T(Some), NULL, S(0), NULL, S(0), NULL, S(5259264), "/**\n * ( excerpt from http://php.net/manual/en/function.doubleval.php )\n *\n *\n * @v          mixed\n *\n * @return     float\n */",
"floatval", T(Double), S(0), "v", T(Some), NULL, S(0), NULL, S(0), NULL, S(5259264), "/**\n * ( excerpt from http://php.net/manual/en/function.floatval.php )\n *\n * Gets the float value of var.\n *\n * @v          mixed   May be any scalar type. floatval() should not be\n *                     used on objects, as doing so will emit an E_NOTICE\n *                     level error and return 1.\n *\n * @return     float   The float value of the given variable. Empty arrays\n *                     return 0, non-empty arrays return 1.\n */",
"strval", T(String), S(0), "v", T(Some), NULL, S(0), NULL, S(0), NULL, S(5259264), "/**\n * ( excerpt from http://php.net/manual/en/function.strval.php )\n *\n *\n * @v          mixed   The variable that is being converted to a string.\n *\n *                     var may be any scalar type or an object that\n *                     implements the __toString method. You cannot use\n *                     strval() on arrays or on objects that do not\n *                     implement the __toString method.\n *\n * @return     string  The string value of var.\n */",
"settype", T(Boolean), S(0), "var", T(Variant), NULL, S(0), NULL, S(1), "type", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.settype.php )\n *\n * Set the type of variable var to type.\n *\n * @var        mixed   The variable being converted.\n * @type       string  Possibles values of type are: \"boolean\" (or, since\n *                     PHP 4.2.0, \"bool\") \"integer\" (or, since PHP 4.2.0,\n *                     \"int\") \"float\" (only possible since PHP 4.2.0, for\n *                     older versions use the deprecated variant \"double\")\n *                     \"string\" \"array\" \"object\" \"null\" (since PHP 4.2.0)\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"print_r", T(Variant), S(0), "expression", T(Some), NULL, S(0), NULL, S(0), "ret", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.print-r.php )\n *\n * print_r() displays information about a variable in a way that's\n * readable by humans.\n *\n * print_r(), var_dump() and var_export() will also show protected and\n * private properties of objects with PHP 5. Static class members will not\n * be shown.\n *\n * Remember that print_r() will move the array pointer to the end. Use\n * reset() to bring it back to beginning.\n *\n * @expression mixed   The expression to be printed.\n * @ret        bool    If you would like to capture the output of\n *                     print_r(), use the return parameter. When this\n *                     parameter is set to TRUE, print_r() will return the\n *                     information rather than print it.\n *\n * @return     mixed   If given a string, integer or float, the value\n *                     itself will be printed. If given an array, values\n *                     will be presented in a format that shows keys and\n *                     elements. Similar notation is used for objects.\n *\n *                     When the return parameter is TRUE, this function\n *                     will return a string. Otherwise, the return value is\n *                     TRUE.\n */",
"var_export", T(Variant), S(0), "expression", T(Some), NULL, S(0), NULL, S(0), "ret", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.var-export.php )\n *\n *\n * @expression mixed   The variable you want to export.\n * @ret        bool    If used and set to TRUE, var_export() will return\n *                     the variable representation instead of outputing it.\n *\n *                     This function uses internal output buffering with\n *                     this parameter so it can not be used inside an\n *                     ob_start() callback function.\n *\n * @return     mixed   Returns the variable representation when the return\n *                     parameter is used and evaluates to TRUE. Otherwise,\n *                     this function will return NULL.\n */",
"var_dump", T(Void), S(0), "expression", T(Some), NULL, S(0), NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.var-dump.php )\n *\n *\n * @expression mixed   The variable you want to export.\n *\n * @return     mixed   No value is returned.\n */",
"debug_zval_dump", T(Void), S(0), "variable", T(Some), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.debug-zval-dump.php )\n *\n * Dumps a string representation of an internal zend value to output.\n *\n * @variable   mixed   The variable being evaluated.\n *\n * @return     mixed   No value is returned.\n */",
"serialize", T(String), S(0), "value", T(Some), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.serialize.php )\n *\n * Generates a storable representation of a value\n *\n * This is useful for storing or passing PHP values around without losing\n * their type and structure.\n *\n * To make the serialized string into a PHP value again, use\n * unserialize().\n *\n * @value      mixed   The value to be serialized. serialize() handles all\n *                     types, except the resource-type. You can even\n *                     serialize() arrays that contain references to\n *                     itself. Circular references inside the array/object\n *                     you are serializing will also be stored. Any other\n *                     reference will be lost.\n *\n *                     When serializing objects, PHP will attempt to call\n *                     the member function __sleep prior to serialization.\n *                     This is to allow the object to do any last minute\n *                     clean-up, etc. prior to being serialized. Likewise,\n *                     when the object is restored using unserialize() the\n *                     __wakeup member function is called.\n *\n *                     Object's private members have the class name\n *                     prepended to the member name; protected members have\n *                     a '*' prepended to the member name. These prepended\n *                     values have null bytes on either side.\n *\n * @return     string  Returns a string containing a byte-stream\n *                     representation of value that can be stored anywhere.\n */",
"unserialize", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.unserialize.php )\n *\n *\n * @str        string  The serialized string.\n *\n *                     If the variable being unserialized is an object,\n *                     after successfully reconstructing the object PHP\n *                     will automatically attempt to call the __wakeup()\n *                     member function (if it exists).\n *\n *                     unserialize_callback_func directive\n *\n *                     It's possible to set a callback-function which will\n *                     be called, if an undefined class should be\n *                     instantiated during unserializing. (to prevent\n *                     getting an incomplete object\n *                     \"__PHP_Incomplete_Class\".) Use your php.ini,\n *                     ini_set() or .htaccess to define\n *                     'unserialize_callback_func'. Everytime an undefined\n *                     class should be instantiated, it'll be called. To\n *                     disable this feature just empty this setting.\n *\n * @return     mixed   The converted value is returned, and can be a\n *                     boolean, integer, float, string, array or object.\n *\n *                     In case the passed string is not unserializeable,\n *                     FALSE is returned and E_NOTICE is issued.\n */",
"get_defined_vars", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-defined-vars.php )\n *\n * This function returns a multidimensional array containing a list of all\n * defined variables, be them environment, server or user-defined\n * variables, within the scope that get_defined_vars() is called.\n *\n * @return     map     A multidimensional array with all the variables.\n */", 
"import_request_variables", T(Boolean), S(0), "types", T(String), NULL, S(0), NULL, S(0), "prefix", T(String), "s:0:\"\";", S(7), "\"\"", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.import-request-variables.php )\n *\n * Imports GET/POST/Cookie variables into the global scope. It is useful\n * if you disabled register_globals, but would like to see some variables\n * in the global scope.\n *\n * If you're interested in importing other variables into the global\n * scope, such as $_SERVER, consider using extract().\n *\n * @types      string  Using the types parameter, you can specify which\n *                     request variables to import. You can use 'G', 'P'\n *                     and 'C' characters respectively for GET, POST and\n *                     Cookie. These characters are not case sensitive, so\n *                     you can also use any combination of 'g', 'p' and\n *                     'c'. POST includes the POST uploaded file\n *                     information.\n *\n *                     Note that the order of the letters matters, as when\n *                     using \"GP\", the POST variables will overwrite GET\n *                     variables with the same name. Any other letters than\n *                     GPC are discarded.\n * @prefix     string  Variable name prefix, prepended before all\n *                     variable's name imported into the global scope. So\n *                     if you have a GET value named \"userid\", and provide\n *                     a prefix \"pref_\", then you'll get a global variable\n *                     named $pref_userid.\n *\n *                     Although the prefix parameter is optional, you will\n *                     get an E_NOTICE level error if you specify no\n *                     prefix, or specify an empty string as a prefix. This\n *                     is a possible security hazard. Notice level errors\n *                     are not displayed using the default error reporting\n *                     level.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"extract", T(Int64), S(0), "var_array", T(Array), NULL, S(0), NULL, S(0), "extract_type", T(Int32), "i:0;", S(4), "EXTR_OVERWRITE", S(0), "prefix", T(String), "s:0:\"\";", S(7), "\"\"", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.extract.php )\n *\n * Import variables from an array into the current symbol table.\n *\n * Checks each key to see whether it has a valid variable name. It also\n * checks for collisions with existing variables in the symbol table.\n *\n * @var_array  map     An associative array. This function treats keys as\n *                     variable names and values as variable values. For\n *                     each key/value pair it will create a variable in the\n *                     current symbol table, subject to extract_type and\n *                     prefix parameters.\n *\n *                     You must use an associative array; a numerically\n *                     indexed array will not produce results unless you\n *                     use EXTR_PREFIX_ALL or EXTR_PREFIX_INVALID.\n * @extract_type\n *             int     The way invalid/numeric keys and collisions are\n *                     treated is determined by the extract_type. It can be\n *                     one of the following values: EXTR_OVERWRITE If there\n *                     is a collision, overwrite the existing variable.\n * @prefix     string  If there is a collision, don't overwrite the\n *                     existing variable.\n *\n * @return     int     Returns the number of variables successfully\n *                     imported into the symbol table.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
