// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"fopen", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "mode", T(String), NULL, S(0), NULL, S(0), "use_include_path", T(Boolean), "b:0;", S(4), "false", S(0), "context", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fopen.php )\n *\n * fopen() binds a named resource, specified by filename, to a stream.\n *\n * @filename   string\n * @mode       string\n * @use_include_path\n *             bool\n * @context    mixed\n *\n * @return     mixed   Returns a file pointer resource on success, or FALSE\n *                     on error.\n */",
"popen", T(Variant), S(0), "command", T(String), NULL, S(0), NULL, S(0), "mode", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.popen.php )\n *\n * Opens a pipe to a process executed by forking the command given by\n * command.\n *\n * @command    string  The command\n * @mode       string  The mode\n *\n * @return     mixed   Returns a file pointer identical to that returned by\n *                     fopen(), except that it is unidirectional (may only\n *                     be used for reading or writing) and must be closed\n *                     with pclose(). This pointer may be used with\n *                     fgets(), fgetss(), and fwrite().\n *\n *                     If an error occurs, returns FALSE.\n */",
"fclose", T(Boolean), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fclose.php )\n *\n * The file pointed to by handle is closed.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"pclose", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pclose.php )\n *\n * Closes a file pointer to a pipe opened by popen().\n *\n * @handle     resource\n *                     The file pointer must be valid, and must have been\n *                     returned by a successful call to popen().\n *\n * @return     mixed   Returns the termination status of the process that\n *                     was run.\n */",
"fseek", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "offset", T(Int64), NULL, S(0), NULL, S(0), "whence", T(Int64), "i:0;", S(4), "SEEK_SET", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fseek.php )\n *\n * Sets the file position indicator for the file referenced by handle. The\n * new position, measured in bytes from the beginning of the file, is\n * obtained by adding offset to the position specified by whence.\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n * @offset     int     The offset.\n *\n *                     To move to a position before the end-of-file, you\n *                     need to pass a negative value in offset and set\n *                     whence to SEEK_END.\n * @whence     int     whence values are: SEEK_SET - Set position equal to\n *                     offset bytes. SEEK_CUR - Set position to current\n *                     location plus offset. SEEK_END - Set position to\n *                     end-of-file plus offset.\n *\n * @return     mixed   Upon success, returns 0; otherwise, returns -1. Note\n *                     that seeking past EOF is not considered an error.\n */",
"rewind", T(Boolean), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.rewind.php )\n *\n * Sets the file position indicator for handle to the beginning of the\n * file stream.\n *\n * If you have opened the file in append (\"a\" or \"a+\") mode, any data you\n * write to the file will always be appended, regardless of the file\n * position.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ftell", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ftell.php )\n *\n * Returns the position of the file pointer referenced by handle.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or popen().\n *                     ftell() gives undefined results for append-only\n *                     streams (opened with \"a\" flag).\n *\n * @return     mixed   Returns the position of the file pointer referenced\n *                     by handle as an integer; i.e., its offset into the\n *                     file stream.\n *\n *                     If an error occurs, returns FALSE.\n */",
"feof", T(Boolean), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.feof.php )\n *\n * Tests for end-of-file on a file pointer.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n *\n * @return     bool    Returns TRUE if the file pointer is at EOF or an\n *                     error occurs (including socket timeout); otherwise\n *                     returns FALSE.\n */",
"fstat", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fstat.php )\n *\n * Gathers the statistics of the file opened by the file pointer handle.\n * This function is similar to the stat() function except that it operates\n * on an open file pointer instead of a filename.\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n *\n * @return     mixed   Returns an array with the statistics of the file;\n *                     the format of the array is described in detail on\n *                     the stat() manual page.\n */",
"fread", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "length", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fread.php )\n *\n * fread() reads up to length bytes from the file pointer referenced by\n * handle. Reading stops as soon as one of the following conditions is met:\n * length bytes have been read EOF (end of file) is reached a packet\n * becomes available (for network streams) 8192 bytes have been read (after\n * opening userspace stream)\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n * @length     int     Up to length number of bytes read.\n *\n * @return     mixed   Returns the read string or FALSE on failure.\n */",
"fgetc", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fgetc.php )\n *\n * Gets a character from the given file pointer.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n *\n * @return     mixed   Returns a string containing a single character read\n *                     from the file pointed to by handle. Returns FALSE on\n *                     EOF. WarningThis function may return Boolean FALSE,\n *                     but may also return a non-Boolean value which\n *                     evaluates to FALSE, such as 0 or \"\". Please read the\n *                     section on Booleans for more information. Use the\n *                     === operator for testing the return value of this\n *                     function.\n */",
"fgets", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "length", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fgets.php )\n *\n * Gets a line from file pointer.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n * @length     int     Reading ends when length - 1 bytes have been read,\n *                     on a newline (which is included in the return\n *                     value), or on EOF (whichever comes first). If no\n *                     length is specified, it will keep reading from the\n *                     stream until it reaches the end of the line.\n *\n *                     Until PHP 4.3.0, omitting it would assume 1024 as\n *                     the line length. If the majority of the lines in the\n *                     file are all larger than 8KB, it is more resource\n *                     efficient for your script to specify the maximum\n *                     line length.\n *\n * @return     mixed   Returns a string of up to length - 1 bytes read from\n *                     the file pointed to by handle.\n *\n *                     If an error occurs, returns FALSE.\n */",
"fgetss", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "length", T(Int64), "i:0;", S(4), "0", S(0), "allowable_tags", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fgetss.php )\n *\n * Identical to fgets(), except that fgetss() attempts to strip any NUL\n * bytes, HTML and PHP tags from the text it reads.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n * @length     int     Length of the data to be retrieved.\n * @allowable_tags\n *             string  You can use the optional third parameter to specify\n *                     tags which should not be stripped.\n *\n * @return     mixed   Returns a string of up to length - 1 bytes read from\n *                     the file pointed to by handle, with all HTML and PHP\n *                     code stripped.\n *\n *                     If an error occurs, returns FALSE.\n */",
"fscanf", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "format", T(String), NULL, S(0), NULL, S(0), NULL, S(278528), "/**\n * ( excerpt from http://php.net/manual/en/function.fscanf.php )\n *\n * The function fscanf() is similar to sscanf(), but it takes its input\n * from a file associated with handle and interprets the input according to\n * the specified format, which is described in the documentation for\n * sprintf().\n *\n * Any whitespace in the format string matches any whitespace in the input\n * stream. This means that even a tab \\t in the format string can match a\n * single space character in the input stream.\n *\n * Each call to fscanf() reads one line from the file.\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n * @format     string  The specified format as described in the sprintf()\n *                     documentation.\n *\n * @return     mixed   If only two parameters were passed to this function,\n *                     the values parsed will be returned as an array.\n *                     Otherwise, if optional parameters are passed, the\n *                     function will return the number of assigned values.\n *                     The optional parameters must be passed by reference.\n */",
"fpassthru", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fpassthru.php )\n *\n * Reads to EOF on the given file pointer from the current position and\n * writes the results to the output buffer.\n *\n * You may need to call rewind() to reset the file pointer to the\n * beginning of the file if you have already written data to the file.\n *\n * If you just want to dump the contents of a file to the output buffer,\n * without first modifying it or seeking to a particular offset, you may\n * want to use the readfile(), which saves you the fopen() call.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n *\n * @return     mixed   If an error occurs, fpassthru() returns FALSE.\n *                     Otherwise, fpassthru() returns the number of\n *                     characters read from handle and passed through to\n *                     the output.\n */",
"fwrite", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "length", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fwrite.php )\n *\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n * @data       string  The string that is to be written.\n * @length     int     If the length argument is given, writing will stop\n *                     after length bytes have been written or the end of\n *                     string is reached, whichever comes first.\n *\n *                     Note that if the length argument is given, then the\n *                     magic_quotes_runtime configuration option will be\n *                     ignored and no slashes will be stripped from string.\n *\n * @return     mixed   fwrite() returns the number of bytes written, or\n *                     FALSE on error.\n */",
"fputs", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "length", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fputs.php )\n *\n *\n * @handle     resource\n *\n * @data       string\n * @length     int\n *\n * @return     mixed\n */",
"fprintf", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "format", T(String), NULL, S(0), NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.fprintf.php )\n *\n * Write a string produced according to format to the stream resource\n * specified by handle.\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n * @format     string  See sprintf() for a description of format.\n *\n * @return     mixed   Returns the length of the string written.\n */",
"vfprintf", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "format", T(String), NULL, S(0), NULL, S(0), "args", T(Array), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.vfprintf.php )\n *\n * Write a string produced according to format to the stream resource\n * specified by handle.\n *\n * Operates as fprintf() but accepts an array of arguments, rather than a\n * variable number of arguments.\n *\n * @handle     resource\n *\n * @format     string  See sprintf() for a description of format.\n * @args       vector\n *\n * @return     mixed   Returns the length of the outputted string.\n */",
"fflush", T(Boolean), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fflush.php )\n *\n * This function forces a write of all buffered output to the resource\n * pointed to by the file handle.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ftruncate", T(Boolean), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "size", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ftruncate.php )\n *\n * Takes the filepointer, handle, and truncates the file to length, size.\n *\n * @handle     resource\n *                     The file pointer.\n *\n *                     The handle must be open for writing.\n * @size       int     The size to truncate to.\n *\n *                     If size is larger than the file then the file is\n *                     extended with null bytes.\n *\n *                     If size is smaller than the file then the file is\n *                     truncated to that size.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"flock", T(Boolean), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "operation", T(Int32), NULL, S(0), NULL, S(0), "wouldblock", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.flock.php )\n *\n * flock() allows you to perform a simple reader/writer model which can be\n * used on virtually every platform (including most Unix derivatives and\n * even Windows).\n *\n * On versions of PHP before 5.3.2, the lock is released also by fclose()\n * (which is also called automatically when script finished).\n *\n * PHP supports a portable way of locking complete files in an advisory\n * way (which means all accessing programs have to use the same way of\n * locking or it will not work). By default, this function will block until\n * the requested lock is acquired; this may be controlled (on non-Windows\n * platforms) with the LOCK_NB option documented below.\n *\n * @handle     resource\n *                     resource that is typically created using fopen().\n * @operation  int     operation is one of the following: LOCK_SH to\n *                     acquire a shared lock (reader). LOCK_EX to acquire\n *                     an exclusive lock (writer). LOCK_UN to release a\n *                     lock (shared or exclusive).\n *\n *                     It is also possible to add LOCK_NB as a bitmask to\n *                     one of the above operations if you don't want\n *                     flock() to block while locking. (not supported on\n *                     Windows)\n * @wouldblock mixed   The optional third argument is set to TRUE if the\n *                     lock would block (EWOULDBLOCK errno condition). (not\n *                     supported on Windows)\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"fputcsv", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "fields", T(Array), NULL, S(0), NULL, S(0), "delimiter", T(String), "s:1:\",\";", S(8), "\",\"", S(0), "enclosure", T(String), "s:1:\"\"\";", S(8), "\"\\\"\"", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fputcsv.php )\n *\n * fputcsv() formats a line (passed as a fields array) as CSV and write it\n * (terminated by a newline) to the specified file handle.\n *\n * @handle     resource\n *                     The file pointer must be valid, and must point to a\n *                     file successfully opened by fopen() or fsockopen()\n *                     (and not yet closed by fclose()).\n * @fields     vector  An array of values.\n * @delimiter  string  The optional delimiter parameter sets the field\n *                     delimiter (one character only).\n * @enclosure  string  The optional enclosure parameter sets the field\n *                     enclosure (one character only).\n *\n * @return     mixed   Returns the length of the written string or FALSE on\n *                     failure.\n */",
"fgetcsv", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "length", T(Int64), "i:0;", S(4), "0", S(0), "delimiter", T(String), "s:1:\",\";", S(8), "\",\"", S(0), "enclosure", T(String), "s:1:\"\"\";", S(8), "\"\\\"\"", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fgetcsv.php )\n *\n * Similar to fgets() except that fgetcsv() parses the line it reads for\n * fields in CSV format and returns an array containing the fields read.\n *\n * @handle     resource\n *                     A valid file pointer to a file successfully opened\n *                     by fopen(), popen(), or fsockopen().\n * @length     int     Must be greater than the longest line (in\n *                     characters) to be found in the CSV file (allowing\n *                     for trailing line-end characters). It became\n *                     optional in PHP 5. Omitting this parameter (or\n *                     setting it to 0 in PHP 5.0.4 and later) the maximum\n *                     line length is not limited, which is slightly\n *                     slower.\n * @delimiter  string  Set the field delimiter (one character only).\n * @enclosure  string  Set the field enclosure character (one character\n *                     only).\n *\n * @return     mixed   Returns an indexed array containing the fields read.\n *\n *                     A blank line in a CSV file will be returned as an\n *                     array comprising a single null field, and will not\n *                     be treated as an error. If PHP is not properly\n *                     recognizing the line endings when reading files\n *                     either on or created by a Macintosh computer,\n *                     enabling the auto_detect_line_endings run-time\n *                     configuration option may help resolve the problem.\n *\n *                     fgetcsv() returns NULL if an invalid handle is\n *                     supplied or FALSE on other errors, including end of\n *                     file.\n */",
"file_get_contents", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "use_include_path", T(Boolean), "b:0;", S(4), "false", S(0), "context", T(Variant), "N;", S(2), "null", S(0), "offset", T(Int64), "i:0;", S(4), "0", S(0), "maxlen", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.file-get-contents.php )\n *\n * This function is similar to file(), except that file_get_contents()\n * returns the file in a string, starting at the specified offset up to\n * maxlen bytes. On failure, file_get_contents() will return FALSE.\n *\n * file_get_contents() is the preferred way to read the contents of a file\n * into a string. It will use memory mapping techniques if supported by\n * your OS to enhance performance.\n *\n * If you're opening a URI with special characters, such as spaces, you\n * need to encode the URI with urlencode().\n *\n * The default value of maxlen is not actually -1; rather, it is an\n * internal PHP value which means to copy the entire stream until\n * end-of-file is reached. The only way to specify this default value is to\n * leave it out of the parameter list.\n *\n * @filename   string  Name of the file to read.\n * @use_include_path\n *             bool    As of PHP 5 the FILE_USE_INCLUDE_PATH can be used to\n *                     trigger include path search.\n * @context    mixed   A valid context resource created with\n *                     stream_context_create(). If you don't need to use a\n *                     custom context, you can skip this parameter by NULL.\n * @offset     int     The offset where the reading starts on the original\n *                     stream.\n * @maxlen     int     Maximum length of data read. The default is to read\n *                     until end of file is reached. Note that this\n *                     parameter is applied to the stream processed by the\n *                     filters.\n *\n * @return     mixed   The function returns the read data or FALSE on\n *                     failure.\n */",
"file_put_contents", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "data", T(Variant), NULL, S(0), NULL, S(0), "flags", T(Int32), "i:0;", S(4), "0", S(0), "context", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.file-put-contents.php )\n *\n * This function is identical to calling fopen(), fwrite() and fclose()\n * successively to write data to a file.\n *\n * If filename does not exist, the file is created. Otherwise, the\n * existing file is overwritten, unless the FILE_APPEND flags is set.\n *\n * @filename   string  Path to the file where to write the data.\n * @data       mixed   The data to write. Can be either a string, an array\n *                     or a stream resource.\n *\n *                     If data is a stream resource, the remaining buffer\n *                     of that stream will be copied to the specified file.\n *                     This is similar with using stream_copy_to_stream().\n *\n *                     You can also specify the data parameter as a single\n *                     dimension array. This is equivalent to\n *                     file_put_contents($filename, implode('', $array)).\n * @flags      int     The value of flags can be any combination of the\n *                     following flags (with some restrictions), joined\n *                     with the binary OR (|) operator.\n *\n *                     Available flags Flag Description\n *                     FILE_USE_INCLUDE_PATH Search for filename in the\n *                     include directory. See include_path for more\n *                     information. FILE_APPEND If file filename already\n *                     exists, append the data to the file instead of\n *                     overwriting it. Mutually exclusive with LOCK_EX\n *                     since appends are atomic and thus there is no reason\n *                     to lock. LOCK_EX Acquire an exclusive lock on the\n *                     file while proceeding to the writing. Mutually\n *                     exclusive with FILE_APPEND.\n * @context    mixed   A valid context resource created with\n *                     stream_context_create().\n *\n * @return     mixed   The function returns the number of bytes that were\n *                     written to the file, or FALSE on failure.\n */",
"file", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "flags", T(Int32), "i:0;", S(4), "0", S(0), "context", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.file.php )\n *\n * Reads an entire file into an array.\n *\n * You can use file_get_contents() to return the contents of a file as a\n * string.\n *\n * @filename   string  Path to the file. TipA URL can be used as a filename\n *                     with this function if the fopen wrappers have been\n *                     enabled. See fopen() for more details on how to\n *                     specify the filename. See the List of Supported\n *                     Protocols/Wrappers for links to information about\n *                     what abilities the various wrappers have, notes on\n *                     their usage, and information on any predefined\n *                     variables they may provide.\n * @flags      int     The optional parameter flags can be one, or more, of\n *                     the following constants: FILE_USE_INCLUDE_PATH\n *                     Search for the file in the include_path.\n * @context    mixed   Do not add newline at the end of each array element\n *\n * @return     mixed   Returns the file in an array. Each element of the\n *                     array corresponds to a line in the file, with the\n *                     newline still attached. Upon failure, file() returns\n *                     FALSE.\n *\n *                     Each line in the resulting array will include the\n *                     line ending, unless FILE_IGNORE_NEW_LINES is used,\n *                     so you still need to use rtrim() if you do not want\n *                     the line ending present. If PHP is not properly\n *                     recognizing the line endings when reading files\n *                     either on or created by a Macintosh computer,\n *                     enabling the auto_detect_line_endings run-time\n *                     configuration option may help resolve the problem.\n */",
"readfile", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "use_include_path", T(Boolean), "b:0;", S(4), "false", S(0), "context", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.readfile.php )\n *\n * Reads a file and writes it to the output buffer.\n *\n * @filename   string  The filename being read.\n * @use_include_path\n *             bool    You can use the optional second parameter and set it\n *                     to TRUE, if you want to search for the file in the\n *                     include_path, too.\n * @context    mixed   A context stream resource.\n *\n * @return     mixed   Returns the number of bytes read from the file. If\n *                     an error occurs, FALSE is returned and unless the\n *                     function was called as @readfile(), an error message\n *                     is printed.\n */",
"move_uploaded_file", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "destination", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.move-uploaded-file.php\n * )\n *\n * This function checks to ensure that the file designated by filename is\n * a valid upload file (meaning that it was uploaded via PHP's HTTP POST\n * upload mechanism). If the file is valid, it will be moved to the\n * filename given by destination.\n *\n * This sort of check is especially important if there is any chance that\n * anything done with uploaded files could reveal their contents to the\n * user, or even to other users on the same system.\n *\n * @filename   string  The filename of the uploaded file.\n * @destination\n *             string  The destination of the moved file.\n *\n * @return     bool    If filename is not a valid upload file, then no\n *                     action will occur, and move_uploaded_file() will\n *                     return FALSE.\n *\n *                     If filename is a valid upload file, but cannot be\n *                     moved for some reason, no action will occur, and\n *                     move_uploaded_file() will return FALSE.\n *                     Additionally, a warning will be issued.\n */",
"parse_ini_file", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "process_sections", T(Boolean), "b:0;", S(4), "false", S(0), "scanner_mode", T(Int32), "i:0;", S(4), "INI_SCANNER_NORMAL", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.parse-ini-file.php )\n *\n * parse_ini_file() loads in the ini file specified in filename, and\n * returns the settings in it in an associative array.\n *\n * The structure of the ini file is the same as the php.ini's.\n *\n * @filename   string  The filename of the ini file being parsed.\n * @process_sections\n *             bool    By setting the process_sections parameter to TRUE,\n *                     you get a multidimensional array, with the section\n *                     names and settings included. The default for\n *                     process_sections is FALSE\n * @scanner_mode\n *             int     Can either be INI_SCANNER_NORMAL (default) or\n *                     INI_SCANNER_RAW. If INI_SCANNER_RAW is supplied,\n *                     then option values will not be parsed.\n *\n * @return     mixed   The settings are returned as an associative array on\n *                     success, and FALSE on failure.\n */",
"parse_ini_string", T(Variant), S(0), "ini", T(String), NULL, S(0), NULL, S(0), "process_sections", T(Boolean), "b:0;", S(4), "false", S(0), "scanner_mode", T(Int32), "i:0;", S(4), "INI_SCANNER_NORMAL", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.parse-ini-string.php )\n *\n * parse_ini_string() returns the settings in string ini in an associative\n * array.\n *\n * The structure of the ini string is the same as the php.ini's.\n *\n * @ini        string  The contents of the ini file being parsed.\n * @process_sections\n *             bool    By setting the process_sections parameter to TRUE,\n *                     you get a multidimensional array, with the section\n *                     names and settings included. The default for\n *                     process_sections is FALSE\n * @scanner_mode\n *             int     Can either be INI_SCANNER_NORMAL (default) or\n *                     INI_SCANNER_RAW. If INI_SCANNER_RAW is supplied,\n *                     then option values will not be parsed.\n *\n * @return     mixed   The settings are returned as an associative array on\n *                     success, and FALSE on failure.\n */",
"parse_hdf_file", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.parse-hdf-file.php )\n *\n *\n * @filename   string\n *\n * @return     mixed\n */",
"parse_hdf_string", T(Variant), S(0), "input", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.parse-hdf-string.php )\n *\n *\n * @input      string\n *\n * @return     mixed\n */",
"write_hdf_file", T(Boolean), S(0), "data", T(Array), NULL, S(0), NULL, S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.write-hdf-file.php )\n *\n *\n * @data       map\n * @filename   string\n *\n * @return     bool\n */",
"write_hdf_string", T(String), S(0), "data", T(Array), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.write-hdf-string.php )\n *\n *\n * @data       map\n *\n * @return     string\n */",
"md5_file", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "raw_output", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.md5-file.php )\n *\n * Calculates the MD5 hash of the file specified by the filename parameter\n * using the RSA Data Security, Inc. MD5 Message-Digest Algorithm, and\n * returns that hash. The hash is a 32-character hexadecimal number.\n *\n * @filename   string  The filename\n * @raw_output bool    When TRUE, returns the digest in raw binary format\n *                     with a length of 16.\n *\n * @return     mixed   Returns a string on success, FALSE otherwise.\n */",
"sha1_file", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "raw_output", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.sha1-file.php )\n *\n *\n * @filename   string  The filename of the file to hash.\n * @raw_output bool    When TRUE, returns the digest in raw binary format\n *                     with a length of 20.\n *\n * @return     mixed   Returns a string on success, FALSE otherwise.\n */",
"chmod", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "mode", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.chmod.php )\n *\n * Attempts to change the mode of the specified file to that given in\n * mode.\n *\n * @filename   string  Path to the file.\n * @mode       int     Note that mode is not automatically assumed to be an\n *                     octal value, so strings (such as \"g+w\") will not\n *                     work properly. To ensure the expected operation, you\n *                     need to prefix mode with a zero (0):\n *\n *\n *\n *\n *\n *                     The mode parameter consists of three octal number\n *                     components specifying access restrictions for the\n *                     owner, the user group in which the owner is in, and\n *                     to everybody else in this order. One component can\n *                     be computed by adding up the needed permissions for\n *                     that target user base. Number 1 means that you grant\n *                     execute rights, number 2 means that you make the\n *                     file writeable, number 4 means that you make the\n *                     file readable. Add up these numbers to specify\n *                     needed rights. You can also read more about modes on\n *                     Unix systems with 'man 1 chmod' and 'man 2 chmod'.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"chown", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "user", T(Primitive), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.chown.php )\n *\n * Attempts to change the owner of the file filename to user user. Only\n * the superuser may change the owner of a file.\n *\n * @filename   string  Path to the file.\n * @user       num|string\n *                     A user name or number.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"lchown", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "user", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.lchown.php )\n *\n * Attempts to change the owner of the symlink filename to user user.\n *\n * Only the superuser may change the owner of a symlink.\n *\n * @filename   string  Path to the file.\n * @user       mixed   User name or number.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"chgrp", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "group", T(Primitive), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.chgrp.php )\n *\n * Attempts to change the group of the file filename to group.\n *\n * Only the superuser may change the group of a file arbitrarily; other\n * users may change the group of a file to any group of which that user is\n * a member.\n *\n * @filename   string  Path to the file.\n * @group      num|string\n *                     A group name or number.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"lchgrp", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "group", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.lchgrp.php )\n *\n * Attempts to change the group of the symlink filename to group.\n *\n * Only the superuser may change the group of a symlink arbitrarily; other\n * users may change the group of a symlink to any group of which that user\n * is a member.\n *\n * @filename   string  Path to the symlink.\n * @group      mixed   The group specified by name or number.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"touch", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "mtime", T(Int64), "i:0;", S(4), "0", S(0), "atime", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.touch.php )\n *\n * Attempts to set the access and modification times of the file named in\n * the filename parameter to the value given in time. Note that the access\n * time is always modified, regardless of the number of parameters.\n *\n * If the file does not exist, it will be created.\n *\n * @filename   string  The name of the file being touched.\n * @mtime      int     The touch time. If time is not supplied, the current\n *                     system time is used.\n * @atime      int     If present, the access time of the given filename is\n *                     set to the value of atime. Otherwise, it is set to\n *                     time.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"copy", T(Boolean), S(0), "source", T(String), NULL, S(0), NULL, S(0), "dest", T(String), NULL, S(0), NULL, S(0), "context", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.copy.php )\n *\n * Makes a copy of the file source to dest.\n *\n * If you wish to move a file, use the rename() function.\n *\n * @source     string  Path to the source file.\n * @dest       string  The destination path. If dest is a URL, the copy\n *                     operation may fail if the wrapper does not support\n *                     overwriting of existing files. Warning\n *\n *                     If the destination file already exists, it will be\n *                     overwritten.\n * @context    mixed   A valid context resource created with\n *                     stream_context_create().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"rename", T(Boolean), S(0), "oldname", T(String), NULL, S(0), NULL, S(0), "newname", T(String), NULL, S(0), NULL, S(0), "context", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.rename.php )\n *\n * Attempts to rename oldname to newname.\n *\n * @oldname    string  The old name. The wrapper used in oldname must match\n *                     the wrapper used in newname.\n * @newname    string  The new name.\n * @context    mixed   Context support was added with PHP 5.0.0. For a\n *                     description of contexts, refer to Stream Functions.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"umask", T(Int64), S(0), "mask", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.umask.php )\n *\n * umask() sets PHP's umask to mask & 0777 and returns the old umask. When\n * PHP is being used as a server module, the umask is restored when each\n * request is finished.\n *\n * @mask       mixed   The new umask.\n *\n * @return     int     umask() without arguments simply returns the current\n *                     umask otherwise the old umask is returned.\n */",
"unlink", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "context", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.unlink.php )\n *\n * Deletes filename. Similar to the Unix C unlink() function. A E_WARNING\n * level error will be generated on failure.\n *\n * @filename   string  Path to the file.\n * @context    mixed   Context support was added with PHP 5.0.0. For a\n *                     description of contexts, refer to Stream Functions.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"link", T(Boolean), S(0), "target", T(String), NULL, S(0), NULL, S(0), "link", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.link.php )\n *\n * link() creates a hard link.\n *\n * @target     string  The link name.\n * @link       string  Target of the link.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"symlink", T(Boolean), S(0), "target", T(String), NULL, S(0), NULL, S(0), "link", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.symlink.php )\n *\n * symlink() creates a symbolic link to the existing target with the\n * specified name link.\n *\n * @target     string  Target of the link.\n * @link       string  The link name.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"basename", T(String), S(0), "path", T(String), NULL, S(0), NULL, S(0), "suffix", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.basename.php )\n *\n * Given a string containing a path to a file, this function will return\n * the base name of the file.\n *\n * @path       string  A path.\n *\n *                     On Windows, both slash (/) and backslash (\\) are\n *                     used as directory separator character. In other\n *                     environments, it is the forward slash (/).\n * @suffix     string  If the filename ends in suffix this will also be cut\n *                     off.\n *\n * @return     string  Returns the base name of the given path.\n */",
"fnmatch", T(Boolean), S(0), "pattern", T(String), NULL, S(0), NULL, S(0), "filename", T(String), NULL, S(0), NULL, S(0), "flags", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fnmatch.php )\n *\n * fnmatch() checks if the passed string would match the given shell\n * wildcard pattern.\n *\n * @pattern    string  The shell wildcard pattern.\n * @filename   string  The tested string. This function is especially\n *                     useful for filenames, but may also be used on\n *                     regular strings.\n *\n *                     The average user may be used to shell patterns or\n *                     at least in their simplest form to '\?' and '*'\n *                     wildcards so using fnmatch() instead of preg_match()\n *                     for frontend search expression input may be way more\n *                     convenient for non-programming users.\n * @flags      int     The value of flags can be any combination of the\n *                     following flags, joined with the binary OR (|)\n *                     operator. A list of possible flags for fnmatch()\n *                     Flag Description FNM_NOESCAPE Disable backslash\n *                     escaping. FNM_PATHNAME Slash in string only matches\n *                     slash in the given pattern. FNM_PERIOD Leading\n *                     period in string must be exactly matched by period\n *                     in the given pattern. FNM_CASEFOLD Caseless match.\n *                     Part of the GNU extension.\n *\n * @return     bool    Returns TRUE if there is a match, FALSE otherwise.\n */",
"glob", T(Variant), S(0), "pattern", T(String), NULL, S(0), NULL, S(0), "flags", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.glob.php )\n *\n * The glob() function searches for all the pathnames matching pattern\n * according to the rules used by the libc glob() function, which is\n * similar to the rules used by common shells.\n *\n * @pattern    string  The pattern. No tilde expansion or parameter\n *                     substitution is done.\n * @flags      int     Valid flags: GLOB_MARK - Adds a slash to each\n *                     directory returned GLOB_NOSORT - Return files as\n *                     they appear in the directory (no sorting)\n *                     GLOB_NOCHECK - Return the search pattern if no files\n *                     matching it were found GLOB_NOESCAPE - Backslashes\n *                     do not quote metacharacters GLOB_BRACE - Expands\n *                     {a,b,c} to match 'a', 'b', or 'c' GLOB_ONLYDIR -\n *                     Return only directory entries which match the\n *                     pattern GLOB_ERR - Stop on read errors (like\n *                     unreadable directories), by default errors are\n *                     ignored.\n *\n * @return     mixed   Returns an array containing the matched\n *                     files/directories, an empty array if no file matched\n *                     or FALSE on error.\n *\n *                     On some systems it is impossible to distinguish\n *                     between empty match and an error.\n */",
"tempnam", T(Variant), S(0), "dir", T(String), NULL, S(0), NULL, S(0), "prefix", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.tempnam.php )\n *\n * Creates a file with a unique filename, with access permission set to\n * 0600, in the specified directory. If the directory does not exist,\n * tempnam() may generate a file in the system's temporary directory, and\n * return the name of that.\n *\n * @dir        string  The directory where the temporary filename will be\n *                     created.\n * @prefix     string  The prefix of the generated temporary filename.\n *                     Windows uses only the first three characters of\n *                     prefix.\n *\n * @return     mixed   Returns the new temporary filename, or FALSE on\n *                     failure.\n */",
"tmpfile", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.tmpfile.php )\n *\n * Creates a temporary file with a unique name in read-write (w+) mode and\n * returns a file handle .\n *\n * The file is automatically removed when closed (using fclose()), or when\n * the script ends.\n *\n * For details, consult your system documentation on the tmpfile(3)\n * function, as well as the stdio.h header file.\n *\n * @return     mixed   Returns a file handle, similar to the one returned\n *                     by fopen(), for the new file or FALSE on failure.\n */", 
"fileperms", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fileperms.php )\n *\n * Gets permissions for the given file.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the permissions on the file, or FALSE on\n *                     failure.\n */",
"fileinode", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fileinode.php )\n *\n * Gets the file inode.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the inode number of the file, or FALSE on\n *                     failure.\n */",
"filesize", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.filesize.php )\n *\n * Gets the size for the given file.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the size of the file in bytes, or FALSE (and\n *                     generates an error of level E_WARNING) in case of an\n *                     error. Because PHP's integer type is signed and many\n *                     platforms use 32bit integers, filesize() may return\n *                     unexpected results for files which are larger than\n *                     2GB. For files between 2GB and 4GB in size this can\n *                     usually be overcome by using sprintf(\"%u\",\n *                     filesize($file)).\n */",
"fileowner", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fileowner.php )\n *\n * Gets the file owner.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the user ID of the owner of the file, or\n *                     FALSE on failure. The user ID is returned in\n *                     numerical format, use posix_getpwuid() to resolve it\n *                     to a username.\n */",
"filegroup", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.filegroup.php )\n *\n * Gets the file group. The group ID is returned in numerical format, use\n * posix_getgrgid() to resolve it to a group name.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the group ID of the file, or FALSE in case\n *                     of an error. The group ID is returned in numerical\n *                     format, use posix_getgrgid() to resolve it to a\n *                     group name. Upon failure, FALSE is returned.\n */",
"fileatime", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.fileatime.php )\n *\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the time the file was last accessed, or\n *                     FALSE on failure. The time is returned as a Unix\n *                     timestamp.\n */",
"filemtime", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.filemtime.php )\n *\n * This function returns the time when the data blocks of a file were\n * being written to, that is, the time when the content of the file was\n * changed.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the time the file was last modified, or\n *                     FALSE on failure. The time is returned as a Unix\n *                     timestamp, which is suitable for the date()\n *                     function.\n */",
"filectime", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.filectime.php )\n *\n * Gets the inode change time of a file.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the time the file was last changed, or FALSE\n *                     on failure. The time is returned as a Unix\n *                     timestamp.\n */",
"filetype", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.filetype.php )\n *\n * Returns the type of the given file.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   Returns the type of the file. Possible values are\n *                     fifo, char, dir, block, link, file, socket and\n *                     unknown.\n *\n *                     Returns FALSE if an error occurs. filetype() will\n *                     also produce an E_NOTICE message if the stat call\n *                     fails or if the file type is unknown.\n */",
"linkinfo", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.linkinfo.php )\n *\n * Gets information about a link.\n *\n * This function is used to verify if a link (pointed to by path) really\n * exists (using the same method as the S_ISLNK macro defined in stat.h).\n *\n * @filename   string  Path to the link.\n *\n * @return     mixed   linkinfo() returns the st_dev field of the Unix C\n *                     stat structure returned by the lstat system call.\n *                     Returns 0 or FALSE in case of error.\n */",
"is_writable", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.is-writable.php )\n *\n * Returns TRUE if the filename exists and is writable. The filename\n * argument may be a directory name allowing you to check if a directory is\n * writable.\n *\n * Keep in mind that PHP may be accessing the file as the user id that the\n * web server runs as (often 'nobody'). Safe mode limitations are not taken\n * into account.\n *\n * @filename   string  The filename being checked.\n *\n * @return     bool    Returns TRUE if the filename exists and is writable.\n */",
"is_writeable", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.is-writeable.php )\n *\n *\n * @filename   string\n *\n * @return     bool\n */",
"is_readable", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.is-readable.php )\n *\n * Tells whether a file exists and is readable.\n *\n * @filename   string  Path to the file.\n *\n * @return     bool    Returns TRUE if the file or directory specified by\n *                     filename exists and is readable, FALSE otherwise.\n */",
"is_executable", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.is-executable.php )\n *\n * Tells whether the filename is executable.\n *\n * @filename   string  Path to the file.\n *\n * @return     bool    Returns TRUE if the filename exists and is\n *                     executable, or FALSE on error.\n */",
"is_file", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.is-file.php )\n *\n * Tells whether the given file is a regular file.\n *\n * @filename   string  Path to the file.\n *\n * @return     bool    Returns TRUE if the filename exists and is a regular\n *                     file, FALSE otherwise.\n */",
"is_dir", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.is-dir.php )\n *\n * Tells whether the given filename is a directory.\n *\n * @filename   string  Path to the file. If filename is a relative\n *                     filename, it will be checked relative to the current\n *                     working directory. If filename is a symbolic or hard\n *                     link then the link will be resolved and checked. If\n *                     you have enabled safe mode, or open_basedir further\n *                     restrictions may apply.\n *\n * @return     bool    Returns TRUE if the filename exists and is a\n *                     directory, FALSE otherwise.\n */",
"is_link", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.is-link.php )\n *\n * Tells whether the given file is a symbolic link.\n *\n * @filename   string  Path to the file.\n *\n * @return     bool    Returns TRUE if the filename exists and is a\n *                     symbolic link, FALSE otherwise.\n */",
"is_uploaded_file", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.is-uploaded-file.php )\n *\n * Returns TRUE if the file named by filename was uploaded via HTTP POST.\n * This is useful to help ensure that a malicious user hasn't tried to\n * trick the script into working on files upon which it should not be\n * working--for instance, /etc/passwd.\n *\n * This sort of check is especially important if there is any chance that\n * anything done with uploaded files could reveal their contents to the\n * user, or even to other users on the same system.\n *\n * For proper working, the function is_uploaded_file() needs an argument\n * like $_FILES['userfile']['tmp_name'], - the name of the uploaded file on\n * the clients machine $_FILES['userfile']['name'] does not work.\n *\n * @filename   string  The filename being checked.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"file_exists", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.file-exists.php )\n *\n * Checks whether a file or directory exists.\n *\n * @filename   string  Path to the file or directory.\n *\n *                     On windows, use //computername/share/filename or\n *                     \\\\computername\\share\\filename to check files on\n *                     network shares.\n *\n * @return     bool    Returns TRUE if the file or directory specified by\n *                     filename exists; FALSE otherwise.\n *\n *                     This function will return FALSE for symlinks\n *                     pointing to non-existing files. Warning\n *\n *                     This function returns FALSE for files inaccessible\n *                     due to safe mode restrictions. However these files\n *                     still can be included if they are located in\n *                     safe_mode_include_dir.\n *\n *                     The check is done using the real UID/GID instead of\n *                     the effective one.\n */",
"stat", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stat.php )\n *\n * Gathers the statistics of the file named by filename. If filename is a\n * symbolic link, statistics are from the file itself, not the symlink.\n *\n * lstat() is identical to stat() except it would instead be based off the\n * symlinks status.\n *\n * @filename   string  Path to the file.\n *\n * @return     mixed   stat() and fstat() result format Numeric Associative\n *                     (since PHP 4.0.6) Description 0 dev device number 1\n *                     ino inode number * 2 mode inode protection mode 3\n *                     nlink number of links 4 uid userid of owner * 5 gid\n *                     groupid of owner * 6 rdev device type, if inode\n *                     device 7 size size in bytes 8 atime time of last\n *                     access (Unix timestamp) 9 mtime time of last\n *                     modification (Unix timestamp) 10 ctime time of last\n *                     inode change (Unix timestamp) 11 blksize blocksize\n *                     of filesystem IO ** 12 blocks number of 512-byte\n *                     blocks allocated ** * On Windows this will always be\n *                     0.\n *\n *                     ** Only valid on systems supporting the st_blksize\n *                     type - other systems (e.g. Windows) return -1.\n *\n *                     In case of error, stat() returns FALSE.\n */",
"lstat", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.lstat.php )\n *\n * Gathers the statistics of the file or symbolic link named by filename.\n *\n * @filename   string  Path to a file or a symbolic link.\n *\n * @return     mixed   See the manual page for stat() for information on\n *                     the structure of the array that lstat() returns.\n *                     This function is identical to the stat() function\n *                     except that if the filename parameter is a symbolic\n *                     link, the status of the symbolic link is returned,\n *                     not the status of the file pointed to by the\n *                     symbolic link.\n */",
"clearstatcache", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.clearstatcache.php )\n *\n * When you use stat(), lstat(), or any of the other functions listed in\n * the affected functions list (below), PHP caches the information those\n * functions return in order to provide faster performance. However, in\n * certain cases, you may want to clear the cached information. For\n * instance, if the same file is being checked multiple times within a\n * single script, and that file is in danger of being removed or changed\n * during that script's operation, you may elect to clear the status cache.\n * In these cases, you can use the clearstatcache() function to clear the\n * information that PHP caches about a file.\n *\n * You should also note that PHP doesn't cache information about\n * non-existent files. So, if you call file_exists() on a file that doesn't\n * exist, it will return FALSE until you create the file. If you create the\n * file, it will return TRUE even if you then delete the file. However\n * unlink() clears the cache automatically.\n *\n * This function caches information about specific filenames, so you only\n * need to call clearstatcache() if you are performing multiple operations\n * on the same filename and require the information about that particular\n * file to not be cached.\n *\n * Affected functions include stat(), lstat(), file_exists(),\n * is_writable(), is_readable(), is_executable(), is_file(), is_dir(),\n * is_link(), filectime(), fileatime(), filemtime(), fileinode(),\n * filegroup(), fileowner(), filesize(), filetype(), and fileperms().\n *\n * @return     mixed   No value is returned.\n */", 
"readlink", T(Variant), S(0), "path", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.readlink.php )\n *\n * readlink() does the same as the readlink C function.\n *\n * @path       string  The symbolic link path.\n *\n * @return     mixed   Returns the contents of the symbolic link path or\n *                     FALSE on error.\n */",
"realpath", T(Variant), S(0), "path", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.realpath.php )\n *\n * realpath() expands all symbolic links and resolves references to '/./',\n * '/../' and extra '/' characters in the input path and return the\n * canonicalized absolute pathname.\n *\n * @path       string  The path being checked.\n *\n * @return     mixed   Returns the canonicalized absolute pathname on\n *                     success. The resulting path will have no symbolic\n *                     link, '/./' or '/../' components.\n *\n *                     realpath() returns FALSE on failure, e.g. if the\n *                     file does not exist.\n *\n *                     The running script must have executable permissions\n *                     on all directories in the hierarchy, otherwise\n *                     realpath() will return FALSE.\n */",
"pathinfo", T(Variant), S(0), "path", T(String), NULL, S(0), NULL, S(0), "opt", T(Int32), "i:15;", S(5), "15", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pathinfo.php )\n *\n * pathinfo() returns an associative array containing information about\n * path.\n *\n * @path       string  The path being checked.\n * @opt        int     You can specify which elements are returned with\n *                     optional parameter options. It composes from\n *                     PATHINFO_DIRNAME, PATHINFO_BASENAME,\n *                     PATHINFO_EXTENSION and PATHINFO_FILENAME. It\n *                     defaults to return all elements.\n *\n * @return     mixed   The following associative array elements are\n *                     returned: dirname, basename, extension (if any), and\n *                     filename.\n *\n *                     If options is used, this function will return a\n *                     string if not all elements are requested.\n */",
"disk_free_space", T(Variant), S(0), "directory", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.disk-free-space.php )\n *\n * Given a string containing a directory, this function will return the\n * number of bytes available on the corresponding filesystem or disk\n * partition.\n *\n * @directory  string  A directory of the filesystem or disk partition.\n *\n *                     Given a file name instead of a directory, the\n *                     behaviour of the function is unspecified and may\n *                     differ between operating systems and PHP versions.\n *\n * @return     mixed   Returns the number of available bytes as a float or\n *                     FALSE on failure.\n */",
"diskfreespace", T(Variant), S(0), "directory", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.diskfreespace.php )\n *\n *\n * @directory  string\n *\n * @return     mixed\n */",
"disk_total_space", T(Variant), S(0), "directory", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.disk-total-space.php )\n *\n * Given a string containing a directory, this function will return the\n * total number of bytes on the corresponding filesystem or disk partition.\n *\n * @directory  string  A directory of the filesystem or disk partition.\n *\n * @return     mixed   Returns the total number of bytes as a float or\n *                     FALSE on failure.\n */",
"mkdir", T(Boolean), S(0), "pathname", T(String), NULL, S(0), NULL, S(0), "mode", T(Int64), "i:511;", S(6), "0777", S(0), "recursive", T(Boolean), "b:0;", S(4), "false", S(0), "context", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mkdir.php )\n *\n * Attempts to create the directory specified by pathname.\n *\n * @pathname   string  The directory path.\n * @mode       int     The mode is 0777 by default, which means the widest\n *                     possible access. For more information on modes, read\n *                     the details on the chmod() page.\n *\n *                     mode is ignored on Windows.\n *\n *                     Note that you probably want to specify the mode as\n *                     an octal number, which means it should have a\n *                     leading zero. The mode is also modified by the\n *                     current umask, which you can change using umask().\n * @recursive  bool    Allows the creation of nested directories specified\n *                     in the pathname. Defaults to FALSE.\n * @context    mixed   Context support was added with PHP 5.0.0. For a\n *                     description of contexts, refer to Stream Functions.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"rmdir", T(Boolean), S(0), "dirname", T(String), NULL, S(0), NULL, S(0), "context", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.rmdir.php )\n *\n * Attempts to remove the directory named by dirname. The directory must\n * be empty, and the relevant permissions must permit this. A E_WARNING\n * level error will be generated on failure.\n *\n * @dirname    string  Path to the directory.\n * @context    mixed   Context support was added with PHP 5.0.0. For a\n *                     description of contexts, refer to Stream Functions.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"dirname", T(String), S(0), "path", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dirname.php )\n *\n * Given a string containing a path to a file, this function will return\n * the name of the directory.\n *\n * @path       string  A path.\n *\n *                     On Windows, both slash (/) and backslash (\\) are\n *                     used as directory separator character. In other\n *                     environments, it is the forward slash (/).\n *\n * @return     string  Returns the name of the directory. If there are no\n *                     slashes in path, a dot ('.') is returned, indicating\n *                     the current directory. Otherwise, the returned\n *                     string is path with any trailing /component removed.\n */",
"getcwd", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getcwd.php )\n *\n * Gets the current working directory.\n *\n * @return     mixed   Returns the current working directory on success, or\n *                     FALSE on failure.\n *\n *                     On some Unix variants, getcwd() will return FALSE\n *                     if any one of the parent directories does not have\n *                     the readable or search mode set, even if the current\n *                     directory does. See chmod() for more information on\n *                     modes and permissions.\n */", 
"chdir", T(Boolean), S(0), "directory", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.chdir.php )\n *\n * Changes PHP's current directory to directory.\n *\n * @directory  string  The new current directory\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"chroot", T(Boolean), S(0), "directory", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.chroot.php )\n *\n * Changes the root directory of the current process to directory.\n *\n * This function is only available if your system supports it and you're\n * using the CLI, CGI or Embed SAPI. Also, this function requires root\n * privileges.\n *\n * @directory  string  The new directory\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"dir", T(Variant), S(0), "directory", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.dir.php )\n *\n *\n * @directory  string\n *\n * @return     mixed\n */",
"opendir", T(Variant), S(0), "path", T(String), NULL, S(0), NULL, S(0), "context", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.opendir.php )\n *\n * Opens up a directory handle to be used in subsequent closedir(),\n * readdir(), and rewinddir() calls.\n *\n * @path       string  The directory path that is to be opened\n * @context    mixed   For a description of the context parameter, refer to\n *                     the streams section of the manual.\n *\n * @return     mixed   Returns a directory handle resource on success, or\n *                     FALSE on failure.\n *\n *                     If path is not a valid directory or the directory\n *                     can not be opened due to permission restrictions or\n *                     filesystem errors, opendir() returns FALSE and\n *                     generates a PHP error of level E_WARNING. You can\n *                     suppress the error output of opendir() by prepending\n *                     '@' to the front of the function name.\n */",
"readdir", T(Variant), S(0), "dir_handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.readdir.php )\n *\n * Returns the filename of the next file from the directory. The filenames\n * are returned in the order in which they are stored by the filesystem.\n *\n * @dir_handle resource\n *                     The directory handle resource previously opened with\n *                     opendir(). If the directory handle is not specified,\n *                     the last link opened by opendir() is assumed.\n *\n * @return     mixed   Returns the filename on success or FALSE on failure.\n *                     WarningThis function may return Boolean FALSE, but\n *                     may also return a non-Boolean value which evaluates\n *                     to FALSE, such as 0 or \"\". Please read the section\n *                     on Booleans for more information. Use the ===\n *                     operator for testing the return value of this\n *                     function.\n */",
"rewinddir", T(Void), S(0), "dir_handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.rewinddir.php )\n *\n * Resets the directory stream indicated by dir_handle to the beginning of\n * the directory.\n *\n * @dir_handle resource\n *\n */",
"scandir", T(Variant), S(0), "directory", T(String), NULL, S(0), NULL, S(0), "descending", T(Boolean), "b:0;", S(4), "false", S(0), "context", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.scandir.php )\n *\n * Returns an array of files and directories from the directory.\n *\n * @directory  string  The directory that will be scanned.\n * @descending bool    By default, the sorted order is alphabetical in\n *                     ascending order. If the optional sorting_order is\n *                     set to non-zero, then the sort order is alphabetical\n *                     in descending order.\n * @context    mixed   For a description of the context parameter, refer to\n *                     the streams section of the manual.\n *\n * @return     mixed   Returns an array of filenames on success, or FALSE\n *                     on failure. If directory is not a directory, then\n *                     boolean FALSE is returned, and an error of level\n *                     E_WARNING is generated.\n */",
"closedir", T(Void), S(0), "dir_handle", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.closedir.php )\n *\n * Closes the directory stream indicated by dir_handle. The stream must\n * have previously been opened by opendir().\n *\n * @dir_handle resource\n *                     The directory handle resource previously opened with\n *                     opendir(). If the directory handle is not specified,\n *                     the last link opened by opendir() is assumed.\n */",

#elif EXT_TYPE == 1
"STDIN", T(Object),
"STDOUT", T(Object),
"STDERR", T(Object),

#elif EXT_TYPE == 2

#endif
