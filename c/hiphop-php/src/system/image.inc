// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"gd_info", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.gd-info.php )\n *\n * Gets information about the version and capabilities of the installed GD\n * library.\n *\n * @return     map\n */", 
"getimagesize", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "imageinfo", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.getimagesize.php )\n *\n * The getimagesize() function will determine the size of any given image\n * file and return the dimensions along with the file type and a\n * height/width text string to be used inside a normal HTML IMG tag and the\n * correspondant HTTP content type.\n *\n * getimagesize() can also return some more information in imageinfo\n * parameter. Note that JPC and JP2 are capable of having components with\n * different bit depths. In this case, the value for \"bits\" is the highest\n * bit depth encountered. Also, JP2 files may contain multiple JPEG 2000\n * codestreams. In this case, getimagesize() returns the values for the\n * first codestream it encounters in the root of the file. The information\n * about icons are retrieved from the icon with the highest bitrate.\n *\n * @filename   string  This parameter specifies the file you wish to\n *                     retrieve information about. It can reference a local\n *                     file or (configuration permitting) a remote file\n *                     using one of the supported streams.\n * @imageinfo  mixed   This optional parameter allows you to extract some\n *                     extended information from the image file. Currently,\n *                     this will return the different JPG APP markers as an\n *                     associative array. Some programs use these APP\n *                     markers to embed text information in images. A very\n *                     common one is to embed \273 IPTC information in the\n *                     APP13 marker. You can use the iptcparse() function\n *                     to parse the binary APP13 marker into something\n *                     readable.\n *\n * @return     mixed\n */",
"image_type_to_extension", T(String), S(0), "imagetype", T(Int32), NULL, S(0), NULL, S(0), "include_dot", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.image-type-to-extension.php )\n *\n * Returns the extension for the given IMAGETYPE_XXX constant.\n *\n * @imagetype  int     One of the IMAGETYPE_XXX constant.\n * @include_dot\n *             bool    Whether to prepend a dot to the extension or not.\n *                     Default to TRUE.\n *\n * @return     string  A string with the extension corresponding to the\n *                     given image type.\n */",
"image_type_to_mime_type", T(String), S(0), "imagetype", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.image-type-to-mime-type.php )\n *\n * The image_type_to_mime_type() function will determine the Mime-Type for\n * an IMAGETYPE constant.\n *\n * @imagetype  int     One of the IMAGETYPE_XXX constants.\n *\n * @return     string  The returned values are as follows Returned values\n *                     Constants imagetype Returned value IMAGETYPE_GIF\n *                     image/gif IMAGETYPE_JPEG image/jpeg IMAGETYPE_PNG\n *                     image/png IMAGETYPE_SWF\n *                     application/x-shockwave-flash IMAGETYPE_PSD\n *                     image/psd IMAGETYPE_BMP image/bmp IMAGETYPE_TIFF_II\n *                     (intel byte order) image/tiff IMAGETYPE_TIFF_MM\n *                     (motorola byte order) image/tiff IMAGETYPE_JPC\n *                     application/octet-stream IMAGETYPE_JP2 image/jp2\n *                     IMAGETYPE_JPX application/octet-stream IMAGETYPE_JB2\n *                     application/octet-stream IMAGETYPE_SWC\n *                     application/x-shockwave-flash IMAGETYPE_IFF\n *                     image/iff IMAGETYPE_WBMP image/vnd.wap.wbmp\n *                     IMAGETYPE_XBM image/xbm IMAGETYPE_ICO\n *                     image/vnd.microsoft.icon\n */",
"image2wbmp", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "filename", T(String), "N;", S(2), "null", S(0), "threshold", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.image2wbmp.php )\n *\n * image2wbmp() outputs or save a WBMP version of the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  Path to the saved file. If not given, the raw image\n *                     stream will be outputted directly.\n * @threshold  int     Threshold value, between 0 and 255 (inclusive).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagealphablending", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "blendmode", T(Boolean), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagealphablending.php\n * )\n *\n * imagealphablending() allows for two different modes of drawing on\n * truecolor images. In blending mode, the alpha channel component of the\n * color supplied to all drawing function, such as imagesetpixel()\n * determines how much of the underlying color should be allowed to shine\n * through. As a result, gd automatically blends the existing color at that\n * point with the drawing color, and stores the result in the image. The\n * resulting pixel is opaque. In non-blending mode, the drawing color is\n * copied literally with its alpha channel information, replacing the\n * destination pixel. Blending mode is not available when drawing on\n * palette images.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @blendmode  bool    Whether to enable the blending mode or not. On true\n *                     color images the default value is TRUE otherwise the\n *                     default value is FALSE\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imageantialias", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "on", T(Boolean), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imageantialias.php )\n *\n * Activate the fast drawing antialiased methods for lines and wired\n * polygons. It does not support alpha components. It works using a direct\n * blend operation. It works only with truecolor images.\n *\n * Thickness and styled are not supported.\n *\n * Using antialiased primitives with transparent background color can end\n * with some unexpected results. The blend method uses the background color\n * as any other colors. The lack of alpha component support does not allow\n * an alpha based antialiasing method.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @on         bool    Whether to enable antialiasing or not.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagearc", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "cx", T(Int32), NULL, S(0), NULL, S(0), "cy", T(Int32), NULL, S(0), NULL, S(0), "width", T(Int32), NULL, S(0), NULL, S(0), "height", T(Int32), NULL, S(0), NULL, S(0), "start", T(Int32), NULL, S(0), NULL, S(0), "end", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagearc.php )\n *\n * imagearc() draws an arc of circle centered at the given coordinates.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @cx         int     x-coordinate of the center.\n * @cy         int     y-coordinate of the center.\n * @width      int     The arc width.\n * @height     int     The arc height.\n * @start      int     The arc start angle, in degrees.\n * @end        int     The arc end angle, in degrees. 0\302\260 is located at the\n *                     three-o'clock position, and the arc is drawn\n *                     clockwise.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagechar", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "font", T(Int32), NULL, S(0), NULL, S(0), "x", T(Int32), NULL, S(0), NULL, S(0), "y", T(Int32), NULL, S(0), NULL, S(0), "c", T(String), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagechar.php )\n *\n * imagechar() draws the first character of c in the image identified by\n * image with its upper-left at x,y (top left is 0, 0) with the color\n * color.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @font       int     Can be 1, 2, 3, 4, 5 for built-in fonts in latin2\n *                     encoding (where higher numbers corresponding to\n *                     larger fonts) or any of your own font identifiers\n *                     registered with imageloadfont().\n * @x          int     x-coordinate of the start.\n * @y          int     y-coordinate of the start.\n * @c          string  The character to draw.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagecharup", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "font", T(Int32), NULL, S(0), NULL, S(0), "x", T(Int32), NULL, S(0), NULL, S(0), "y", T(Int32), NULL, S(0), NULL, S(0), "c", T(String), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecharup.php )\n *\n * Draws the character c vertically at the specified coordinate on the\n * given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @font       int     Can be 1, 2, 3, 4, 5 for built-in fonts in latin2\n *                     encoding (where higher numbers corresponding to\n *                     larger fonts) or any of your own font identifiers\n *                     registered with imageloadfont().\n * @x          int     x-coordinate of the start.\n * @y          int     y-coordinate of the start.\n * @c          string  The character to draw.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagecolorallocate", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "red", T(Int32), NULL, S(0), NULL, S(0), "green", T(Int32), NULL, S(0), NULL, S(0), "blue", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorallocate.php\n * )\n *\n * Returns a color identifier representing the color composed of the given\n * RGB components.\n *\n * imagecolorallocate() must be called to create each color that is to be\n * used in the image represented by image.\n *\n * The first call to imagecolorallocate() fills the background color in\n * palette-based images - images created using imagecreate().\n * These parameters are integers between 0 and 255 or hexadecimals between\n * 0x00 and 0xFF.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n *\n * @return     mixed   A color identifier or FALSE if the allocation\n *                     failed.\n */",
"imagecolorallocatealpha", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "red", T(Int32), NULL, S(0), NULL, S(0), "green", T(Int32), NULL, S(0), NULL, S(0), "blue", T(Int32), NULL, S(0), NULL, S(0), "alpha", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolorallocatealpha.php )\n *\n * imagecolorallocatealpha() behaves identically to imagecolorallocate()\n * with the addition of the transparency parameter alpha.\n * The colors parameters are integers between 0 and 255 or hexadecimals\n * between 0x00 and 0xFF.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n * @alpha      int     A value between 0 and 127. 0 indicates completely\n *                     opaque while 127 indicates completely transparent.\n *\n * @return     mixed   A color identifier or FALSE if the allocation\n *                     failed.\n */",
"imagecolorat", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "x", T(Int32), NULL, S(0), NULL, S(0), "y", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorat.php )\n *\n * Returns the index of the color of the pixel at the specified location\n * in the image specified by image.\n *\n * If PHP is compiled against GD library 2.0 or higher and the image is a\n * truecolor image, this function returns the RGB value of that pixel as\n * integer. Use bitshifting and masking to access the distinct red, green\n * and blue component values:\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x          int     x-coordinate of the point.\n * @y          int     y-coordinate of the point.\n *\n * @return     mixed   Returns the index of the color.\n */",
"imagecolorclosest", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "red", T(Int32), NULL, S(0), NULL, S(0), "green", T(Int32), NULL, S(0), NULL, S(0), "blue", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorclosest.php )\n *\n * Returns the index of the color in the palette of the image which is\n * \"closest\" to the specified RGB value.\n *\n * The \"distance\" between the desired color and each color in the palette\n * is calculated as if the RGB values represented points in\n * three-dimensional space.\n *\n * If you created the image from a file, only colors used in the image are\n * resolved. Colors present only in the palette are not resolved.\n * The colors parameters are integers between 0 and 255 or hexadecimals\n * between 0x00 and 0xFF.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n *\n * @return     mixed   Returns the index of the closest color, in the\n *                     palette of the image, to the specified one\n */",
"imagecolorclosestalpha", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "red", T(Int32), NULL, S(0), NULL, S(0), "green", T(Int32), NULL, S(0), NULL, S(0), "blue", T(Int32), NULL, S(0), NULL, S(0), "alpha", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolorclosestalpha.php )\n *\n * Returns the index of the color in the palette of the image which is\n * \"closest\" to the specified RGB value and alpha level.\n * The colors parameters are integers between 0 and 255 or hexadecimals\n * between 0x00 and 0xFF.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n * @alpha      int     A value between 0 and 127. 0 indicates completely\n *                     opaque while 127 indicates completely transparent.\n *\n * @return     mixed   Returns the index of the closest color in the\n *                     palette.\n */",
"imagecolorclosesthwb", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "red", T(Int32), NULL, S(0), NULL, S(0), "green", T(Int32), NULL, S(0), NULL, S(0), "blue", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolorclosesthwb.php )\n *\n * Get the index of the color which has the hue, white and blackness\n * nearest the given color.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n *\n * @return     mixed   Returns an integer with the index of the color which\n *                     has the hue, white and blackness nearest the given\n *                     color.\n */",
"imagecolordeallocate", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolordeallocate.php )\n *\n * De-allocates a color previously allocated with imagecolorallocate() or\n * imagecolorallocatealpha().\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @color      int     The color identifier.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagecolorexact", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "red", T(Int32), NULL, S(0), NULL, S(0), "green", T(Int32), NULL, S(0), NULL, S(0), "blue", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorexact.php )\n *\n * Returns the index of the specified color in the palette of the image.\n *\n * If you created the image from a file, only colors used in the image are\n * resolved. Colors present only in the palette are not resolved.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n *\n * @return     mixed   Returns the index of the specified color in the\n *                     palette, or -1 if the color does not exist.\n */",
"imagecolorexactalpha", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "red", T(Int32), NULL, S(0), NULL, S(0), "green", T(Int32), NULL, S(0), NULL, S(0), "blue", T(Int32), NULL, S(0), NULL, S(0), "alpha", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolorexactalpha.php )\n *\n * Returns the index of the specified color+alpha in the palette of the\n * image.\n * The colors parameters are integers between 0 and 255 or hexadecimals\n * between 0x00 and 0xFF.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n * @alpha      int     A value between 0 and 127. 0 indicates completely\n *                     opaque while 127 indicates completely transparent.\n *\n * @return     mixed   Returns the index of the specified color+alpha in\n *                     the palette of the image, or -1 if the color does\n *                     not exist in the image's palette.\n */",
"imagecolormatch", T(Variant), S(0), "image1", T(Object), NULL, S(0), NULL, S(0), "image2", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolormatch.php )\n *\n * Makes the colors of the palette version of an image more closely match\n * the true color version.\n *\n * @image1     resource\n *                     A truecolor image link resource.\n * @image2     resource\n *                     A palette image link resource pointing to an image\n *                     that has the same size as image1.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"imagecolorresolve", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "red", T(Int32), NULL, S(0), NULL, S(0), "green", T(Int32), NULL, S(0), NULL, S(0), "blue", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorresolve.php )\n *\n * This function is guaranteed to return a color index for a requested\n * color, either the exact color or the closest possible alternative.\n *\n * If you created the image from a file, only colors used in the image are\n * resolved. Colors present only in the palette are not resolved.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n *\n * @return     mixed   Returns a color index.\n */",
"imagecolorresolvealpha", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "red", T(Int32), NULL, S(0), NULL, S(0), "green", T(Int32), NULL, S(0), NULL, S(0), "blue", T(Int32), NULL, S(0), NULL, S(0), "alpha", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolorresolvealpha.php )\n *\n * This function is guaranteed to return a color index for a requested\n * color, either the exact color or the closest possible alternative.\n * The colors parameters are integers between 0 and 255 or hexadecimals\n * between 0x00 and 0xFF.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n * @alpha      int     A value between 0 and 127. 0 indicates completely\n *                     opaque while 127 indicates completely transparent.\n *\n * @return     mixed   Returns a color index.\n */",
"imagecolorset", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "index", T(Int32), NULL, S(0), NULL, S(0), "red", T(Int32), NULL, S(0), NULL, S(0), "green", T(Int32), NULL, S(0), NULL, S(0), "blue", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorset.php )\n *\n * This sets the specified index in the palette to the specified color.\n * This is useful for creating flood-fill-like effects in palleted images\n * without the overhead of performing the actual flood-fill.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @index      int     An index in the palette.\n * @red        int     Value of red component.\n * @green      int     Value of green component.\n * @blue       int     Value of blue component.\n *\n * @return     mixed   No value is returned.\n */",
"imagecolorsforindex", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "index", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorsforindex.php\n * )\n *\n * Gets the color for a specified index.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @index      int     The color index.\n *\n * @return     mixed   Returns an associative array with red, green, blue\n *                     and alpha keys that contain the appropriate values\n *                     for the specified color index.\n */",
"imagecolorstotal", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecolorstotal.php )\n *\n * Returns the number of colors in an image palette.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatefromgif().\n *\n * @return     mixed   Returns the number of colors in the specified\n *                     image's palette or 0 for truecolor images.\n */",
"imagecolortransparent", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "color", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecolortransparent.php )\n *\n * Sets the transparent color in the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     mixed   The identifier of the new (or current, if none is\n *                     specified) transparent color is returned.\n */",
"imageconvolution", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "matrix", T(Array), NULL, S(0), NULL, S(0), "div", T(Double), NULL, S(0), NULL, S(0), "offset", T(Double), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imageconvolution.php )\n *\n * Applies a convolution matrix on the image, using the given coefficient\n * and offset.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @matrix     map     A 3x3 matrix: an array of three arrays of three\n *                     floats.\n * @div        float   The divisor of the result of the convolution, used\n *                     for normalization.\n * @offset     float   Color offset.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagecopy", T(Boolean), S(0), "dst_im", T(Object), NULL, S(0), NULL, S(0), "src_im", T(Object), NULL, S(0), NULL, S(0), "dst_x", T(Int32), NULL, S(0), NULL, S(0), "dst_y", T(Int32), NULL, S(0), NULL, S(0), "src_x", T(Int32), NULL, S(0), NULL, S(0), "src_y", T(Int32), NULL, S(0), NULL, S(0), "src_w", T(Int32), NULL, S(0), NULL, S(0), "src_h", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecopy.php )\n *\n * Copy a part of src_im onto dst_im starting at the x,y coordinates\n * src_x, src_y with a width of src_w and a height of src_h. The portion\n * defined will be copied onto the x,y coordinates, dst_x and dst_y.\n *\n * @dst_im     resource\n *                     Destination image link resource.\n * @src_im     resource\n *                     Source image link resource.\n * @dst_x      int     x-coordinate of destination point.\n * @dst_y      int     y-coordinate of destination point.\n * @src_x      int     x-coordinate of source point.\n * @src_y      int     y-coordinate of source point.\n * @src_w      int     Source width.\n * @src_h      int     Source height.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagecopymerge", T(Boolean), S(0), "dst_im", T(Object), NULL, S(0), NULL, S(0), "src_im", T(Object), NULL, S(0), NULL, S(0), "dst_x", T(Int32), NULL, S(0), NULL, S(0), "dst_y", T(Int32), NULL, S(0), NULL, S(0), "src_x", T(Int32), NULL, S(0), NULL, S(0), "src_y", T(Int32), NULL, S(0), NULL, S(0), "src_w", T(Int32), NULL, S(0), NULL, S(0), "src_h", T(Int32), NULL, S(0), NULL, S(0), "pct", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecopymerge.php )\n *\n * Copy a part of src_im onto dst_im starting at the x,y coordinates\n * src_x, src_y with a width of src_w and a height of src_h. The portion\n * defined will be copied onto the x,y coordinates, dst_x and dst_y.\n *\n * @dst_im     resource\n *                     Destination image link resource.\n * @src_im     resource\n *                     Source image link resource.\n * @dst_x      int     x-coordinate of destination point.\n * @dst_y      int     y-coordinate of destination point.\n * @src_x      int     x-coordinate of source point.\n * @src_y      int     y-coordinate of source point.\n * @src_w      int     Source width.\n * @src_h      int     Source height.\n * @pct        int     The two images will be merged according to pct which\n *                     can range from 0 to 100. When pct = 0, no action is\n *                     taken, when 100 this function behaves identically to\n *                     imagecopy() for pallete images, while it implements\n *                     alpha transparency for true colour images.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagecopymergegray", T(Boolean), S(0), "dst_im", T(Object), NULL, S(0), NULL, S(0), "src_im", T(Object), NULL, S(0), NULL, S(0), "dst_x", T(Int32), NULL, S(0), NULL, S(0), "dst_y", T(Int32), NULL, S(0), NULL, S(0), "src_x", T(Int32), NULL, S(0), NULL, S(0), "src_y", T(Int32), NULL, S(0), NULL, S(0), "src_w", T(Int32), NULL, S(0), NULL, S(0), "src_h", T(Int32), NULL, S(0), NULL, S(0), "pct", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecopymergegray.php\n * )\n *\n * imagecopymergegray() copy a part of src_im onto dst_im starting at the\n * x,y coordinates src_x, src_y with a width of src_w and a height of\n * src_h. The portion defined will be copied onto the x,y coordinates,\n * dst_x and dst_y.\n *\n * This function is identical to imagecopymerge() except that when merging\n * it preserves the hue of the source by converting the destination pixels\n * to gray scale before the copy operation.\n *\n * @dst_im     resource\n *                     Destination image link resource.\n * @src_im     resource\n *                     Source image link resource.\n * @dst_x      int     x-coordinate of destination point.\n * @dst_y      int     y-coordinate of destination point.\n * @src_x      int     x-coordinate of source point.\n * @src_y      int     y-coordinate of source point.\n * @src_w      int     Source width.\n * @src_h      int     Source height.\n * @pct        int     The src_im will be changed to grayscale according to\n *                     pct where 0 is fully grayscale and 100 is unchanged.\n *                     When pct = 100 this function behaves identically to\n *                     imagecopy() for pallete images, while it implements\n *                     alpha transparency for true colour images.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagecopyresampled", T(Boolean), S(0), "dst_im", T(Object), NULL, S(0), NULL, S(0), "src_im", T(Object), NULL, S(0), NULL, S(0), "dst_x", T(Int32), NULL, S(0), NULL, S(0), "dst_y", T(Int32), NULL, S(0), NULL, S(0), "src_x", T(Int32), NULL, S(0), NULL, S(0), "src_y", T(Int32), NULL, S(0), NULL, S(0), "dst_w", T(Int32), NULL, S(0), NULL, S(0), "dst_h", T(Int32), NULL, S(0), NULL, S(0), "src_w", T(Int32), NULL, S(0), NULL, S(0), "src_h", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecopyresampled.php\n * )\n *\n * imagecopyresampled() copies a rectangular portion of one image to\n * another image, smoothly interpolating pixel values so that, in\n * particular, reducing the size of an image still retains a great deal of\n * clarity.\n *\n * In other words, imagecopyresampled() will take an rectangular area from\n * src_image of width src_w and height src_h at position (src_x,src_y) and\n * place it in a rectangular area of dst_image of width dst_w and height\n * dst_h at position (dst_x,dst_y).\n *\n * If the source and destination coordinates and width and heights differ,\n * appropriate stretching or shrinking of the image fragment will be\n * performed. The coordinates refer to the upper left corner. This function\n * can be used to copy regions within the same image (if dst_image is the\n * same as src_image) but if the regions overlap the results will be\n * unpredictable.\n *\n * @dst_im     resource\n *                     Destination image link resource.\n * @src_im     resource\n *                     Source image link resource.\n * @dst_x      int     x-coordinate of destination point.\n * @dst_y      int     y-coordinate of destination point.\n * @src_x      int     x-coordinate of source point.\n * @src_y      int     y-coordinate of source point.\n * @dst_w      int     Destination width.\n * @dst_h      int     Destination height.\n * @src_w      int     Source width.\n * @src_h      int     Source height.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagecopyresized", T(Boolean), S(0), "dst_im", T(Object), NULL, S(0), NULL, S(0), "src_im", T(Object), NULL, S(0), NULL, S(0), "dst_x", T(Int32), NULL, S(0), NULL, S(0), "dst_y", T(Int32), NULL, S(0), NULL, S(0), "src_x", T(Int32), NULL, S(0), NULL, S(0), "src_y", T(Int32), NULL, S(0), NULL, S(0), "dst_w", T(Int32), NULL, S(0), NULL, S(0), "dst_h", T(Int32), NULL, S(0), NULL, S(0), "src_w", T(Int32), NULL, S(0), NULL, S(0), "src_h", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecopyresized.php )\n *\n * imagecopyresized() copies a rectangular portion of one image to another\n * image. dst_image is the destination image, src_image is the source image\n * identifier.\n *\n * In other words, imagecopyresized() will take an rectangular area from\n * src_image of width src_w and height src_h at position (src_x,src_y) and\n * place it in a rectangular area of dst_image of width dst_w and height\n * dst_h at position (dst_x,dst_y).\n *\n * If the source and destination coordinates and width and heights differ,\n * appropriate stretching or shrinking of the image fragment will be\n * performed. The coordinates refer to the upper left corner. This function\n * can be used to copy regions within the same image (if dst_image is the\n * same as src_image) but if the regions overlap the results will be\n * unpredictable.\n *\n * @dst_im     resource\n *                     Destination image link resource.\n * @src_im     resource\n *                     Source image link resource.\n * @dst_x      int     x-coordinate of destination point.\n * @dst_y      int     y-coordinate of destination point.\n * @src_x      int     x-coordinate of source point.\n * @src_y      int     y-coordinate of source point.\n * @dst_w      int     Destination width.\n * @dst_h      int     Destination height.\n * @src_w      int     Source width.\n * @src_h      int     Source height.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagecreate", T(Variant), S(0), "width", T(Int32), NULL, S(0), NULL, S(0), "height", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreate.php )\n *\n * imagecreate() returns an image identifier representing a blank image of\n * specified size.\n *\n * We recommend the use of imagecreatetruecolor().\n *\n * @width      int     The image width.\n * @height     int     The image height.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
"imagecreatefromgd2part", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "srcx", T(Int32), NULL, S(0), NULL, S(0), "srcy", T(Int32), NULL, S(0), NULL, S(0), "width", T(Int32), NULL, S(0), NULL, S(0), "height", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecreatefromgd2part.php )\n *\n * Create a new image from a given part of GD2 file or URL. TipA URL can\n * be used as a filename with this function if the fopen wrappers have been\n * enabled. See fopen() for more details on how to specify the filename.\n * See the List of Supported Protocols/Wrappers for links to information\n * about what abilities the various wrappers have, notes on their usage,\n * and information on any predefined variables they may provide.\n *\n * @filename   string  Path to the GD2 image.\n * @srcx       int     x-coordinate of source point.\n * @srcy       int     y-coordinate of source point.\n * @width      int     Source width.\n * @height     int     Source height.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
"imagecreatefromgd", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromgd.php )\n *\n * Create a new image from GD file or URL. TipA URL can be used as a\n * filename with this function if the fopen wrappers have been enabled. See\n * fopen() for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the GD file.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
"imagecreatefromgd2", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromgd2.php\n * )\n *\n * Create a new image from GD2 file or URL. TipA URL can be used as a\n * filename with this function if the fopen wrappers have been enabled. See\n * fopen() for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the GD2 image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
"imagecreatefromgif", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromgif.php\n * )\n *\n * imagecreatefromgif() returns an image identifier representing the image\n * obtained from the given filename. TipA URL can be used as a filename\n * with this function if the fopen wrappers have been enabled. See fopen()\n * for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the GIF image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
"imagecreatefromjpeg", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromjpeg.php\n * )\n *\n * imagecreatefromjpeg() returns an image identifier representing the\n * image obtained from the given filename. TipA URL can be used as a\n * filename with this function if the fopen wrappers have been enabled. See\n * fopen() for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the JPEG image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
"imagecreatefrompng", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefrompng.php\n * )\n *\n * imagecreatefrompng() returns an image identifier representing the image\n * obtained from the given filename. TipA URL can be used as a filename\n * with this function if the fopen wrappers have been enabled. See fopen()\n * for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the PNG image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
"imagecreatefromstring", T(Variant), S(0), "data", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecreatefromstring.php )\n *\n * imagecreatefromstring() returns an image identifier representing the\n * image obtained from the given data. These types will be automatically\n * detected if your build of PHP supports them: JPEG, PNG, GIF, WBMP, and\n * GD2.\n *\n * @data       string  A string containing the image data.\n *\n * @return     mixed   An image resource will be returned on success. FALSE\n *                     is returned if the image type is unsupported, the\n *                     data is not in a recognised format, or the image is\n *                     corrupt and cannot be loaded.\n */",
"imagecreatefromwbmp", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromwbmp.php\n * )\n *\n * imagecreatefromwbmp() returns an image identifier representing the\n * image obtained from the given filename. TipA URL can be used as a\n * filename with this function if the fopen wrappers have been enabled. See\n * fopen() for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the WBMP image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
"imagecreatefromxbm", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromxbm.php\n * )\n *\n * imagecreatefromxbm() returns an image identifier representing the image\n * obtained from the given filename. TipA URL can be used as a filename\n * with this function if the fopen wrappers have been enabled. See fopen()\n * for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the XBM image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
"imagecreatefromxpm", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagecreatefromxpm.php\n * )\n *\n * imagecreatefromxpm() returns an image identifier representing the image\n * obtained from the given filename. TipA URL can be used as a filename\n * with this function if the fopen wrappers have been enabled. See fopen()\n * for more details on how to specify the filename. See the List of\n * Supported Protocols/Wrappers for links to information about what\n * abilities the various wrappers have, notes on their usage, and\n * information on any predefined variables they may provide.\n *\n * @filename   string  Path to the XPM image.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
"imagecreatetruecolor", T(Variant), S(0), "width", T(Int32), NULL, S(0), NULL, S(0), "height", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagecreatetruecolor.php )\n *\n * imagecreatetruecolor() returns an image identifier representing a black\n * image of the specified size.\n *\n * Depending on your PHP and GD versions this function is defined or not.\n * With PHP 4.0.6 through 4.1.x this function always exists if the GD\n * module is loaded, but calling it without GD2 being installed PHP will\n * issue a fatal error and exit. With PHP 4.2.x this behaviour is different\n * in issuing a warning instead of an error. Other versions only define\n * this function, if the correct GD version is installed.\n *\n * @width      int     Image width.\n * @height     int     Image height.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on errors.\n */",
"imagedashedline", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "x1", T(Int32), NULL, S(0), NULL, S(0), "y1", T(Int32), NULL, S(0), NULL, S(0), "x2", T(Int32), NULL, S(0), NULL, S(0), "y2", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagedashedline.php )\n *\n * This function is deprecated. Use combination of imagesetstyle() and\n * imageline() instead.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x1         int     Upper left x coordinate.\n * @y1         int     Upper left y coordinate 0, 0 is the top left corner\n *                     of the image.\n * @x2         int     Bottom right x coordinate.\n * @y2         int     Bottom right y coordinate.\n * @color      int     The fill color. A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Always returns true\n */",
"imagedestroy", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagedestroy.php )\n *\n * imagedestroy() frees any memory associated with image image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imageellipse", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "cx", T(Int32), NULL, S(0), NULL, S(0), "cy", T(Int32), NULL, S(0), NULL, S(0), "width", T(Int32), NULL, S(0), NULL, S(0), "height", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imageellipse.php )\n *\n * Draws an ellipse centered at the specified coordinates.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @cx         int     x-coordinate of the center.\n * @cy         int     y-coordinate of the center.\n * @width      int     The ellipse width.\n * @height     int     The ellipse height.\n * @color      int     The color of the ellipse. A color identifier created\n *                     with imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagefill", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "x", T(Int32), NULL, S(0), NULL, S(0), "y", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagefill.php )\n *\n * Performs a flood fill starting at the given coordinate (top left is 0,\n * 0) with the given color in the image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x          int     x-coordinate of start point.\n * @y          int     y-coordinate of start point.\n * @color      int     The fill color. A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagefilledarc", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "cx", T(Int32), NULL, S(0), NULL, S(0), "cy", T(Int32), NULL, S(0), NULL, S(0), "width", T(Int32), NULL, S(0), NULL, S(0), "height", T(Int32), NULL, S(0), NULL, S(0), "start", T(Int32), NULL, S(0), NULL, S(0), "end", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), "style", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagefilledarc.php )\n *\n * Draws a partial arc centered at the specified coordinate in the given\n * image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @cx         int     x-coordinate of the center.\n * @cy         int     y-coordinate of the center.\n * @width      int     The arc width.\n * @height     int     The arc height.\n * @start      int     The arc start angle, in degrees.\n * @end        int     The arc end angle, in degrees. 0\302\260 is located at the\n *                     three-o'clock position, and the arc is drawn\n *                     clockwise.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n * @style      int     A bitwise OR of the following possibilities:\n *                     IMG_ARC_PIE IMG_ARC_CHORD IMG_ARC_NOFILL\n *                     IMG_ARC_EDGED IMG_ARC_PIE and IMG_ARC_CHORD are\n *                     mutually exclusive; IMG_ARC_CHORD just connects the\n *                     starting and ending angles with a straight line,\n *                     while IMG_ARC_PIE produces a rounded edge.\n *                     IMG_ARC_NOFILL indicates that the arc or chord\n *                     should be outlined, not filled. IMG_ARC_EDGED, used\n *                     together with IMG_ARC_NOFILL, indicates that the\n *                     beginning and ending angles should be connected to\n *                     the center - this is a good way to outline (rather\n *                     than fill) a 'pie slice'.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagefilledellipse", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "cx", T(Int32), NULL, S(0), NULL, S(0), "cy", T(Int32), NULL, S(0), NULL, S(0), "width", T(Int32), NULL, S(0), NULL, S(0), "height", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagefilledellipse.php\n * )\n *\n * Draws an ellipse centered at the specified coordinate on the given\n * image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @cx         int     x-coordinate of the center.\n * @cy         int     y-coordinate of the center.\n * @width      int     The ellipse width.\n * @height     int     The ellipse height.\n * @color      int     The fill color. A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagefilledpolygon", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "points", T(Array), NULL, S(0), NULL, S(0), "num_points", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagefilledpolygon.php\n * )\n *\n * imagefilledpolygon() creates a filled polygon in the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @points     vector  An array containing the x and y coordinates of the\n *                     polygons vertices consecutively.\n * @num_points int     Total number of vertices, which must be at least 3.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagefilledrectangle", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "x1", T(Int32), NULL, S(0), NULL, S(0), "y1", T(Int32), NULL, S(0), NULL, S(0), "x2", T(Int32), NULL, S(0), NULL, S(0), "y2", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagefilledrectangle.php )\n *\n * Creates a rectangle filled with color in the given image starting at\n * point 1 and ending at point 2. 0, 0 is the top left corner of the image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x1         int     x-coordinate for point 1.\n * @y1         int     y-coordinate for point 1.\n * @x2         int     x-coordinate for point 2.\n * @y2         int     y-coordinate for point 2.\n * @color      int     The fill color. A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagefilltoborder", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "x", T(Int32), NULL, S(0), NULL, S(0), "y", T(Int32), NULL, S(0), NULL, S(0), "border", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagefilltoborder.php )\n *\n * imagefilltoborder() performs a flood fill whose border color is defined\n * by border. The starting point for the fill is x, y (top left is 0, 0)\n * and the region is filled with color color.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x          int     x-coordinate of start.\n * @y          int     y-coordinate of start.\n * @border     int     The border color. A color identifier created with\n *                     imagecolorallocate().\n * @color      int     The fill color. A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagefilter", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "filtertype", T(Int32), NULL, S(0), NULL, S(0), "arg1", T(Int32), "i:0;", S(4), "0", S(0), "arg2", T(Int32), "i:0;", S(4), "0", S(0), "arg3", T(Int32), "i:0;", S(4), "0", S(0), "arg4", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagefilter.php )\n *\n * imagefilter() applies the given filter filtertype on the image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filtertype int     filtertype can be one of the following:\n *                     IMG_FILTER_NEGATE: Reverses all colors of the image.\n *                     IMG_FILTER_GRAYSCALE: Converts the image into\n *                     grayscale. IMG_FILTER_BRIGHTNESS: Changes the\n *                     brightness of the image. Use arg1 to set the level\n *                     of brightness. IMG_FILTER_CONTRAST: Changes the\n *                     contrast of the image. Use arg1 to set the level of\n *                     contrast. IMG_FILTER_COLORIZE: Like\n *                     IMG_FILTER_GRAYSCALE, except you can specify the\n *                     color. Use arg1, arg2 and arg3 in the form of red,\n *                     blue, green and arg4 for the alpha channel. The\n *                     range for each color is 0 to 255.\n *                     IMG_FILTER_EDGEDETECT: Uses edge detection to\n *                     highlight the edges in the image. IMG_FILTER_EMBOSS:\n *                     Embosses the image. IMG_FILTER_GAUSSIAN_BLUR: Blurs\n *                     the image using the Gaussian method.\n *                     IMG_FILTER_SELECTIVE_BLUR: Blurs the image.\n *                     IMG_FILTER_MEAN_REMOVAL: Uses mean removal to\n *                     achieve a \"sketchy\" effect. IMG_FILTER_SMOOTH: Makes\n *                     the image smoother. Use arg1 to set the level of\n *                     smoothness. IMG_FILTER_PIXELATE: Applies pixelation\n *                     effect to the image, use arg1 to set the block size\n *                     and arg2 to set the pixelation effect mode.\n * @arg1       int     IMG_FILTER_BRIGHTNESS: Brightness level.\n *                     IMG_FILTER_CONTRAST: Contrast level.\n *                     IMG_FILTER_COLORIZE: Value of red component.\n *                     IMG_FILTER_SMOOTH: Smoothness level.\n *                     IMG_FILTER_PIXELATE: Block size in pixels.\n * @arg2       int     IMG_FILTER_COLORIZE: Value of green component.\n *                     IMG_FILTER_PIXELATE: Whether to use advanced\n *                     pixelation effect or not (defaults to FALSE).\n * @arg3       int     IMG_FILTER_COLORIZE: Value of blue component.\n * @arg4       int     IMG_FILTER_COLORIZE: Alpha channel, A value between\n *                     0 and 127. 0 indicates completely opaque while 127\n *                     indicates completely transparent.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagefontheight", T(Int64), S(0), "font", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagefontheight.php )\n *\n * Returns the pixel height of a character in the specified font.\n *\n * @font       int     Can be 1, 2, 3, 4, 5 for built-in fonts in latin2\n *                     encoding (where higher numbers corresponding to\n *                     larger fonts) or any of your own font identifiers\n *                     registered with imageloadfont().\n *\n * @return     int     Returns the height of the pixel.\n */",
"imagefontwidth", T(Int64), S(0), "font", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagefontwidth.php )\n *\n * Returns the pixel width of a character in font.\n *\n * @font       int     Can be 1, 2, 3, 4, 5 for built-in fonts in latin2\n *                     encoding (where higher numbers corresponding to\n *                     larger fonts) or any of your own font identifiers\n *                     registered with imageloadfont().\n *\n * @return     int     Returns the width of the pixel\n */",
"imageftbbox", T(Variant), S(0), "size", T(Double), NULL, S(0), NULL, S(0), "angle", T(Double), NULL, S(0), NULL, S(0), "font_file", T(String), NULL, S(0), NULL, S(0), "text", T(String), NULL, S(0), NULL, S(0), "extrainfo", T(Array), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imageftbbox.php )\n *\n * This function calculates and returns the bounding box in pixels for a\n * FreeType text.\n *\n * @size       float   The font size. Depending on your version of GD, this\n *                     should be specified as the pixel size (GD1) or point\n *                     size (GD2).\n * @angle      float   Angle in degrees in which text will be measured.\n * @font_file  string  The name of the TrueType font file (can be a URL).\n *                     Depending on which version of the GD library that\n *                     PHP is using, it may attempt to search for files\n *                     that do not begin with a leading '/' by appending\n *                     '.ttf' to the filename and searching along a\n *                     library-defined font path.\n * @text       string  The string to be measured.\n * @extrainfo  map     Possible array indexes for extrainfo Key Type\n *                     Meaning linespacing float Defines drawing\n *                     linespacing\n *\n * @return     mixed   imageftbbox() returns an array with 8 elements\n *                     representing four points making the bounding box of\n *                     the text: 0 lower left corner, X position 1 lower\n *                     left corner, Y position 2 lower right corner, X\n *                     position 3 lower right corner, Y position 4 upper\n *                     right corner, X position 5 upper right corner, Y\n *                     position 6 upper left corner, X position 7 upper\n *                     left corner, Y position\n *\n *                     The points are relative to the text regardless of\n *                     the angle, so \"upper left\" means in the top\n *                     left-hand corner seeing the text horizontally.\n */",
"imagefttext", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "size", T(Double), NULL, S(0), NULL, S(0), "angle", T(Double), NULL, S(0), NULL, S(0), "x", T(Int32), NULL, S(0), NULL, S(0), "y", T(Int32), NULL, S(0), NULL, S(0), "col", T(Int32), NULL, S(0), NULL, S(0), "font_file", T(String), NULL, S(0), NULL, S(0), "text", T(String), NULL, S(0), NULL, S(0), "extrainfo", T(Array), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagefttext.php )\n *\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @size       float   The font size to use in points.\n * @angle      float   The angle in degrees, with 0 degrees being\n *                     left-to-right reading text. Higher values represent\n *                     a counter-clockwise rotation. For example, a value\n *                     of 90 would result in bottom-to-top reading text.\n * @x          int     The coordinates given by x and y will define the\n *                     basepoint of the first character (roughly the\n *                     lower-left corner of the character). This is\n *                     different from the imagestring(), where x and y\n *                     define the upper-left corner of the first character.\n *                     For example, \"top left\" is 0, 0.\n * @y          int     The y-ordinate. This sets the position of the fonts\n *                     baseline, not the very bottom of the character.\n * @col        int     The index of the desired color for the text, see\n *                     imagecolorexact().\n * @font_file  string  The path to the TrueType font you wish to use.\n *\n *                     Depending on which version of the GD library PHP is\n *                     using, when fontfile does not begin with a leading /\n *                     then .ttf will be appended to the filename and the\n *                     library will attempt to search for that filename\n *                     along a library-defined font path.\n *\n *                     When using versions of the GD library lower than\n *                     2.0.18, a space character, rather than a semicolon,\n *                     was used as the 'path separator' for different font\n *                     files. Unintentional use of this feature will result\n *                     in the warning message: Warning: Could not find/open\n *                     font. For these affected versions, the only solution\n *                     is moving the font to a path which does not contain\n *                     spaces.\n *\n *                     In many cases where a font resides in the same\n *                     directory as the script using it the following trick\n *                     will alleviate any include problems.\n * @text       string  Text to be inserted into image.\n * @extrainfo  map     Possible array indexes for extrainfo Key Type\n *                     Meaning linespacing float Defines drawing\n *                     linespacing\n *\n * @return     mixed   This function returns an array defining the four\n *                     points of the box, starting in the lower left and\n *                     moving counter-clockwise: 0 lower left x-coordinate\n *                     1 lower left y-coordinate 2 lower right x-coordinate\n *                     3 lower right y-coordinate 4 upper right\n *                     x-coordinate 5 upper right y-coordinate 6 upper left\n *                     x-coordinate 7 upper left y-coordinate\n */",
"imagegammacorrect", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "inputgamma", T(Double), NULL, S(0), NULL, S(0), "outputgamma", T(Double), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagegammacorrect.php )\n *\n * Applies gamma correction to the given gd image given an input and an\n * output gamma.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @inputgamma float   The input gamma.\n * @outputgamma\n *             float   The output gamma.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagegd2", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "filename", T(String), "N;", S(2), "null", S(0), "chunk_size", T(Int32), "i:0;", S(4), "0", S(0), "type", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagegd2.php )\n *\n * Outputs a GD2 image to the given filename.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n * @chunk_size int     Chunk size.\n * @type       int     Either IMG_GD2_RAW or IMG_GD2_COMPRESSED. Default is\n *                     IMG_GD2_RAW.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagegd", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "filename", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagegd.php )\n *\n * Outputs a GD image to the given filename.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagegif", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "filename", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagegif.php )\n *\n * imagegif() creates the GIF file in filename from the image image. The\n * image argument is the return from the imagecreate() or imagecreatefrom*\n * function.\n *\n * The image format will be GIF87a unless the image has been made\n * transparent with imagecolortransparent(), in which case the image format\n * will be GIF89a.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagegrabscreen", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagegrabscreen.php )\n *\n * Grabs a screenshot of the whole screen.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on failure.\n */", 
"imagegrabwindow", T(Variant), S(0), "window", T(Int32), NULL, S(0), NULL, S(0), "client_area", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagegrabwindow.php )\n *\n * Grabs a window or its client area using a windows handle (HWND property\n * in COM instance)\n *\n * @window     int     The HWND window ID.\n * @client_area\n *             int     Include the client area of the application window.\n *\n * @return     mixed   Returns an image resource identifier on success,\n *                     FALSE on failure.\n */",
"imageinterlace", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "interlace", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imageinterlace.php )\n *\n * imageinterlace() turns the interlace bit on or off.\n *\n * If the interlace bit is set and the image is used as a JPEG image, the\n * image is created as a progressive JPEG.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @interlace  int     If non-zero, the image will be interlaced, else the\n *                     interlace bit is turned off.\n *\n * @return     mixed   Returns 1 if the interlace bit is set for the image,\n *                     0 otherwise.\n */",
"imageistruecolor", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imageistruecolor.php )\n *\n * imageistruecolor() finds whether the image image is a truecolor image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n *\n * @return     bool    Returns TRUE if the image is truecolor, FALSE\n *                     otherwise.\n */",
"imagejpeg", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "filename", T(String), "N;", S(2), "null", S(0), "quality", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagejpeg.php )\n *\n * imagejpeg() creates a JPEG file from the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n *\n *                     To skip this argument in order to provide the\n *                     quality parameter, use NULL.\n * @quality    int     quality is optional, and ranges from 0 (worst\n *                     quality, smaller file) to 100 (best quality, biggest\n *                     file). The default is the default IJG quality value\n *                     (about 75).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagelayereffect", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "effect", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagelayereffect.php )\n *\n * Set the alpha blending flag to use the bundled libgd layering effects.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @effect     int     One of the following constants: IMG_EFFECT_REPLACE\n *                     Use pixel replacement (equivalent of passing TRUE to\n *                     imagealphablending())\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imageline", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "x1", T(Int32), NULL, S(0), NULL, S(0), "y1", T(Int32), NULL, S(0), NULL, S(0), "x2", T(Int32), NULL, S(0), NULL, S(0), "y2", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imageline.php )\n *\n * Draws a line between the two given points.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x1         int     x-coordinate for first point.\n * @y1         int     y-coordinate for first point.\n * @x2         int     x-coordinate for second point.\n * @y2         int     y-coordinate for second point.\n * @color      int     The line color. A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imageloadfont", T(Variant), S(0), "file", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imageloadfont.php )\n *\n * imageloadfont() loads a user-defined bitmap and returns its identifier.\n *\n * @file       string  The font file format is currently binary and\n *                     architecture dependent. This means you should\n *                     generate the font files on the same type of CPU as\n *                     the machine you are running PHP on.\n *\n *                     Font file format byte position C data type\n *                     description byte 0-3 int number of characters in the\n *                     font byte 4-7 int value of first character in the\n *                     font (often 32 for space) byte 8-11 int pixel width\n *                     of each character byte 12-15 int pixel height of\n *                     each character byte 16- char array with character\n *                     data, one byte per pixel in each character, for a\n *                     total of (nchars*width*height) bytes.\n *\n * @return     mixed   The font identifier which is always bigger than 5 to\n *                     avoid conflicts with built-in fonts or FALSE on\n *                     errors.\n */",
"imagepalettecopy", T(Void), S(0), "destination", T(Object), NULL, S(0), NULL, S(0), "source", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagepalettecopy.php )\n *\n * imagepalettecopy() copies the palette from the source image to the\n * destination image.\n *\n * @destination\n *             resource\n *                     The destination image resource.\n * @source     resource\n *                     The source image resource.\n *\n * @return     mixed   No value is returned.\n */",
"imagepng", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "filename", T(String), "N;", S(2), "null", S(0), "quality", T(Int32), "i:-1;", S(5), "-1", S(0), "filters", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagepng.php )\n *\n * Outputs or saves a PNG image from the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n *\n *                     NULL is invalid if the quality and filters\n *                     arguments are not used.\n * @quality    int     Compression level: from 0 (no compression) to 9.\n * @filters    int     Allows reducing the PNG file size. It is a bitmask\n *                     field which may be set to any combination of the\n *                     PNG_FILTER_XXX constants. PNG_NO_FILTER or\n *                     PNG_ALL_FILTERS may also be used to respectively\n *                     disable or activate all filters.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagepolygon", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "points", T(Array), NULL, S(0), NULL, S(0), "num_points", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagepolygon.php )\n *\n * imagepolygon() creates a polygon in the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @points     vector  An array containing the polygon's vertices, e.g.:\n *                     points[0] = x0 points[1] = y0 points[2] = x1\n *                     points[3] = y1\n * @num_points int     Total number of points (vertices).\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagepsbbox", T(Array), S(0), "text", T(String), NULL, S(0), NULL, S(0), "font", T(Int32), NULL, S(0), NULL, S(0), "size", T(Int32), NULL, S(0), NULL, S(0), "space", T(Int32), "i:0;", S(4), "0", S(0), "tightness", T(Int32), "i:0;", S(4), "0", S(0), "angle", T(Double), "d:0;", S(4), "0.0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagepsbbox.php )\n *\n * Gives the bounding box of a text rectangle using PostScript Type1\n * fonts.\n *\n * The bounding box is calculated using information available from\n * character metrics, and unfortunately tends to differ slightly from the\n * results achieved by actually rasterizing the text. If the angle is 0\n * degrees, you can expect the text to need 1 pixel more to every\n * direction.\n *\n * @text       string  The text to be written.\n * @font       int     A font resource, returned by imagepsloadfont().\n * @size       int     size is expressed in pixels.\n * @space      int     Allows you to change the default value of a space in\n *                     a font. This amount is added to the normal value and\n *                     can also be negative. Expressed in character space\n *                     units, where 1 unit is 1/1000th of an em-square.\n * @tightness  int     tightness allows you to control the amount of white\n *                     space between characters. This amount is added to\n *                     the normal character width and can also be negative.\n *                     Expressed in character space units, where 1 unit is\n *                     1/1000th of an em-square.\n * @angle      float   angle is in degrees.\n *\n * @return     vector  Returns an array containing the following elements:\n *                     0 left x-coordinate 1 upper y-coordinate 2 right\n *                     x-coordinate 3 lower y-coordinate\n */",
"imagepsencodefont", T(Boolean), S(0), "font_index", T(Object), NULL, S(0), NULL, S(0), "encodingfile", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagepsencodefont.php )\n *\n * Loads a character encoding vector from a file and changes the fonts\n * encoding vector to it. As a PostScript fonts default vector lacks most\n * of the character positions above 127, you'll definitely want to change\n * this if you use an other language than English.\n *\n * If you find yourself using this function all the time, a much better\n * way to define the encoding is to set ps.default_encoding in the\n * configuration file to point to the right encoding file and all fonts you\n * load will automatically have the right encoding.\n *\n * @font_index resource\n *                     A font resource, returned by imagepsloadfont().\n * @encodingfile\n *             string  The exact format of this file is described in T1libs\n *                     documentation. T1lib comes with two ready-to-use\n *                     files, IsoLatin1.enc and IsoLatin2.enc.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagepsextendfont", T(Boolean), S(0), "font_index", T(Int32), NULL, S(0), NULL, S(0), "extend", T(Double), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagepsextendfont.php )\n *\n * Extend or condense a font (font_index), if the value of the extend\n * parameter is less than one you will be condensing the font.\n *\n * @font_index int     A font resource, returned by imagepsloadfont().\n * @extend     float   Extension value, must be greater than 0.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagepsfreefont", T(Boolean), S(0), "fontindex", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagepsfreefont.php )\n *\n * imagepsfreefont() frees memory used by a PostScript Type 1 font.\n *\n * @fontindex  resource\n *                     A font resource, returned by imagepsloadfont().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagepsloadfont", T(Object), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagepsloadfont.php )\n *\n * Load a PostScript Type 1 font from the given filename.\n *\n * @filename   string  Path to the Postscript font file.\n *\n * @return     resource\n *                     In the case everything went right, a valid font\n *                     index will be returned and can be used for further\n *                     purposes. Otherwise the function returns FALSE.\n */",
"imagepsslantfont", T(Boolean), S(0), "font_index", T(Object), NULL, S(0), NULL, S(0), "slant", T(Double), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagepsslantfont.php )\n *\n * Slant a given font given.\n *\n * @font_index resource\n *                     A font resource, returned by imagepsloadfont().\n * @slant      float   Slant level.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagepstext", T(Array), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "text", T(String), NULL, S(0), NULL, S(0), "font", T(Object), NULL, S(0), NULL, S(0), "size", T(Int32), NULL, S(0), NULL, S(0), "foreground", T(Int32), NULL, S(0), NULL, S(0), "background", T(Int32), NULL, S(0), NULL, S(0), "x", T(Int32), NULL, S(0), NULL, S(0), "y", T(Int32), NULL, S(0), NULL, S(0), "space", T(Int32), "i:0;", S(4), "0", S(0), "tightness", T(Int32), "i:0;", S(4), "0", S(0), "angle", T(Double), "d:0;", S(4), "0.0", S(0), "antialias_steps", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagepstext.php )\n *\n * Draws a text on an image using PostScript Type1 fonts.\n *\n * Refer to PostScript documentation about fonts and their measuring\n * system if you have trouble understanding how this works.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @text       string  The text to be written.\n * @font       resource\n *                     A font resource, returned by imagepsloadfont().\n * @size       int     size is expressed in pixels.\n * @foreground int     The color in which the text will be painted.\n * @background int     The color to which the text will try to fade in with\n *                     antialiasing. No pixels with the color background\n *                     are actually painted, so the background image does\n *                     not need to be of solid color.\n * @x          int     x-coordinate for the lower-left corner of the first\n *                     character.\n * @y          int     y-coordinate for the lower-left corner of the first\n *                     character.\n * @space      int     Allows you to change the default value of a space in\n *                     a font. This amount is added to the normal value and\n *                     can also be negative. Expressed in character space\n *                     units, where 1 unit is 1/1000th of an em-square.\n * @tightness  int     tightness allows you to control the amount of white\n *                     space between characters. This amount is added to\n *                     the normal character width and can also be negative.\n *                     Expressed in character space units, where 1 unit is\n *                     1/1000th of an em-square.\n * @angle      float   angle is in degrees.\n * @antialias_steps\n *             int     Allows you to control the number of colours used for\n *                     antialiasing text. Allowed values are 4 and 16. The\n *                     higher value is recommended for text sizes lower\n *                     than 20, where the effect in text quality is quite\n *                     visible. With bigger sizes, use 4. It's less\n *                     computationally intensive.\n *\n * @return     vector  This function returns an array containing the\n *                     following elements: 0 lower left x-coordinate 1\n *                     lower left y-coordinate 2 upper right x-coordinate 3\n *                     upper right y-coordinate\n */",
"imagerectangle", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "x1", T(Int32), NULL, S(0), NULL, S(0), "y1", T(Int32), NULL, S(0), NULL, S(0), "x2", T(Int32), NULL, S(0), NULL, S(0), "y2", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagerectangle.php )\n *\n * imagerectangle() creates a rectangle starting at the specified\n * coordinates.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x1         int     Upper left x coordinate.\n * @y1         int     Upper left y coordinate 0, 0 is the top left corner\n *                     of the image.\n * @x2         int     Bottom right x coordinate.\n * @y2         int     Bottom right y coordinate.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagerotate", T(Variant), S(0), "source_image", T(Object), NULL, S(0), NULL, S(0), "angle", T(Double), NULL, S(0), NULL, S(0), "bgd_color", T(Int32), NULL, S(0), NULL, S(0), "ignore_transparent", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagerotate.php )\n *\n * Rotates the image image using the given angle in degrees.\n *\n * The center of rotation is the center of the image, and the rotated\n * image may have different dimensions than the original image.\n *\n * @source_image\n *             resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @angle      float   Rotation angle, in degrees.\n * @bgd_color  int     Specifies the color of the uncovered zone after the\n *                     rotation\n * @ignore_transparent\n *             int     If set and non-zero, transparent colors are ignored\n *                     (otherwise kept).\n *\n * @return     mixed   Returns an image resource for the rotated image, or\n *                     FALSE on failure.\n */",
"imagesavealpha", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "saveflag", T(Boolean), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagesavealpha.php )\n *\n * imagesavealpha() sets the flag to attempt to save full alpha channel\n * information (as opposed to single-color transparency) when saving PNG\n * images.\n *\n * You have to unset alphablending (imagealphablending($im, false)), to\n * use it.\n *\n * Alpha channel is not supported by all browsers, if you have problem\n * with your browser, try to load your script with an alpha channel\n * compliant browser, e.g. latest Mozilla.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @saveflag   bool    Whether to save the alpha channel or not. Default to\n *                     FALSE.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagesetbrush", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "brush", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagesetbrush.php )\n *\n * imagesetbrush() sets the brush image to be used by all line drawing\n * functions (such as imageline() and imagepolygon()) when drawing with the\n * special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @brush      resource\n *                     An image resource.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagesetpixel", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "x", T(Int32), NULL, S(0), NULL, S(0), "y", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagesetpixel.php )\n *\n * imagesetpixel() draws a pixel at the specified coordinate.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @x          int     x-coordinate.\n * @y          int     y-coordinate.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagesetstyle", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "style", T(Array), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagesetstyle.php )\n *\n * imagesetstyle() sets the style to be used by all line drawing functions\n * (such as imageline() and imagepolygon()) when drawing with the special\n * color IMG_COLOR_STYLED or lines of images with color\n * IMG_COLOR_STYLEDBRUSHED.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @style      map     An array of pixel colors. You can use the\n *                     IMG_COLOR_TRANSPARENT constant to add a transparent\n *                     pixel.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagesetthickness", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "thickness", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagesetthickness.php )\n *\n * imagesetthickness() sets the thickness of the lines drawn when drawing\n * rectangles, polygons, ellipses etc. etc. to thickness pixels.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @thickness  int     Thickness, in pixels.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagesettile", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "tile", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagesettile.php )\n *\n * imagesettile() sets the tile image to be used by all region filling\n * functions (such as imagefill() and imagefilledpolygon()) when filling\n * with the special color IMG_COLOR_TILED.\n *\n * A tile is an image used to fill an area with a repeated pattern. Any GD\n * image can be used as a tile, and by setting the transparent color index\n * of the tile image with imagecolortransparent(), a tile allows certain\n * parts of the underlying area to shine through can be created.\n *\n * You need not take special action when you are finished with a tile, but\n * if you destroy the tile image, you must not use the IMG_COLOR_TILED\n * color until you have set a new tile image!\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @tile       resource\n *                     The image resource to be used as a tile.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagestring", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "font", T(Int32), NULL, S(0), NULL, S(0), "x", T(Int32), NULL, S(0), NULL, S(0), "y", T(Int32), NULL, S(0), NULL, S(0), "str", T(String), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagestring.php )\n *\n * Draws a string at the given coordinates.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @font       int     Can be 1, 2, 3, 4, 5 for built-in fonts in latin2\n *                     encoding (where higher numbers corresponding to\n *                     larger fonts) or any of your own font identifiers\n *                     registered with imageloadfont().\n * @x          int     x-coordinate of the upper left corner.\n * @y          int     y-coordinate of the upper left corner.\n * @str        string  The string to be written.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagestringup", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "font", T(Int32), NULL, S(0), NULL, S(0), "x", T(Int32), NULL, S(0), NULL, S(0), "y", T(Int32), NULL, S(0), NULL, S(0), "str", T(String), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagestringup.php )\n *\n * Draws a string vertically at the given coordinates.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @font       int     Can be 1, 2, 3, 4, 5 for built-in fonts in latin2\n *                     encoding (where higher numbers corresponding to\n *                     larger fonts) or any of your own font identifiers\n *                     registered with imageloadfont().\n * @x          int     x-coordinate of the bottom left corner.\n * @y          int     y-coordinate of the bottom left corner.\n * @str        string  The string to be written.\n * @color      int     A color identifier created with\n *                     imagecolorallocate().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagesx", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagesx.php )\n *\n * Returns the width of the given image resource.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n *\n * @return     mixed   Return the width of the image or FALSE on errors.\n */",
"imagesy", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagesy.php )\n *\n * Returns the height of the given image resource.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n *\n * @return     mixed   Return the height of the image or FALSE on errors.\n */",
"imagetruecolortopalette", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "dither", T(Boolean), NULL, S(0), NULL, S(0), "ncolors", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.imagetruecolortopalette.php )\n *\n * imagetruecolortopalette() converts a truecolor image to a palette\n * image. The code for this function was originally drawn from the\n * Independent JPEG Group library code, which is excellent. The code has\n * been modified to preserve as much alpha channel information as possible\n * in the resulting palette, in addition to preserving colors as well as\n * possible. This does not work as well as might be hoped. It is usually\n * best to simply produce a truecolor output image instead, which\n * guarantees the highest output quality.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @dither     bool    Indicates if the image should be dithered - if it is\n *                     TRUE then dithering will be used which will result\n *                     in a more speckled image but with better color\n *                     approximation.\n * @ncolors    int     Sets the maximum number of colors that should be\n *                     retained in the palette.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"imagettfbbox", T(Variant), S(0), "size", T(Double), NULL, S(0), NULL, S(0), "angle", T(Double), NULL, S(0), NULL, S(0), "fontfile", T(String), NULL, S(0), NULL, S(0), "text", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagettfbbox.php )\n *\n * This function calculates and returns the bounding box in pixels for a\n * TrueType text.\n *\n * @size       float   The font size. Depending on your version of GD, this\n *                     should be specified as the pixel size (GD1) or point\n *                     size (GD2).\n * @angle      float   Angle in degrees in which text will be measured.\n * @fontfile   string  The name of the TrueType font file (can be a URL).\n *                     Depending on which version of the GD library that\n *                     PHP is using, it may attempt to search for files\n *                     that do not begin with a leading '/' by appending\n *                     '.ttf' to the filename and searching along a\n *                     library-defined font path.\n * @text       string  The string to be measured.\n *\n * @return     mixed   imagettfbbox() returns an array with 8 elements\n *                     representing four points making the bounding box of\n *                     the text on success and FALSE on error. key contents\n *                     0 lower left corner, X position 1 lower left corner,\n *                     Y position 2 lower right corner, X position 3 lower\n *                     right corner, Y position 4 upper right corner, X\n *                     position 5 upper right corner, Y position 6 upper\n *                     left corner, X position 7 upper left corner, Y\n *                     position\n *\n *                     The points are relative to the text regardless of\n *                     the angle, so \"upper left\" means in the top\n *                     left-hand corner seeing the text horizontally.\n */",
"imagettftext", T(Variant), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "size", T(Double), NULL, S(0), NULL, S(0), "angle", T(Double), NULL, S(0), NULL, S(0), "x", T(Int32), NULL, S(0), NULL, S(0), "y", T(Int32), NULL, S(0), NULL, S(0), "color", T(Int32), NULL, S(0), NULL, S(0), "fontfile", T(String), NULL, S(0), NULL, S(0), "text", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagettftext.php )\n *\n * Writes the given text into the image using TrueType fonts.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @size       float   The font size. Depending on your version of GD, this\n *                     should be specified as the pixel size (GD1) or point\n *                     size (GD2).\n * @angle      float   The angle in degrees, with 0 degrees being\n *                     left-to-right reading text. Higher values represent\n *                     a counter-clockwise rotation. For example, a value\n *                     of 90 would result in bottom-to-top reading text.\n * @x          int     The coordinates given by x and y will define the\n *                     basepoint of the first character (roughly the\n *                     lower-left corner of the character). This is\n *                     different from the imagestring(), where x and y\n *                     define the upper-left corner of the first character.\n *                     For example, \"top left\" is 0, 0.\n * @y          int     The y-ordinate. This sets the position of the fonts\n *                     baseline, not the very bottom of the character.\n * @color      int     The color index. Using the negative of a color index\n *                     has the effect of turning off antialiasing. See\n *                     imagecolorallocate().\n * @fontfile   string  The path to the TrueType font you wish to use.\n *\n *                     Depending on which version of the GD library PHP is\n *                     using, when fontfile does not begin with a leading /\n *                     then .ttf will be appended to the filename and the\n *                     library will attempt to search for that filename\n *                     along a library-defined font path.\n *\n *                     When using versions of the GD library lower than\n *                     2.0.18, a space character, rather than a semicolon,\n *                     was used as the 'path separator' for different font\n *                     files. Unintentional use of this feature will result\n *                     in the warning message: Warning: Could not find/open\n *                     font. For these affected versions, the only solution\n *                     is moving the font to a path which does not contain\n *                     spaces.\n *\n *                     In many cases where a font resides in the same\n *                     directory as the script using it the following trick\n *                     will alleviate any include problems.\n * @text       string  The text string in UTF-8 encoding.\n *\n *                     May include decimal numeric character references\n *                     (of the form: &#8364;) to access characters in a\n *                     font beyond position 127. The hexadecimal format\n *                     (like &#xA9;) is supported. Strings in UTF-8\n *                     encoding can be passed directly.\n *\n *                     Named entities, such as &copy;, are not supported.\n *                     Consider using html_entity_decode() to decode these\n *                     named entities into UTF-8 strings\n *                     (html_entity_decode() supports this as of PHP\n *                     5.0.0).\n *\n *                     If a character is used in the string which is not\n *                     supported by the font, a hollow rectangle will\n *                     replace the character.\n *\n * @return     mixed   Returns an array with 8 elements representing four\n *                     points making the bounding box of the text. The\n *                     order of the points is lower left, lower right,\n *                     upper right, upper left. The points are relative to\n *                     the text regardless of the angle, so \"upper left\"\n *                     means in the top left-hand corner when you see the\n *                     text horizontally. Returns FALSE on error.\n */",
"imagetypes", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagetypes.php )\n *\n * Returns the image types supported by the current PHP installation.\n *\n * @return     int     Returns a bit-field corresponding to the image\n *                     formats supported by the version of GD linked into\n *                     PHP. The following bits are returned, IMG_GIF |\n *                     IMG_JPG | IMG_PNG | IMG_WBMP | IMG_XPM.\n */", 
"imagewbmp", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "filename", T(String), "N;", S(2), "null", S(0), "foreground", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagewbmp.php )\n *\n * imagewbmp() outputs or save a WBMP version of the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n * @foreground int     You can set the foreground color with this parameter\n *                     by setting an identifier obtained from\n *                     imagecolorallocate(). The default foreground color\n *                     is black.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"imagexbm", T(Boolean), S(0), "image", T(Object), NULL, S(0), NULL, S(0), "filename", T(String), "N;", S(2), "null", S(0), "foreground", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.imagexbm.php )\n *\n * Outputs or save an XBM version of the given image.\n *\n * @image      resource\n *                     An image resource, returned by one of the image\n *                     creation functions, such as imagecreatetruecolor().\n * @filename   string  The path to save the file to. If not set or NULL,\n *                     the raw image stream will be outputted directly.\n * @foreground int     You can set the foreground color with this parameter\n *                     by setting an identifier obtained from\n *                     imagecolorallocate(). The default foreground color\n *                     is black.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"iptcembed", T(Variant), S(0), "iptcdata", T(String), NULL, S(0), NULL, S(0), "jpeg_file_name", T(String), NULL, S(0), NULL, S(0), "spool", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iptcembed.php )\n *\n * Embeds binary IPTC data into a JPEG image.\n *\n * @iptcdata   string  The data to be written.\n * @jpeg_file_name\n *             string  Path to the JPEG image.\n * @spool      int     Spool flag. If the spool flag is over 2 then the\n *                     JPEG will be returned as a string.\n *\n * @return     mixed   If success and spool flag is lower than 2 then the\n *                     JPEG will not be returned as a string, FALSE on\n *                     errors.\n */",
"iptcparse", T(Variant), S(0), "iptcblock", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iptcparse.php )\n *\n * Parses an \273 IPTC block into its single tags.\n *\n * @iptcblock  string  A binary IPTC block.\n *\n * @return     mixed   Returns an array using the tagmarker as an index and\n *                     the value as the value. It returns FALSE on error or\n *                     if no IPTC data was found.\n */",
"jpeg2wbmp", T(Boolean), S(0), "jpegname", T(String), NULL, S(0), NULL, S(0), "wbmpname", T(String), NULL, S(0), NULL, S(0), "dest_height", T(Int32), NULL, S(0), NULL, S(0), "dest_width", T(Int32), NULL, S(0), NULL, S(0), "threshold", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.jpeg2wbmp.php )\n *\n * Converts a JPEG file into a WBMP file.\n *\n * @jpegname   string  Path to JPEG file.\n * @wbmpname   string  Path to destination WBMP file.\n * @dest_height\n *             int     Destination image height.\n * @dest_width int     Destination image width.\n * @threshold  int     Threshold value, between 0 and 8 (inclusive).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"png2wbmp", T(Boolean), S(0), "pngname", T(String), NULL, S(0), NULL, S(0), "wbmpname", T(String), NULL, S(0), NULL, S(0), "dest_height", T(Int32), NULL, S(0), NULL, S(0), "dest_width", T(Int32), NULL, S(0), NULL, S(0), "threshold", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.png2wbmp.php )\n *\n * Converts a PNG file into a WBMP file.\n *\n * @pngname    string  Path to PNG file.\n * @wbmpname   string  Path to destination WBMP file.\n * @dest_height\n *             int     Destination image height.\n * @dest_width int     Destination image width.\n * @threshold  int     Threshold value, between 0 and 8 (inclusive).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"exif_imagetype", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.exif-imagetype.php )\n *\n * exif_imagetype() reads the first bytes of an image and checks its\n * signature.\n *\n * exif_imagetype() can be used to avoid calls to other exif functions\n * with unsupported file types or in conjunction with\n * $_SERVER['HTTP_ACCEPT'] to check whether or not the viewer is able to\n * see a specific image in the browser.\n *\n * @filename   string  The image being checked.\n *\n * @return     mixed   When a correct signature is found, the appropriate\n *                     constant value will be returned otherwise the return\n *                     value is FALSE. The return value is the same value\n *                     that getimagesize() returns in index 2 but\n *                     exif_imagetype() is much faster.\n */",
"exif_read_data", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "sections", T(String), "N;", S(2), "null", S(0), "arrays", T(Boolean), "b:0;", S(4), "false", S(0), "thumbnail", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.exif-read-data.php )\n *\n * exif_read_data() reads the EXIF headers from a JPEG or TIFF image file.\n * This way you can read meta data generated by digital cameras.\n *\n * EXIF headers tend to be present in JPEG/TIFF images generated by\n * digital cameras, but unfortunately each digital camera maker has a\n * different idea of how to actually tag their images, so you can't always\n * rely on a specific Exif header being present.\n *\n * Height and Width are computed the same way getimagesize() does so their\n * values must not be part of any header returned. Also, html is a\n * height/width text string to be used inside normal HTML.\n *\n * When an Exif header contains a Copyright note, this itself can contain\n * two values. As the solution is inconsistent in the Exif 2.10 standard,\n * the COMPUTED section will return both entries Copyright.Photographer and\n * Copyright.Editor while the IFD0 sections contains the byte array with\n * the NULL character that splits both entries. Or just the first entry if\n * the datatype was wrong (normal behaviour of Exif). The COMPUTED will\n * also contain the entry Copyright which is either the original copyright\n * string, or a comma separated list of the photo and editor copyright.\n *\n * The tag UserComment has the same problem as the Copyright tag. It can\n * store two values. First the encoding used, and second the value itself.\n * If so the IFD section only contains the encoding or a byte array. The\n * COMPUTED section will store both in the entries UserCommentEncoding and\n * UserComment. The entry UserComment is available in both cases so it\n * should be used in preference to the value in IFD0 section.\n *\n * exif_read_data() also validates EXIF data tags according to the EXIF\n * specification (\273 http://exif.org/Exif2-2.PDF, page 20).\n *\n * Windows ME/XP can both wipe the Exif headers when connecting to a\n * camera. More information available at \273\n * http://www.canon.co.jp/Imaging/NOTICE/011214-e.html.\n *\n * @filename   string  The name of the image file being read. This cannot\n *                     be an URL.\n * @sections   string  Is a comma separated list of sections that need to\n *                     be present in file to produce a result array. If\n *                     none of the requested sections could be found the\n *                     return value is FALSE. FILE FileName, FileSize,\n *                     FileDateTime, SectionsFound COMPUTED html, Width,\n *                     Height, IsColor, and more if available. Height and\n *                     Width are computed the same way getimagesize() does\n *                     so their values must not be part of any header\n *                     returned. Also, html is a height/width text string\n *                     to be used inside normal HTML. ANY_TAG Any\n *                     information that has a Tag e.g. IFD0, EXIF, ... IFD0\n *                     All tagged data of IFD0. In normal imagefiles this\n *                     contains image size and so forth. THUMBNAIL A file\n *                     is supposed to contain a thumbnail if it has a\n *                     second IFD. All tagged information about the\n *                     embedded thumbnail is stored in this section.\n *                     COMMENT Comment headers of JPEG images. EXIF The\n *                     EXIF section is a sub section of IFD0. It contains\n *                     more detailed information about an image. Most of\n *                     these entries are digital camera related.\n * @arrays     bool    Specifies whether or not each section becomes an\n *                     array. The sections COMPUTED, THUMBNAIL, and COMMENT\n *                     always become arrays as they may contain values\n *                     whose names conflict with other sections.\n * @thumbnail  bool    When set to TRUE the thumbnail itself is read.\n *                     Otherwise, only the tagged data is read.\n *\n * @return     mixed   It returns an associative array where the array\n *                     indexes are the header names and the array values\n *                     are the values associated with those headers. If no\n *                     data can be returned, exif_read_data() will return\n *                     FALSE.\n */",
"read_exif_data", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "sections", T(String), "N;", S(2), "null", S(0), "arrays", T(Boolean), "b:0;", S(4), "false", S(0), "thumbnail", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.read-exif-data.php )\n *\n *\n * @filename   string\n * @sections   string\n * @arrays     bool\n * @thumbnail  bool\n *\n * @return     mixed\n */",
"exif_tagname", T(Variant), S(0), "index", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.exif-tagname.php )\n *\n *\n * @index      int     The image index\n *\n * @return     mixed   Returns the header name, or FALSE if index is\n *                     undefined.\n */",
"exif_thumbnail", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "width", T(Variant), "N;", S(2), "null", S(1), "height", T(Variant), "N;", S(2), "null", S(1), "imagetype", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.exif-thumbnail.php )\n *\n * exif_thumbnail() reads the embedded thumbnail of a TIFF or JPEG image.\n *\n * If you want to deliver thumbnails through this function, you should\n * send the mimetype information using the header() function.\n *\n * It is possible that exif_thumbnail() cannot create an image but can\n * determine its size. In this case, the return value is FALSE but width\n * and height are set.\n *\n * @filename   string  The name of the image file being read. This image\n *                     contains an embedded thumbnail.\n * @width      mixed   The return width of the returned thumbnail.\n * @height     mixed   The returned height of the returned thumbnail.\n * @imagetype  mixed   The returned image type of the returned thumbnail.\n *                     This is either TIFF or JPEG.\n *\n * @return     mixed   Returns the embedded thumbnail, or FALSE if the\n *                     image contains no thumbnail.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
