// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"dangling_server_proxy_old_request", T(Boolean), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * When I'm running a newer version of the server software and I'm getting\n * an HTTP request that's from old version of a web page, proxy it to a\n * local instance that is still running or dangling just for handling old\n * version of requests. Please read server documentation for more details.\n *\n * @return     bool    TRUE if successful, FALSE otherwise.\n */", 
"dangling_server_proxy_new_request", T(Boolean), S(0), "host", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * When I'm still running an old version of the server software and I'm\n * getting an HTTP request that's newer, proxy it to a specified host that\n * already has the new version of the software running. Please read server\n * documentation for more details.\n *\n * @host       string  The machine to proxy to.\n *\n * @return     bool    TRUE if successful, FALSE otherwise.\n */", 
"pagelet_server_is_enabled", T(Boolean), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Whether pagelet server is enabled or not. Please read server\n * documentation for what a pagelet server is.\n *\n * @return     bool    TRUE if it's enabled, FALSE otherwise.\n */", 
"pagelet_server_task_start", T(Object), S(0), "url", T(String), NULL, S(0), NULL, S(0), "headers", T(Array), "N;", S(2), "null", S(0), "post_data", T(String), "N;", S(2), "null", S(0), "files", T(Array), "N;", S(2), "null", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Processes a pagelet server request.\n *\n * @url        string  The URL we're running this pagelet with.\n * @headers    map     HTTP headers to send to the pagelet.\n * @post_data  string  POST data to send.\n * @files      vector  Array for the pagelet.\n *\n * @return     resource\n *                     An object that can be used with\n *                     pagelet_server_task_status() or\n *                     pagelet_server_task_result().\n */", 
"pagelet_server_task_status", T(Int64), S(0), "task", T(Object), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Checks finish status of a pagelet task.\n *\n * @task       resource\n *                     The pagelet task handle returned from\n *                     pagelet_server_task_start().\n *\n * @return     int     PAGELET_NOT_READY if there is no data available,\n *                     PAGELET_READY if (partial) data is available from\n *                     pagelet_server_flush(), and PAGELET_DONE if the\n *                     pagelet request is done.\n */", 
"pagelet_server_task_result", T(String), S(0), "task", T(Object), NULL, S(0), NULL, S(0), "headers", T(Variant), NULL, S(0), NULL, S(1), "code", T(Variant), NULL, S(0), NULL, S(1), "timeout_ms", T(Int64), "i:0;", S(4), "0", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Block and wait until pagelet task finishes or times out.\n *\n * @task       resource\n *                     The pagelet task handle returned from\n *                     pagelet_server_task_start().\n * @headers    mixed   HTTP response headers.\n * @code       mixed   HTTP response code. Set to -1 in the event of a\n *                     timeout.\n * @timeout_ms int     How many milliseconds to wait. A timeout of zero is\n *                     interpreted as an infinite timeout.\n *\n * @return     string  HTTP response from the pagelet.\n */", 
"pagelet_server_flush", T(Void), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Flush all the currently buffered output, so that the main thread can\n * read it with pagelet_server_task_result(). This is only meaningful in a\n * pagelet thread.\n *\n * @return     mixed   No value is returned.\n */", 
"xbox_send_message", T(Boolean), S(0), "msg", T(String), NULL, S(0), NULL, S(0), "ret", T(Variant), NULL, S(0), NULL, S(1), "timeout_ms", T(Int64), NULL, S(0), NULL, S(0), "host", T(String), "s:9:\"localhost\";", S(16), "\"localhost\"", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Sends an xbox message and waits for response. Please read server\n * documentation for what an xbox is.\n *\n * @msg        string  The message.\n * @ret        mixed   The response.\n * @timeout_ms int     How many milli-seconds to wait.\n * @host       string  Which machine to send to.\n *\n * @return     bool    TRUE if successful, FALSE otherwise.\n */", 
"xbox_post_message", T(Boolean), S(0), "msg", T(String), NULL, S(0), NULL, S(0), "host", T(String), "s:9:\"localhost\";", S(16), "\"localhost\"", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Posts an xbox message without waiting. Please read server documentation\n * for more details.\n *\n * @msg        string  The response.\n * @host       string  Which machine to post to.\n *\n * @return     bool    TRUE if successful, FALSE otherwise.\n */", 
"xbox_task_start", T(Object), S(0), "message", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Starts a local xbox task.\n *\n * @message    string  A message to send to xbox's message processing\n *                     function.\n *\n * @return     resource\n *                     A task handle xbox_task_status() and\n *                     xbox_task_result() can use.\n */", 
"xbox_task_status", T(Boolean), S(0), "task", T(Object), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Checks an xbox task's status.\n *\n * @task       resource\n *                     The xbox task object created by xbox_task_start().\n *\n * @return     bool    TRUE if finished, FALSE otherwise.\n */", 
"xbox_task_result", T(Int64), S(0), "task", T(Object), NULL, S(0), NULL, S(0), "timeout_ms", T(Int64), NULL, S(0), NULL, S(0), "ret", T(Variant), NULL, S(0), NULL, S(1), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Block and wait for xbox task's result.\n *\n * @task       resource\n *                     The xbox task object created by xbox_task_start().\n * @timeout_ms int     How many milli-seconds to wait.\n * @ret        mixed   xbox message processing function's return value.\n *\n * @return     int     Response code following HTTP's responses. For\n *                     example, 200 for success and 500 for server error.\n */", 
"xbox_process_call_message", T(Variant), S(0), "msg", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * This function is invoked by the xbox facility to start an xbox call\n * task. This function is not intended to be called directly by user code.\n *\n * @msg        string  The call message.\n *\n * @return     mixed   The return value of the xbox call task.\n */", 
"xbox_get_thread_timeout", T(Int64), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Gets the timeout (maximum duration), in seconds, of the current xbox\n * thread. Throws for non-xbox threads.\n *\n * @return     int     The current timeout (maximum duration).\n */", 
"xbox_set_thread_timeout", T(Void), S(0), "timeout", T(Int32), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Sets the timeout (maximum duration), in seconds, of the current xbox\n * thread. The xbox thread would reset when this amount of time has passed\n * since the previous reset. Throws for non-xbox threads.\n *\n * @timeout    int     The new timeout (maximum duration).\n */", 
"xbox_schedule_thread_reset", T(Void), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Schedules a reset of the current xbox thread, when the next request\n * comes in. Throws for non-xbox threads.\n *\n */", 
"xbox_get_thread_time", T(Int64), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Returns the time that the current xbox thread has been running without\n * a reset, in seconds, and throws for non-xbox threads.\n *\n * @return     int     The time that the current xbox thread has been\n *                     running without a reset.\n */", 

#elif EXT_TYPE == 1
"PAGELET_NOT_READY", T(Int64),
"PAGELET_READY", T(Int64),
"PAGELET_DONE", T(Int64),

#elif EXT_TYPE == 2

#endif
