// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"mcrypt_module_open", T(Variant), S(0), "algorithm", T(String), NULL, S(0), NULL, S(0), "algorithm_directory", T(String), NULL, S(0), NULL, S(0), "mode", T(String), NULL, S(0), NULL, S(0), "mode_directory", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-module-open.php\n * )\n *\n * This function opens the module of the algorithm and the mode to be\n * used. The name of the algorithm is specified in algorithm, e.g.\n * \"twofish\" or is one of the MCRYPT_ciphername constants. The module is\n * closed by calling mcrypt_module_close().\n *\n * @algorithm  string  The algorithm to be used.\n * @algorithm_directory\n *             string  The algorithm_directory and mode_directory are used\n *                     to locate the encryption modules. When you supply a\n *                     directory name, it is used. When you set one of\n *                     these to the empty string (\"\"), the value set by the\n *                     mcrypt.algorithms_dir or mcrypt.modes_dir\n *                     ini-directive is used. When these are not set, the\n *                     default directories that are used are the ones that\n *                     were compiled in into libmcrypt (usually\n *                     /usr/local/lib/libmcrypt).\n * @mode       string  The mode to be used.\n * @mode_directory\n *             string\n *\n * @return     mixed   Normally it returns an encryption descriptor, or\n *                     FALSE on error.\n */",
"mcrypt_module_close", T(Boolean), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-module-close.php\n * )\n *\n * Closes the specified encryption handle.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"mcrypt_list_algorithms", T(Array), S(0), "lib_dir", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-list-algorithms.php )\n *\n * Gets the list of all supported algorithms in the lib_dir parameter.\n *\n * @lib_dir    string  Specifies the directory where all algorithms are\n *                     located. If not specifies, the value of the\n *                     mcrypt.algorithms_dir php.ini directive is used.\n *\n * @return     vector  Returns an array with all the supported algorithms.\n */",
"mcrypt_list_modes", T(Array), S(0), "lib_dir", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-list-modes.php )\n *\n * Gets the list of all supported modes in the lib_dir parameter.\n *\n * @lib_dir    string  Specifies the directory where all modes are located.\n *                     If not specifies, the value of the mcrypt.modes_dir\n *                     php.ini directive is used.\n *\n * @return     vector  Returns an array with all the supported modes.\n */",
"mcrypt_module_get_algo_block_size", T(Int64), S(0), "algorithm", T(String), NULL, S(0), NULL, S(0), "lib_dir", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-get-algo-block-size.php\n * )\n *\n * Gets the blocksize of the specified algorithm.\n *\n * @algorithm  string  The algorithm name.\n * @lib_dir    string  This optional parameter can contain the location\n *                     where the mode module is on the system.\n *\n * @return     int     Returns the block size of the algorithm specified in\n *                     bytes.\n */",
"mcrypt_module_get_algo_key_size", T(Int64), S(0), "algorithm", T(String), NULL, S(0), NULL, S(0), "lib_dir", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-get-algo-key-size.php )\n *\n * Gets the maximum supported keysize of the opened mode.\n *\n * @algorithm  string  The algorithm name.\n * @lib_dir    string  This optional parameter can contain the location\n *                     where the mode module is on the system.\n *\n * @return     int     This function returns the maximum supported key size\n *                     of the algorithm specified in bytes.\n */",
"mcrypt_module_get_supported_key_sizes", T(Array), S(0), "algorithm", T(String), NULL, S(0), NULL, S(0), "lib_dir", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-get-supported-key-sizes.php\n * )\n *\n * Returns an array with the key sizes supported by the specified\n * algorithm. If it returns an empty array then all key sizes between 1 and\n * mcrypt_module_get_algo_key_size() are supported by the algorithm.\n *\n * @algorithm  string  The algorithm to used.\n * @lib_dir    string  The optional lib_dir parameter can contain the\n *                     location of where the algorithm module is on the\n *                     system.\n *\n * @return     vector  Returns an array with the key sizes supported by the\n *                     specified algorithm. If it returns an empty array\n *                     then all key sizes between 1 and\n *                     mcrypt_module_get_algo_key_size() are supported by\n *                     the algorithm.\n */",
"mcrypt_module_is_block_algorithm_mode", T(Boolean), S(0), "mode", T(String), NULL, S(0), NULL, S(0), "lib_dir", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-is-block-algorithm-mode.php\n * )\n *\n * This function returns TRUE if the mode is for use with block\n * algorithms, otherwise it returns FALSE. (e.g. FALSE for stream, and TRUE\n * for cbc, cfb, ofb).\n *\n * @mode       string  The mode to check.\n * @lib_dir    string  The optional lib_dir parameter can contain the\n *                     location of where the algorithm module is on the\n *                     system.\n *\n * @return     bool    This function returns TRUE if the mode is for use\n *                     with block algorithms, otherwise it returns FALSE.\n *                     (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb).\n */",
"mcrypt_module_is_block_algorithm", T(Boolean), S(0), "algorithm", T(String), NULL, S(0), NULL, S(0), "lib_dir", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-is-block-algorithm.php )\n *\n * This function returns TRUE if the specified algorithm is a block\n * algorithm, or FALSE is it is a stream algorithm.\n *\n * @algorithm  string  The algorithm to check.\n * @lib_dir    string  The optional lib_dir parameter can contain the\n *                     location of where the algorithm module is on the\n *                     system.\n *\n * @return     bool    This function returns TRUE if the specified\n *                     algorithm is a block algorithm, or FALSE is it is a\n *                     stream algorithm.\n */",
"mcrypt_module_is_block_mode", T(Boolean), S(0), "mode", T(String), NULL, S(0), NULL, S(0), "lib_dir", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-is-block-mode.php )\n *\n * This function returns TRUE if the mode outputs blocks of bytes or FALSE\n * if it outputs just bytes. (e.g. TRUE for cbc and ecb, and FALSE for cfb\n * and stream).\n *\n * @mode       string  The mode to check.\n * @lib_dir    string  The optional lib_dir parameter can contain the\n *                     location of where the algorithm module is on the\n *                     system.\n *\n * @return     bool    This function returns TRUE if the mode outputs\n *                     blocks of bytes or FALSE if it outputs just bytes.\n *                     (e.g. TRUE for cbc and ecb, and FALSE for cfb and\n *                     stream).\n */",
"mcrypt_module_self_test", T(Boolean), S(0), "algorithm", T(String), NULL, S(0), NULL, S(0), "lib_dir", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-module-self-test.php )\n *\n * This function runs the self test on the algorithm specified.\n *\n * @algorithm  string  The algorithm to test.\n * @lib_dir    string  The optional lib_dir parameter can contain the\n *                     location of where the algorithm module is on the\n *                     system.\n *\n * @return     bool    The function returns TRUE if the self test succeeds,\n *                     or FALSE when if fails.\n */",
"mcrypt_create_iv", T(Variant), S(0), "size", T(Int32), NULL, S(0), NULL, S(0), "source", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-create-iv.php )\n *\n * Create an initialization vector (IV) from a random source.\n *\n * The IV is only meant to give an alternative seed to the encryption\n * routines. This IV does not need to be secret at all, though it can be\n * desirable. You even can send it along with your ciphertext without\n * losing security.\n *\n * @size       int     Determines the size of the IV, parameter source\n *                     (defaults to random value) specifies the source of\n *                     the IV.\n * @source     int     The source can be MCRYPT_RAND (system random number\n *                     generator), MCRYPT_DEV_RANDOM (read data from\n *                     /dev/random) and MCRYPT_DEV_URANDOM (read data from\n *                     /dev/urandom). Prior to 5.3.0, MCRYPT_RAND was the\n *                     only one supported on Windows.\n *\n * @return     mixed   Returns the initialization vector, or FALSE on\n *                     error.\n */",
"mcrypt_encrypt", T(Variant), S(0), "cipher", T(String), NULL, S(0), NULL, S(0), "key", T(String), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "mode", T(String), NULL, S(0), NULL, S(0), "iv", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-encrypt.php )\n *\n * Encrypts the data and returns it.\n *\n * @cipher     string  One of the MCRYPT_ciphername constants of the name\n *                     of the algorithm as string.\n * @key        string  The key with which the data will be encrypted. If\n *                     it's smaller that the required keysize, it is padded\n *                     with '\\0'. It is better not to use ASCII strings for\n *                     keys.\n *\n *                     It is recommended to use the mhash functions to\n *                     create a key from a string.\n * @data       string  The data that will be encrypted with the given\n *                     cipher and mode. If the size of the data is not n *\n *                     blocksize, the data will be padded with '\\0'.\n *\n *                     The returned crypttext can be larger that the size\n *                     of the data that is given by data.\n * @mode       string  One of the MCRYPT_MODE_modename constants of one of\n *                     \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".\n * @iv         string  Used for the initialisation in CBC, CFB, OFB modes,\n *                     and in some algorithms in STREAM mode. If you do not\n *                     supply an IV, while it is needed for an algorithm,\n *                     the function issues a warning and uses an IV with\n *                     all bytes set to '\\0'.\n *\n * @return     mixed   Returns the encrypted data, as a string.\n */",
"mcrypt_decrypt", T(Variant), S(0), "cipher", T(String), NULL, S(0), NULL, S(0), "key", T(String), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "mode", T(String), NULL, S(0), NULL, S(0), "iv", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-decrypt.php )\n *\n * Decrypts the data and returns the unencrypted data.\n *\n * @cipher     string  cipher is one of the MCRYPT_ciphername constants of\n *                     the name of the algorithm as string.\n * @key        string  key is the key with which the data is encrypted. If\n *                     it's smaller that the required keysize, it is padded\n *                     with '\\0'.\n * @data       string  data is the data that will be decrypted with the\n *                     given cipher and mode. If the size of the data is\n *                     not n * blocksize, the data will be padded with\n *                     '\\0'.\n * @mode       string  mode is one of the MCRYPT_MODE_modename constants of\n *                     one of \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or\n *                     \"stream\".\n * @iv         string  The iv parameter is used for the initialisation in\n *                     CBC, CFB, OFB modes, and in some algorithms in\n *                     STREAM mode. If you do not supply an IV, while it is\n *                     needed for an algorithm, the function issues a\n *                     warning and uses an IV with all bytes set to '\\0'.\n *\n * @return     mixed   Returns the decrypted data as a string.\n */",
"mcrypt_cbc", T(Variant), S(0), "cipher", T(String), NULL, S(0), NULL, S(0), "key", T(String), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "mode", T(Int32), NULL, S(0), NULL, S(0), "iv", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-cbc.php )\n *\n *\n * @cipher     string\n * @key        string\n * @data       string\n * @mode       int\n * @iv         string\n *\n * @return     mixed\n */",
"mcrypt_cfb", T(Variant), S(0), "cipher", T(String), NULL, S(0), NULL, S(0), "key", T(String), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "mode", T(Int32), NULL, S(0), NULL, S(0), "iv", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-cfb.php )\n *\n *\n * @cipher     string\n * @key        string\n * @data       string\n * @mode       int\n * @iv         string\n *\n * @return     mixed\n */",
"mcrypt_ecb", T(Variant), S(0), "cipher", T(String), NULL, S(0), NULL, S(0), "key", T(String), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "mode", T(Int32), NULL, S(0), NULL, S(0), "iv", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-ecb.php )\n *\n *\n * @cipher     string\n * @key        string\n * @data       string\n * @mode       int\n * @iv         string\n *\n * @return     mixed\n */",
"mcrypt_ofb", T(Variant), S(0), "cipher", T(String), NULL, S(0), NULL, S(0), "key", T(String), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "mode", T(Int32), NULL, S(0), NULL, S(0), "iv", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-ofb.php )\n *\n *\n * @cipher     string\n * @key        string\n * @data       string\n * @mode       int\n * @iv         string\n *\n * @return     mixed\n */",
"mcrypt_get_block_size", T(Variant), S(0), "cipher", T(String), NULL, S(0), NULL, S(0), "module", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-get-block-size.php )\n *\n * The first prototype is when linked against libmcrypt 2.2.x, the second\n * when linked against libmcrypt 2.4.x or 2.5.x.\n *\n * mcrypt_get_block_size() is used to get the size of a block of the\n * specified cipher (in combination with an encryption mode).\n *\n * It is more useful to use the mcrypt_enc_get_block_size() function as\n * this uses the resource returned by mcrypt_module_open().\n *\n * @cipher     string  One of the MCRYPT_ciphername constants or the name\n *                     of the algorithm as string.\n * @module     string  The module.\n *\n * @return     mixed   Gets the block size, as an integer.\n */",
"mcrypt_get_cipher_name", T(Variant), S(0), "cipher", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-get-cipher-name.php )\n *\n * mcrypt_get_cipher_name() is used to get the name of the specified\n * cipher.\n *\n * mcrypt_get_cipher_name() takes the cipher number as an argument\n * (libmcrypt 2.2.x) or takes the cipher name as an argument (libmcrypt\n * 2.4.x or higher) and returns the name of the cipher or FALSE, if the\n * cipher does not exist.\n *\n * @cipher     string  One of the MCRYPT_ciphername constants or the name\n *                     of the algorithm as string.\n *\n * @return     mixed   This function returns the name of the cipher or\n *                     FALSE, if the cipher does not exist.\n */",
"mcrypt_get_iv_size", T(Variant), S(0), "cipher", T(String), NULL, S(0), NULL, S(0), "mode", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-get-iv-size.php\n * )\n *\n * Gets the size of the IV belonging to a specific cipher/mode\n * combination.\n *\n * It is more useful to use the mcrypt_enc_get_iv_size() function as this\n * uses the resource returned by mcrypt_module_open().\n *\n * @cipher     string  One of the MCRYPT_ciphername constants of the name\n *                     of the algorithm as string.\n * @mode       string  mode is one of the MCRYPT_MODE_modename constants or\n *                     one of \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or\n *                     \"stream\". The IV is ignored in ECB mode as this mode\n *                     does not require it. You will need to have the same\n *                     IV (think: starting point) both at encryption and\n *                     decryption stages, otherwise your encryption will\n *                     fail.\n *\n * @return     mixed   Returns the size of the Initialisation Vector (IV)\n *                     in bytes. On error the function returns FALSE. If\n *                     the IV is ignored in the specified cipher/mode\n *                     combination zero is returned.\n */",
"mcrypt_get_key_size", T(Int64), S(0), "cipher", T(String), NULL, S(0), NULL, S(0), "module", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-get-key-size.php\n * )\n *\n *\n * @cipher     string\n * @module     string\n *\n * @return     int\n */",
"mcrypt_enc_get_algorithms_name", T(String), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-get-algorithms-name.php )\n *\n * This function returns the name of the algorithm.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     string  Returns the name of the opened algorithm as a\n *                     string.\n */",
"mcrypt_enc_get_block_size", T(Int64), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-get-block-size.php )\n *\n * Gets the blocksize of the opened algorithm.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     int     Returns the block size of the specified algorithm in\n *                     bytes.\n */",
"mcrypt_enc_get_iv_size", T(Int64), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-get-iv-size.php )\n *\n * This function returns the size of the IV of the algorithm specified by\n * the encryption descriptor in bytes. An IV is used in cbc, cfb and ofb\n * modes, and in some algorithms in stream mode.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     int     Returns the size of the IV, or 0 if the IV is\n *                     ignored in the algorithm.\n */",
"mcrypt_enc_get_key_size", T(Int64), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-get-key-size.php )\n *\n * Gets the maximum supported key size of the algorithm in bytes.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     int     Returns the maximum supported key size of the\n *                     algorithm in bytes.\n */",
"mcrypt_enc_get_modes_name", T(String), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-get-modes-name.php )\n *\n * This function returns the name of the mode.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     string  Returns the name as a string.\n */",
"mcrypt_enc_get_supported_key_sizes", T(Array), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-get-supported-key-sizes.php\n * )\n *\n * Gets the supported key sizes of the opened algorithm.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     vector  Returns an array with the key sizes supported by the\n *                     algorithm specified by the encryption descriptor. If\n *                     it returns an empty array then all key sizes between\n *                     1 and mcrypt_enc_get_key_size() are supported by the\n *                     algorithm.\n */",
"mcrypt_enc_is_block_algorithm_mode", T(Boolean), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-is-block-algorithm-mode.php\n * )\n *\n * Tells whether the algorithm of the opened mode works on blocks (e.g.\n * FALSE for stream, and TRUE for cbc, cfb, ofb)..\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     bool    Returns TRUE if the mode is for use with block\n *                     algorithms, otherwise it returns FALSE.\n */",
"mcrypt_enc_is_block_algorithm", T(Boolean), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-is-block-algorithm.php )\n *\n * Tells whether the algorithm of the opened mode is a block algorithm.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     bool    Returns TRUE if the algorithm is a block algorithm\n *                     or FALSE if it is a stream one.\n */",
"mcrypt_enc_is_block_mode", T(Boolean), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-is-block-mode.php )\n *\n * Tells whether the opened mode outputs blocks (e.g. TRUE for cbc and\n * ecb, and FALSE for cfb and stream).\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     bool    Returns TRUE if the mode outputs blocks of bytes or\n *                     FALSE if it outputs bytes.\n */",
"mcrypt_enc_self_test", T(Int64), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-enc-self-test.php )\n *\n * This function runs the self test on the algorithm specified by the\n * descriptor td.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     int     If the self test succeeds it returns FALSE. In case\n *                     of an error, it returns TRUE.\n */",
"mcrypt_generic", T(Variant), S(0), "td", T(Object), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-generic.php )\n *\n * This function encrypts data. The data is padded with \"\\0\" to make sure\n * the length of the data is n * blocksize. This function returns the\n * encrypted data. Note that the length of the returned string can in fact\n * be longer then the input, due to the padding of the data.\n *\n * If you want to store the encrypted data in a database make sure to\n * store the entire string as returned by mcrypt_generic, or the string\n * will not entirely decrypt properly. If your original string is 10\n * characters long and the block size is 8 (use mcrypt_enc_get_block_size()\n * to determine the blocksize), you would need at least 16 characters in\n * your database field. Note the string returned by mdecrypt_generic() will\n * be 16 characters as well...use rtrim($str, \"\\0\") to remove the padding.\n *\n * If you are for example storing the data in a MySQL database remember\n * that varchar fields automatically have trailing spaces removed during\n * insertion. As encrypted data can end in a space (ASCII 32), the data\n * will be damaged by this removal. Store data in a tinyblob/tinytext (or\n * larger) field instead.\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n *                     The encryption handle should always be initialized\n *                     with mcrypt_generic_init() with a key and an IV\n *                     before calling this function. Where the encryption\n *                     is done, you should free the encryption buffers by\n *                     calling mcrypt_generic_deinit(). See\n *                     mcrypt_module_open() for an example.\n * @data       string  The data to encrypt.\n *\n * @return     mixed   Returns the encrypted data.\n */",
"mcrypt_generic_init", T(Int64), S(0), "td", T(Object), NULL, S(0), NULL, S(0), "key", T(String), NULL, S(0), NULL, S(0), "iv", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-generic-init.php\n * )\n *\n * You need to call this function before every call to mcrypt_generic() or\n * mdecrypt_generic().\n *\n * @td         resource\n *                     The encryption descriptor.\n * @key        string  The maximum length of the key should be the one\n *                     obtained by calling mcrypt_enc_get_key_size() and\n *                     every value smaller than this is legal.\n * @iv         string  The IV should normally have the size of the\n *                     algorithms block size, but you must obtain the size\n *                     by calling mcrypt_enc_get_iv_size(). IV is ignored\n *                     in ECB. IV MUST exist in CFB, CBC, STREAM, nOFB and\n *                     OFB modes. It needs to be random and unique (but not\n *                     secret). The same IV must be used for\n *                     encryption/decryption. If you do not want to use it\n *                     you should set it to zeros, but this is not\n *                     recommended.\n *\n * @return     int     The function returns a negative value on error, -3\n *                     when the key length was incorrect, -4 when there was\n *                     a memory allocation problem and any other return\n *                     value is an unknown error. If an error occurs a\n *                     warning will be displayed accordingly. FALSE is\n *                     returned if incorrect parameters were passed.\n */",
"mdecrypt_generic", T(Variant), S(0), "td", T(Object), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mdecrypt-generic.php )\n *\n * This function decrypts data. Note that the length of the returned\n * string can in fact be longer then the unencrypted string, due to the\n * padding of the data.\n *\n * @td         resource\n *                     An encryption descriptor returned by\n *                     mcrypt_module_open()\n * @data       string  Encrypted data.\n *\n * @return     mixed\n */",
"mcrypt_generic_deinit", T(Boolean), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mcrypt-generic-deinit.php )\n *\n * This function terminates encryption specified by the encryption\n * descriptor (td). It clears all buffers, but does not close the module.\n * You need to call mcrypt_module_close() yourself. (But PHP does this for\n * you at the end of the script.)\n *\n * @td         resource\n *                     The encryption descriptor.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"mcrypt_generic_end", T(Boolean), S(0), "td", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mcrypt-generic-end.php\n * )\n *\n *\n * @td         resource\n *\n *\n * @return     bool\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
