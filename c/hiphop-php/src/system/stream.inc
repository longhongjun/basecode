// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"stream_context_create", T(Object), S(0), "options", T(Array), "N;", S(2), "null", S(0), "params", T(Array), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-context-create.php )\n *\n * Creates and returns a stream context with any options supplied in\n * options preset.\n *\n * @options    map     Must be an associative array of associative arrays\n *                     in the format $arr['wrapper']['option'] = $value.\n *\n *                     Default to an empty array.\n * @params     map     Must be an associative array in the format\n *                     $arr['parameter'] = $value. Refer to context\n *                     parameters for a listing of standard stream\n *                     parameters.\n *\n * @return     resource\n *                     A stream context resource.\n */",
"stream_context_get_default", T(Object), S(0), "options", T(Array), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-context-get-default.php )\n *\n *\n * @options    map     options must be an associative array of associative\n *                     arrays in the format $arr['wrapper']['option'] =\n *                     $value.\n *\n *                     As of PHP 5.3.0, the stream_context_set_default()\n *                     function can be used to set the default context.\n *\n * @return     resource\n *                     A stream context resource.\n */",
"stream_context_get_options", T(Variant), S(0), "stream_or_context", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-context-get-options.php )\n *\n *\n * @stream_or_context\n *             resource\n *                     The stream or context to get options from\n *\n * @return     mixed   Returns an associative array with the options.\n */",
"stream_context_set_option", T(Boolean), S(0), "stream_or_context", T(Object), NULL, S(0), NULL, S(0), "wrapper", T(Variant), NULL, S(0), NULL, S(0), "option", T(String), "N;", S(2), "null", S(0), "value", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-context-set-option.php )\n *\n *\n * @stream_or_context\n *             resource\n *                     The stream or context resource to apply the options\n *                     too.\n * @wrapper    mixed   The options to set for the default context.\n *\n *                     options must be an associative array of associative\n *                     arrays in the format $arr['wrapper']['option'] =\n *                     $value.\n *\n *                     Refer to context options and parameters for a\n *                     listing of stream options.\n * @option     string\n * @value      mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"stream_context_set_param", T(Boolean), S(0), "stream_or_context", T(Object), NULL, S(0), NULL, S(0), "params", T(Array), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-context-set-param.php )\n *\n *\n * @stream_or_context\n *             resource\n *\n * @params     map\n *\n * @return     bool\n */",
"stream_copy_to_stream", T(Variant), S(0), "source", T(Object), NULL, S(0), NULL, S(0), "dest", T(Object), NULL, S(0), NULL, S(0), "maxlength", T(Int32), "i:-1;", S(5), "-1", S(0), "offset", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-copy-to-stream.php )\n *\n * Makes a copy of up to maxlength bytes of data from the current position\n * (or from the offset position, if specified) in source to dest. If\n * maxlength is not specified, all remaining content in source will be\n * copied.\n *\n * @source     resource\n *                     The source stream\n * @dest       resource\n *                     The destination stream\n * @maxlength  int     Maximum bytes to copy\n * @offset     int     The offset where to start to copy data\n *\n * @return     mixed   Returns the total count of bytes copied.\n */",
"stream_encoding", T(Boolean), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stream-encoding.php )\n *\n *\n * @stream     resource\n *\n * @encoding   string\n *\n * @return     bool\n */",
"stream_bucket_append", T(Void), S(0), "brigade", T(Object), NULL, S(0), NULL, S(0), "bucket", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-bucket-append.php )\n *\n *\n * @brigade    resource\n *\n * @bucket     resource\n *\n */",
"stream_bucket_prepend", T(Void), S(0), "brigade", T(Object), NULL, S(0), NULL, S(0), "bucket", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-bucket-prepend.php )\n *\n *\n * @brigade    resource\n *\n * @bucket     resource\n *\n */",
"stream_bucket_make_writeable", T(Object), S(0), "brigade", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-bucket-make-writeable.php )\n *\n *\n * @brigade    resource\n *\n *\n * @return     resource\n *\n */",
"stream_bucket_new", T(Object), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), "buffer", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stream-bucket-new.php )\n *\n *\n * @stream     resource\n *\n * @buffer     string\n *\n * @return     resource\n *\n */",
"stream_filter_register", T(Boolean), S(0), "filtername", T(String), NULL, S(0), NULL, S(0), "classname", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-filter-register.php )\n *\n * stream_filter_register() allows you to implement your own filter on any\n * registered stream used with all the other filesystem functions (such as\n * fopen(), fread() etc.).\n *\n * @filtername string  The filter name to be registered.\n * @classname  string  To implement a filter, you need to define a class as\n *                     an extension of php_user_filter with a number of\n *                     member functions as defined below. When performing\n *                     read/write operations on the stream to which your\n *                     filter is attached, PHP will pass the data through\n *                     your filter (and any other filters attached to that\n *                     stream) so that the data may be modified as desired.\n *                     You must implement the methods exactly as described\n *                     below - doing otherwise will lead to undefined\n *                     behaviour. int filter ( resource $in , resource $out\n *                     , int &$consumed , bool $closing )\n *\n *                     This method is called whenever data is read from or\n *                     written to the attached stream (such as with fread()\n *                     or fwrite()). in is a resource pointing to a bucket\n *                     brigade which contains one or more bucket objects\n *                     containing data to be filtered. out is a resource\n *                     pointing to a second bucket brigade into which your\n *                     modified buckets should be placed. consumed, which\n *                     must always be declared by reference, should be\n *                     incremented by the length of the data which your\n *                     filter reads in and alters. In most cases this means\n *                     you will increment consumed by $bucket->datalen for\n *                     each $bucket. If the stream is in the process of\n *                     closing (and therefore this is the last pass through\n *                     the filterchain), the closing parameter will be set\n *                     to TRUE. The filter() method must return one of\n *                     three values upon completion. Return Value Meaning\n *                     PSFS_PASS_ON Filter processed successfully with data\n *                     available in the out bucket brigade. PSFS_FEED_ME\n *                     Filter processed successfully, however no data was\n *                     available to return. More data is required from the\n *                     stream or prior filter. PSFS_ERR_FATAL (default) The\n *                     filter experienced an unrecoverable error and cannot\n *                     continue. bool onCreate ( void ) This method is\n *                     called during instantiation of the filter class\n *                     object. If your filter allocates or initializes any\n *                     other resources (such as a buffer), this is the\n *                     place to do it. Your implementation of this method\n *                     should return FALSE on failure, or TRUE on success.\n *                     When your filter is first instantiated, and\n *                     yourfilter->onCreate() is called, a number of\n *                     properties will be available as shown in the table\n *                     below.\n *\n *                     Property Contents FilterClass->filtername A string\n *                     containing the name the filter was instantiated\n *                     with. Filters may be registered under multiple names\n *                     or under wildcards. Use this property to determine\n *                     which name was used. FilterClass->params The\n *                     contents of the params parameter passed to\n *                     stream_filter_append() or stream_filter_prepend().\n *                     FilterClass->stream The stream resource being\n *                     filtered. Maybe available only during filter() calls\n *                     when the closing parameter is set to FALSE. void\n *                     onClose ( void )\n *\n *                     This method is called upon filter shutdown\n *                     (typically, this is also during stream shutdown),\n *                     and is executed after the flush method is called. If\n *                     any resources were allocated or initialized during\n *                     onCreate() this would be the time to destroy or\n *                     dispose of them.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n *\n *                     stream_filter_register() will return FALSE if the\n *                     filtername is already defined.\n */",
"stream_filter_remove", T(Boolean), S(0), "stream_filter", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-filter-remove.php )\n *\n * Removes a stream filter previously added to a stream with\n * stream_filter_prepend() or stream_filter_append(). Any data remaining in\n * the filter's internal buffer will be flushed through to the next filter\n * before removing it.\n *\n * @stream_filter\n *             resource\n *                     The stream filter to be removed.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"stream_filter_append", T(Object), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), "filtername", T(String), NULL, S(0), NULL, S(0), "read_write", T(Int32), "i:0;", S(4), "0", S(0), "params", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-filter-append.php )\n *\n * Adds filtername to the list of filters attached to stream.\n *\n * @stream     resource\n *                     The target stream.\n * @filtername string  The filter name.\n * @read_write int     By default, stream_filter_append() will attach the\n *                     filter to the read filter chain if the file was\n *                     opened for reading (i.e. File Mode: r, and/or +).\n *                     The filter will also be attached to the write filter\n *                     chain if the file was opened for writing (i.e. File\n *                     Mode: w, a, and/or +). STREAM_FILTER_READ,\n *                     STREAM_FILTER_WRITE, and/or STREAM_FILTER_ALL can\n *                     also be passed to the read_write parameter to\n *                     override this behavior.\n * @params     mixed   This filter will be added with the specified params\n *                     to the end of the list and will therefore be called\n *                     last during stream operations. To add a filter to\n *                     the beginning of the list, use\n *                     stream_filter_prepend().\n *\n * @return     resource\n *                     Returns a resource which can be used to refer to\n *                     this filter instance during a call to\n *                     stream_filter_remove().\n */",
"stream_filter_prepend", T(Object), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), "filtername", T(String), NULL, S(0), NULL, S(0), "read_write", T(Int32), "i:0;", S(4), "0", S(0), "params", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-filter-prepend.php )\n *\n * Adds filtername to the list of filters attached to stream.\n *\n * @stream     resource\n *                     The target stream.\n * @filtername string  The filter name.\n * @read_write int     By default, stream_filter_prepend() will attach the\n *                     filter to the read filter chain if the file was\n *                     opened for reading (i.e. File Mode: r, and/or +).\n *                     The filter will also be attached to the write filter\n *                     chain if the file was opened for writing (i.e. File\n *                     Mode: w, a, and/or +). STREAM_FILTER_READ,\n *                     STREAM_FILTER_WRITE, and/or STREAM_FILTER_ALL can\n *                     also be passed to the read_write parameter to\n *                     override this behavior. See stream_filter_append()\n *                     for an example of using this parameter.\n * @params     mixed   This filter will be added with the specified params\n *                     to the beginning of the list and will therefore be\n *                     called first during stream operations. To add a\n *                     filter to the end of the list, use\n *                     stream_filter_append().\n *\n * @return     resource\n *                     Returns a resource which can be used to refer to\n *                     this filter instance during a call to\n *                     stream_filter_remove().\n */",
"stream_get_contents", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "maxlen", T(Int32), "i:0;", S(4), "0", S(0), "offset", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stream-get-contents.php\n * )\n *\n * Identical to file_get_contents(), except that stream_get_contents()\n * operates on an already open stream resource and returns the remaining\n * contents in a string, up to maxlength bytes and starting at the\n * specified offset.\n *\n * @handle     resource\n *                     A stream resource (e.g. returned from fopen())\n * @maxlen     int     The maximum bytes to read. Defaults to -1 (read all\n *                     the remaining buffer).\n * @offset     int     Seek to the specified offset before reading.\n *\n * @return     mixed   Returns a string or FALSE on failure.\n */",
"stream_get_filters", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stream-get-filters.php\n * )\n *\n *\n * @return     vector  Returns an indexed array containing the name of all\n *                     stream filters available.\n */", 
"stream_get_line", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "length", T(Int32), "i:0;", S(4), "0", S(0), "ending", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stream-get-line.php )\n *\n * Gets a line from the given handle.\n *\n * Reading ends when length bytes have been read, when the string\n * specified by ending is found (which is not included in the return\n * value), or on EOF (whichever comes first).\n *\n * This function is nearly identical to fgets() except in that it allows\n * end of line delimiters other than the standard \\n, \\r, and \\r\\n, and\n * does not return the delimiter itself.\n *\n * @handle     resource\n *                     A valid file handle.\n * @length     int     The number of bytes to read from the handle.\n * @ending     string  An optional string delimiter.\n *\n * @return     mixed   Returns a string of up to length bytes read from the\n *                     file pointed to by handle.\n *\n *                     If an error occurs, returns FALSE.\n */",
"stream_get_meta_data", T(Variant), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-get-meta-data.php )\n *\n * Returns information about an existing stream.\n *\n * @stream     resource\n *                     The stream can be any stream created by fopen(),\n *                     fsockopen() and pfsockopen().\n *\n * @return     mixed   The result array contains the following items:\n *\n *                     timed_out (bool) - TRUE if the stream timed out\n *                     while waiting for data on the last call to fread()\n *                     or fgets().\n *\n *                     blocked (bool) - TRUE if the stream is in blocking\n *                     IO mode. See stream_set_blocking().\n *\n *                     eof (bool) - TRUE if the stream has reached\n *                     end-of-file. Note that for socket streams this\n *                     member can be TRUE even when unread_bytes is\n *                     non-zero. To determine if there is more data to be\n *                     read, use feof() instead of reading this item.\n *\n *                     unread_bytes (int) - the number of bytes currently\n *                     contained in the PHP's own internal buffer. You\n *                     shouldn't use this value in a script.\n *\n *                     stream_type (string) - a label describing the\n *                     underlying implementation of the stream.\n *\n *                     wrapper_type (string) - a label describing the\n *                     protocol wrapper implementation layered over the\n *                     stream. See List of Supported Protocols/Wrappers for\n *                     more information about wrappers.\n *\n *                     wrapper_data (mixed) - wrapper specific data\n *                     attached to this stream. See List of Supported\n *                     Protocols/Wrappers for more information about\n *                     wrappers and their wrapper data.\n *\n *                     filters (array) - and array containing the names of\n *                     any filters that have been stacked onto this stream.\n *                     Documentation on filters can be found in the Filters\n *                     appendix.\n *\n *                     mode (string) - the type of access required for\n *                     this stream (see Table 1 of the fopen() reference)\n *\n *                     seekable (bool) - whether the current stream can be\n *                     seeked.\n *\n *                     uri (string) - the URI/filename associated with\n *                     this stream.\n */",
"stream_get_transports", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-get-transports.php )\n *\n *\n * @return     vector  Returns an indexed array of socket transports names.\n */", 
"stream_get_wrappers", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stream-get-wrappers.php\n * )\n *\n * Retrieve list of registered streams available on the running system.\n *\n * @return     vector  Returns an indexed array containing the name of all\n *                     stream wrappers available on the running system.\n */", 
"stream_register_wrapper", T(Boolean), S(0), "protocol", T(String), NULL, S(0), NULL, S(0), "classname", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-register-wrapper.php )\n *\n *\n * @protocol   string\n * @classname  string\n *\n * @return     bool\n */",
"stream_wrapper_register", T(Boolean), S(0), "protocol", T(String), NULL, S(0), NULL, S(0), "classname", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-wrapper-register.php )\n *\n * Allows you to implement your own protocol handlers and streams for use\n * with all the other filesystem functions (such as fopen(), fread() etc.).\n *\n * @protocol   string  The wrapper name to be registered.\n * @classname  string  The classname which implements the protocol.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n *\n *                     stream_wrapper_register() will return FALSE if the\n *                     protocol already has a handler.\n */",
"stream_wrapper_restore", T(Boolean), S(0), "protocol", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-wrapper-restore.php )\n *\n * Restores a built-in wrapper previously unregistered with\n * stream_wrapper_unregister().\n *\n * @protocol   string\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"stream_wrapper_unregister", T(Boolean), S(0), "protocol", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-wrapper-unregister.php )\n *\n * Allows you to disable an already defined stream wrapper. Once the\n * wrapper has been disabled you may override it with a user-defined\n * wrapper using stream_wrapper_register() or reenable it later on with\n * stream_wrapper_restore().\n *\n * @protocol   string\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"stream_resolve_include_path", T(String), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "context", T(Object), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-resolve-include-path.php )\n *\n * Resolve filename against the include path according to the same rules\n * as fopen()/include() does.\n *\n * @filename   string  The filename to resolve.\n * @context    resource\n *                     A valid context resource created with\n *                     stream_context_create().\n *\n * @return     string  On success, the resolved absolute filename is\n *                     returned. On failure, FALSE is returned.\n */",
"stream_select", T(Variant), S(0), "read", T(Variant), NULL, S(0), NULL, S(1), "write", T(Variant), NULL, S(0), NULL, S(1), "except", T(Variant), NULL, S(0), NULL, S(1), "vtv_sec", T(Variant), NULL, S(0), NULL, S(0), "tv_usec", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stream-select.php )\n *\n * The stream_select() function accepts arrays of streams and waits for\n * them to change status. Its operation is equivalent to that of the\n * socket_select() function except in that it acts on streams.\n *\n * @read       mixed   The streams listed in the read array will be watched\n *                     to see if characters become available for reading\n *                     (more precisely, to see if a read will not block -\n *                     in particular, a stream resource is also ready on\n *                     end-of-file, in which case an fread() will return a\n *                     zero length string).\n * @write      mixed   The streams listed in the write array will be\n *                     watched to see if a write will not block.\n * @except     mixed   The streams listed in the except array will be\n *                     watched for high priority exceptional\n *                     (\"out-of-band\") data arriving.\n *\n *                     When stream_select() returns, the arrays read,\n *                     write and except are modified to indicate which\n *                     stream resource(s) actually changed status. You do\n *                     not need to pass every array to stream_select(). You\n *                     can leave it out and use an empty array or NULL\n *                     instead. Also do not forget that those arrays are\n *                     passed by reference and will be modified after\n *                     stream_select() returns.\n * @vtv_sec    mixed   The tv_sec and tv_usec together form the timeout\n *                     parameter, tv_sec specifies the number of seconds\n *                     while tv_usec the number of microseconds. The\n *                     timeout is an upper bound on the amount of time that\n *                     stream_select() will wait before it returns. If\n *                     tv_sec and tv_usec are both set to 0,\n *                     stream_select() will not wait for data - instead it\n *                     will return immediately, indicating the current\n *                     status of the streams.\n *\n *                     If tv_sec is NULL stream_select() can block\n *                     indefinitely, returning only when an event on one of\n *                     the watched streams occurs (or if a signal\n *                     interrupts the system call). Warning\n *\n *                     Using a timeout value of 0 allows you to\n *                     instantaneously poll the status of the streams,\n *                     however, it is NOT a good idea to use a 0 timeout\n *                     value in a loop as it will cause your script to\n *                     consume too much CPU time.\n *\n *                     It is much better to specify a timeout value of a\n *                     few seconds, although if you need to be checking and\n *                     running other code concurrently, using a timeout\n *                     value of at least 200000 microseconds will help\n *                     reduce the CPU usage of your script.\n *\n *                     Remember that the timeout value is the maximum time\n *                     that will elapse; stream_select() will return as\n *                     soon as the requested streams are ready for use.\n * @tv_usec    int     See tv_sec description.\n *\n * @return     mixed   On success stream_select() returns the number of\n *                     stream resources contained in the modified arrays,\n *                     which may be zero if the timeout expires before\n *                     anything interesting happens. On error FALSE is\n *                     returned and a warning raised (this can happen if\n *                     the system call is interrupted by an incoming\n *                     signal).\n */",
"stream_set_blocking", T(Boolean), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), "mode", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stream-set-blocking.php\n * )\n *\n * Sets blocking or non-blocking mode on a stream.\n *\n * This function works for any stream that supports non-blocking mode\n * (currently, regular files and socket streams).\n *\n * @stream     resource\n *                     The stream.\n * @mode       int     If mode is 0, the given stream will be switched to\n *                     non-blocking mode, and if 1, it will be switched to\n *                     blocking mode. This affects calls like fgets() and\n *                     fread() that read from the stream. In non-blocking\n *                     mode an fgets() call will always return right away\n *                     while in blocking mode it will wait for data to\n *                     become available on the stream.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"stream_set_timeout", T(Boolean), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), "seconds", T(Int32), NULL, S(0), NULL, S(0), "microseconds", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stream-set-timeout.php\n * )\n *\n * Sets the timeout value on stream, expressed in the sum of seconds and\n * microseconds.\n *\n * When the stream times out, the 'timed_out' key of the array returned by\n * stream_get_meta_data() is set to TRUE, although no error/warning is\n * generated.\n *\n * @stream     resource\n *                     The target stream.\n * @seconds    int     The seconds part of the timeout to be set.\n * @microseconds\n *             int     The microseconds part of the timeout to be set.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"stream_set_write_buffer", T(Int64), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), "buffer", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-set-write-buffer.php )\n *\n * Sets the buffering for write operations on the given stream to buffer\n * bytes. Output using fwrite() is normally buffered at 8K. This means that\n * if there are two processes wanting to write to the same output stream (a\n * file), each is paused after 8K of data to allow the other to write.\n *\n * @stream     resource\n *                     The file pointer.\n * @buffer     int     The number of bytes to buffer. If buffer is 0 then\n *                     write operations are unbuffered. This ensures that\n *                     all writes with fwrite() are completed before other\n *                     processes are allowed to write to that output\n *                     stream.\n *\n * @return     int     Returns 0 on success, or EOF if the request cannot\n *                     be honored.\n */",
"set_file_buffer", T(Int64), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), "buffer", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.set-file-buffer.php )\n *\n *\n * @stream     resource\n *\n * @buffer     int\n *\n * @return     int\n */",
"stream_socket_accept", T(Variant), S(0), "server_socket", T(Object), NULL, S(0), NULL, S(0), "timeout", T(Double), "d:0;", S(4), "0.0", S(0), "peername", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-accept.php )\n *\n * Accept a connection on a socket previously created by\n * stream_socket_server().\n *\n * @server_socket\n *             resource\n *                     The server socket to accept a connection from.\n * @timeout    float   Override the default socket accept timeout. Time\n *                     should be given in seconds.\n * @peername   mixed   Will be set to the name (address) of the client\n *                     which connected, if included and available from the\n *                     selected transport.\n *\n *                     Can also be determined later using\n *                     stream_socket_get_name().\n *\n * @return     mixed   Returns a stream to the accepted socket connection\n *                     or FALSE on failure.\n */",
"stream_socket_server", T(Variant), S(0), "local_socket", T(String), NULL, S(0), NULL, S(0), "errnum", T(Variant), "N;", S(2), "null", S(1), "errstr", T(Variant), "N;", S(2), "null", S(1), "flags", T(Int32), "i:0;", S(4), "0", S(0), "context", T(Object), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-server.php )\n *\n * Creates a stream or datagram socket on the specified local_socket.\n *\n * This function only creates a socket, to begin accepting connections use\n * stream_socket_accept().\n *\n * @local_socket\n *             string  The type of socket created is determined by the\n *                     transport specified using standard URL formatting:\n *                     transport://target.\n *\n *                     For Internet Domain sockets (AF_INET) such as TCP\n *                     and UDP, the target portion of the remote_socket\n *                     parameter should consist of a hostname or IP address\n *                     followed by a colon and a port number. For Unix\n *                     domain sockets, the target portion should point to\n *                     the socket file on the filesystem.\n *\n *                     Depending on the environment, Unix domain sockets\n *                     may not be available. A list of available transports\n *                     can be retrieved using stream_get_transports(). See\n *                     List of Supported Socket Transports for a list of\n *                     bulitin transports.\n * @errnum     mixed   If the optional errno and errstr arguments are\n *                     present they will be set to indicate the actual\n *                     system level error that occurred in the system-level\n *                     socket(), bind(), and listen() calls. If the value\n *                     returned in errno is 0 and the function returned\n *                     FALSE, it is an indication that the error occurred\n *                     before the bind() call. This is most likely due to a\n *                     problem initializing the socket. Note that the errno\n *                     and errstr arguments will always be passed by\n *                     reference.\n * @errstr     mixed   See errno description.\n * @flags      int     A bitmask field which may be set to any combination\n *                     of socket creation flags.\n *\n *                     For UDP sockets, you must use STREAM_SERVER_BIND as\n *                     the flags parameter.\n * @context    resource\n *\n *\n * @return     mixed   Returns the created stream, or FALSE on error.\n */",
"stream_socket_client", T(Variant), S(0), "remote_socket", T(String), NULL, S(0), NULL, S(0), "errnum", T(Variant), "N;", S(2), "null", S(1), "errstr", T(Variant), "N;", S(2), "null", S(1), "timeout", T(Double), "d:0;", S(4), "0.0", S(0), "flags", T(Int32), "i:0;", S(4), "0", S(0), "context", T(Object), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-client.php )\n *\n * Initiates a stream or datagram connection to the destination specified\n * by remote_socket. The type of socket created is determined by the\n * transport specified using standard URL formatting: transport://target.\n * For Internet Domain sockets (AF_INET) such as TCP and UDP, the target\n * portion of the remote_socket parameter should consist of a hostname or\n * IP address followed by a colon and a port number. For Unix domain\n * sockets, the target portion should point to the socket file on the\n * filesystem.\n *\n * The stream will by default be opened in blocking mode. You can switch\n * it to non-blocking mode by using stream_set_blocking().\n *\n * @remote_socket\n *             string  Address to the socket to connect to.\n * @errnum     mixed   Will be set to the system level error number if\n *                     connection fails.\n * @errstr     mixed   Will be set to the system level error message if the\n *                     connection fails.\n * @timeout    float   Number of seconds until the connect() system call\n *                     should timeout. This parameter only applies when not\n *                     making asynchronous connection attempts.\n *\n *                     To set a timeout for reading/writing data over the\n *                     socket, use the stream_set_timeout(), as the timeout\n *                     only applies while making connecting the socket.\n * @flags      int     Bitmask field which may be set to any combination of\n *                     connection flags. Currently the select of connection\n *                     flags is limited to STREAM_CLIENT_CONNECT (default),\n *                     STREAM_CLIENT_ASYNC_CONNECT and\n *                     STREAM_CLIENT_PERSISTENT.\n * @context    resource\n *                     A valid context resource created with\n *                     stream_context_create().\n *\n * @return     mixed   On success a stream resource is returned which may\n *                     be used together with the other file functions (such\n *                     as fgets(), fgetss(), fwrite(), fclose(), and\n *                     feof()), FALSE on failure.\n */",
"stream_socket_enable_crypto", T(Variant), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), "enable", T(Boolean), NULL, S(0), NULL, S(0), "crypto_type", T(Int32), "i:0;", S(4), "0", S(0), "session_stream", T(Object), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-enable-crypto.php )\n *\n *\n * @stream     resource\n *                     The stream resource.\n * @enable     bool    Enable/disable cryptography on the stream.\n * @crypto_type\n *             int     Setup encryption on the stream. Valid methods are\n *                     STREAM_CRYPTO_METHOD_SSLv2_CLIENT\n *                     STREAM_CRYPTO_METHOD_SSLv3_CLIENT\n *                     STREAM_CRYPTO_METHOD_SSLv23_CLIENT\n *                     STREAM_CRYPTO_METHOD_TLS_CLIENT\n *                     STREAM_CRYPTO_METHOD_SSLv2_SERVER\n *                     STREAM_CRYPTO_METHOD_SSLv3_SERVER\n *                     STREAM_CRYPTO_METHOD_SSLv23_SERVER\n *                     STREAM_CRYPTO_METHOD_TLS_SERVER\n * @session_stream\n *             resource\n *                     Seed the stream with settings from session_stream.\n *\n * @return     mixed   Returns TRUE on success, FALSE if negotiation has\n *                     failed or 0 if there isn't enough data and you\n *                     should try again (only for non-blocking sockets).\n */",
"stream_socket_get_name", T(Variant), S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "want_peer", T(Boolean), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-get-name.php )\n *\n * Returns the local or remote name of a given socket connection.\n *\n * @handle     resource\n *                     The socket to get the name of.\n * @want_peer  bool    If set to TRUE the remote socket name will be\n *                     returned, if set to FALSE the local socket name will\n *                     be returned.\n *\n * @return     mixed   The name of the socket.\n */",
"stream_socket_pair", T(Variant), S(0), "domain", T(Int32), NULL, S(0), NULL, S(0), "type", T(Int32), NULL, S(0), NULL, S(0), "protocol", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.stream-socket-pair.php\n * )\n *\n * stream_socket_pair() creates a pair of connected, indistinguishable\n * socket streams. This function is commonly used in IPC (Inter-Process\n * Communication).\n * Please consult the Streams constant list for further details on each\n * constant.\n *\n * @domain     int     The protocol family to be used: STREAM_PF_INET,\n *                     STREAM_PF_INET6 or STREAM_PF_UNIX\n * @type       int     The type of communication to be used:\n *                     STREAM_SOCK_DGRAM, STREAM_SOCK_RAW, STREAM_SOCK_RDM,\n *                     STREAM_SOCK_SEQPACKET or STREAM_SOCK_STREAM\n * @protocol   int     The protocol to be used: STREAM_IPPROTO_ICMP,\n *                     STREAM_IPPROTO_IP, STREAM_IPPROTO_RAW,\n *                     STREAM_IPPROTO_TCP or STREAM_IPPROTO_UDP\n *\n * @return     mixed   Returns an array with the two socket resources on\n *                     success, or FALSE on failure.\n */",
"stream_socket_recvfrom", T(Variant), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "length", T(Int32), NULL, S(0), NULL, S(0), "flags", T(Int32), "i:0;", S(4), "0", S(0), "address", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-recvfrom.php )\n *\n * stream_socket_recvfrom() accepts data from a remote socket up to length\n * bytes.\n *\n * @socket     resource\n *                     The remote socket.\n * @length     int     The number of bytes to receive from the socket.\n * @flags      int     The value of flags can be any combination of the\n *                     following: Possible values for flags STREAM_OOB\n *                     Process OOB (out-of-band) data. STREAM_PEEK Retrieve\n *                     data from the socket, but do not consume the buffer.\n *                     Subsequent calls to fread() or\n *                     stream_socket_recvfrom() will see the same data.\n * @address    string  If address is provided it will be populated with the\n *                     address of the remote socket.\n *\n * @return     mixed   Returns the read data, as a string\n */",
"stream_socket_sendto", T(Variant), S(0), "socket", T(Object), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "flags", T(Int32), "i:0;", S(4), "0", S(0), "address", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-sendto.php )\n *\n * Sends the specified data through the socket.\n *\n * @socket     resource\n *                     The socket to send data to.\n * @data       string  The data to be sent.\n * @flags      int     The value of flags can be any combination of the\n *                     following: possible values for flags STREAM_OOB\n *                     Process OOB (out-of-band) data.\n * @address    string  The address specified when the socket stream was\n *                     created will be used unless an alternate address is\n *                     specified in address.\n *\n *                     If specified, it must be in dotted quad (or [ipv6])\n *                     format.\n *\n * @return     mixed   Returns a result code, as an integer.\n */",
"stream_socket_shutdown", T(Boolean), S(0), "stream", T(Object), NULL, S(0), NULL, S(0), "how", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.stream-socket-shutdown.php )\n *\n * Shutdowns (partially or not) a full-duplex connection.\n *\n * @stream     resource\n *                     An open stream (opened with stream_socket_client(),\n *                     for example)\n * @how        int     One of the following constants: STREAM_SHUT_RD\n *                     (disable further receptions), STREAM_SHUT_WR\n *                     (disable further transmissions) or STREAM_SHUT_RDWR\n *                     (disable further receptions and transmissions).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
