// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"iconv_mime_encode", T(Variant), S(0), "field_name", T(String), NULL, S(0), NULL, S(0), "field_value", T(String), NULL, S(0), NULL, S(0), "preferences", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-mime-encode.php )\n *\n * Composes and returns a string that represents a valid MIME header\n * field, which looks like the following: Subject:\n * =\?ISO-8859-1\?Q\?Pr=FCfung_f=FCr\?= Entwerfen von einer MIME kopfzeile In\n * the above example, \"Subject\" is the field name and the portion that\n * begins with \"=\?ISO-8859-1\?...\" is the field value.\n *\n * @field_name string  The field name.\n * @field_value\n *             string  The field value.\n * @preferences\n *             mixed   You can control the behaviour of iconv_mime_encode()\n *                     by specifying an associative array that contains\n *                     configuration items to the optional third parameter\n *                     preferences. The items supported by\n *                     iconv_mime_encode() are listed below. Note that item\n *                     names are treated case-sensitive. Configuration\n *                     items supported by iconv_mime_encode() Item Type\n *                     Description Default value Example scheme string\n *                     Specifies the method to encode a field value by. The\n *                     value of this item may be either \"B\" or \"Q\", where\n *                     \"B\" stands for base64 encoding scheme and \"Q\" stands\n *                     for quoted-printable encoding scheme. B B\n *                     input-charset string Specifies the character set in\n *                     which the first parameter field_name and the second\n *                     parameter field_value are presented. If not given,\n *                     iconv_mime_encode() assumes those parameters are\n *                     presented to it in the iconv.internal_encoding ini\n *                     setting. iconv.internal_encoding ISO-8859-1\n *                     output-charset string Specifies the character set to\n *                     use to compose the MIME header. If not given, the\n *                     same value as input-charset will be used.\n *                     iconv.internal_encoding UTF-8 line-length integer\n *                     Specifies the maximum length of the header lines.\n *                     The resulting header is \"folded\" to a set of\n *                     multiple lines in case the resulting header field\n *                     would be longer than the value of this parameter,\n *                     according to \273 RFC2822 - Internet Message Format. If\n *                     not given, the length will be limited to 76\n *                     characters. 76 996 line-break-chars string Specifies\n *                     the sequence of characters to append to each line as\n *                     an end-of-line sign when \"folding\" is performed on a\n *                     long header field. If not given, this defaults to\n *                     \"\\r\\n\" (CR LF). Note that this parameter is always\n *                     treated as an ASCII string regardless of the value\n *                     of input-charset. \\r\\n \\n\n *\n * @return     mixed   Returns an encoded MIME field on success, or FALSE\n *                     if an error occurs during the encoding.\n */",
"iconv_mime_decode", T(Variant), S(0), "encoded_string", T(String), NULL, S(0), NULL, S(0), "mode", T(Int32), "i:0;", S(4), "0", S(0), "charset", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-mime-decode.php )\n *\n * Decodes a MIME header field.\n *\n * @encoded_string\n *             string  The encoded header, as a string.\n * @mode       int     mode determines the behaviour in the event\n *                     iconv_mime_decode() encounters a malformed MIME\n *                     header field. You can specify any combination of the\n *                     following bitmasks. Bitmasks acceptable to\n *                     iconv_mime_decode() Value Constant Description 1\n *                     ICONV_MIME_DECODE_STRICT If set, the given header is\n *                     decoded in full conformance with the standards\n *                     defined in \273 RFC2047. This option is disabled by\n *                     default because there are a lot of broken mail user\n *                     agents that don't follow the specification and don't\n *                     produce correct MIME headers. 2\n *                     ICONV_MIME_DECODE_CONTINUE_ON_ERROR If set,\n *                     iconv_mime_decode_headers() attempts to ignore any\n *                     grammatical errors and continue to process a given\n *                     header.\n * @charset    string  The optional charset parameter specifies the\n *                     character set to represent the result by. If\n *                     omitted, iconv.internal_encoding will be used.\n *\n * @return     mixed   Returns a decoded MIME field on success, or FALSE if\n *                     an error occurs during the decoding.\n */",
"iconv_mime_decode_headers", T(Variant), S(0), "encoded_headers", T(String), NULL, S(0), NULL, S(0), "mode", T(Int32), "i:0;", S(4), "0", S(0), "charset", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.iconv-mime-decode-headers.php )\n *\n * Decodes multiple MIME header fields at once.\n *\n * @encoded_headers\n *             string  The encoded headers, as a string.\n * @mode       int     mode determines the behaviour in the event\n *                     iconv_mime_decode_headers() encounters a malformed\n *                     MIME header field. You can specify any combination\n *                     of the following bitmasks. Bitmasks acceptable to\n *                     iconv_mime_decode_headers() Value Constant\n *                     Description 1 ICONV_MIME_DECODE_STRICT If set, the\n *                     given header is decoded in full conformance with the\n *                     standards defined in \273 RFC2047. This option is\n *                     disabled by default because there are a lot of\n *                     broken mail user agents that don't follow the\n *                     specification and don't produce correct MIME\n *                     headers. 2 ICONV_MIME_DECODE_CONTINUE_ON_ERROR If\n *                     set, iconv_mime_decode_headers() attempts to ignore\n *                     any grammatical errors and continue to process a\n *                     given header.\n * @charset    string  The optional charset parameter specifies the\n *                     character set to represent the result by. If\n *                     omitted, iconv.internal_encoding will be used.\n *\n * @return     mixed   Returns an associative array that holds a whole set\n *                     of MIME header fields specified by encoded_headers\n *                     on success, or FALSE if an error occurs during the\n *                     decoding.\n *\n *                     Each key of the return value represents an\n *                     individual field name and the corresponding element\n *                     represents a field value. If more than one field of\n *                     the same name are present,\n *                     iconv_mime_decode_headers() automatically\n *                     incorporates them into a numerically indexed array\n *                     in the order of occurrence.\n */",
"iconv_get_encoding", T(Variant), S(0), "type", T(String), "s:3:\"all\";", S(10), "\"all\"", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-get-encoding.php\n * )\n *\n * Retrieve internal configuration variables of iconv extension.\n *\n * @type       string  The value of the optional type can be: all\n *                     input_encoding output_encoding internal_encoding\n *\n * @return     mixed   Returns the current value of the internal\n *                     configuration variable if successful or FALSE on\n *                     failure.\n *\n *                     If type is omitted or set to \"all\",\n *                     iconv_get_encoding() returns an array that stores\n *                     all these variables.\n */",
"iconv_set_encoding", T(Boolean), S(0), "type", T(String), NULL, S(0), NULL, S(0), "charset", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-set-encoding.php\n * )\n *\n * Changes the value of the internal configuration variable specified by\n * type to charset.\n *\n * @type       string  The value of type can be any one of those:\n *                     input_encoding output_encoding internal_encoding\n * @charset    string  The character set.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"iconv", T(Variant), S(0), "in_charset", T(String), NULL, S(0), NULL, S(0), "out_charset", T(String), NULL, S(0), NULL, S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iconv.php )\n *\n * Performs a character set conversion on the string str from in_charset\n * to out_charset.\n *\n * @in_charset string  The input charset.\n * @out_charset\n *             string  The output charset.\n *\n *                     If you append the string //TRANSLIT to out_charset\n *                     transliteration is activated. This means that when a\n *                     character can't be represented in the target\n *                     charset, it can be approximated through one or\n *                     several similarly looking characters. If you append\n *                     the string //IGNORE, characters that cannot be\n *                     represented in the target charset are silently\n *                     discarded. Otherwise, str is cut from the first\n *                     illegal character and an E_NOTICE is generated.\n * @str        string  The string to be converted.\n *\n * @return     mixed   Returns the converted string or FALSE on failure.\n */",
"iconv_strlen", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "charset", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-strlen.php )\n *\n * In contrast to strlen(), iconv_strlen() counts the occurrences of\n * characters in the given byte sequence str on the basis of the specified\n * character set, the result of which is not necessarily identical to the\n * length of the string in byte.\n *\n * @str        string  The string.\n * @charset    string  If charset parameter is omitted, str is assumed to\n *                     be encoded in iconv.internal_encoding.\n *\n * @return     mixed   Returns the character count of str, as an integer.\n */",
"iconv_strpos", T(Variant), S(0), "haystack", T(String), NULL, S(0), NULL, S(0), "needle", T(String), NULL, S(0), NULL, S(0), "offset", T(Int32), "i:0;", S(4), "0", S(0), "charset", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-strpos.php )\n *\n * Finds position of first occurrence of a needle within a haystack.\n *\n * In contrast to strpos(), the return value of iconv_strpos() is the\n * number of characters that appear before the needle, rather than the\n * offset in bytes to the position where the needle has been found. The\n * characters are counted on the basis of the specified character set\n * charset.\n * If haystack or needle is not a string, it is converted to a string and\n * applied as the ordinal value of a character.\n *\n * @haystack   string  The entire string.\n * @needle     string  The searched substring.\n * @offset     int     The optional offset parameter specifies the position\n *                     from which the search should be performed.\n * @charset    string  If charset parameter is omitted, string are assumed\n *                     to be encoded in iconv.internal_encoding.\n *\n * @return     mixed   Returns the numeric position of the first occurrence\n *                     of needle in haystack.\n *\n *                     If needle is not found, iconv_strpos() will return\n *                     FALSE. WarningThis function may return Boolean\n *                     FALSE, but may also return a non-Boolean value which\n *                     evaluates to FALSE, such as 0 or \"\". Please read the\n *                     section on Booleans for more information. Use the\n *                     === operator for testing the return value of this\n *                     function.\n */",
"iconv_strrpos", T(Variant), S(0), "haystack", T(String), NULL, S(0), NULL, S(0), "needle", T(String), NULL, S(0), NULL, S(0), "charset", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-strrpos.php )\n *\n * In contrast to strpos(), the return value of iconv_strrpos() is the\n * number of characters that appear before the needle, rather than the\n * offset in bytes to the position where the needle has been found.\n * If haystack or needle is not a string, it is converted to a string and\n * applied as the ordinal value of a character.\n *\n * @haystack   string  The entire string.\n * @needle     string  The searched substring.\n * @charset    string  If charset parameter is omitted, string are assumed\n *                     to be encoded in iconv.internal_encoding.\n *\n * @return     mixed   Returns the numeric position of the last occurrence\n *                     of needle in haystack. The characters are counted on\n *                     the basis of the specified character set charset.\n *\n *                     If needle is not found, iconv_strrpos() will return\n *                     FALSE. WarningThis function may return Boolean\n *                     FALSE, but may also return a non-Boolean value which\n *                     evaluates to FALSE, such as 0 or \"\". Please read the\n *                     section on Booleans for more information. Use the\n *                     === operator for testing the return value of this\n *                     function.\n */",
"iconv_substr", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "offset", T(Int32), NULL, S(0), NULL, S(0), "length", T(Int32), "i:2147483647;", S(13), "INT_MAX", S(0), "charset", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.iconv-substr.php )\n *\n * Cuts a portion of str specified by the offset and length parameters.\n *\n * @str        string  The original string.\n * @offset     int     If offset is non-negative, iconv_substr() cuts the\n *                     portion out of str beginning at offset'th character,\n *                     counting from zero.\n *\n *                     If offset is negative, iconv_substr() cuts out the\n *                     portion beginning at the position, offset characters\n *                     away from the end of str.\n * @length     int     If length is given and is positive, the return value\n *                     will contain at most length characters of the\n *                     portion that begins at offset (depending on the\n *                     length of string).\n *\n *                     If negative length is passed, iconv_substr() cuts\n *                     the portion out of str from the offset'th character\n *                     up to the character that is length characters away\n *                     from the end of the string. In case offset is also\n *                     negative, the start position is calculated\n *                     beforehand according to the rule explained above.\n * @charset    string  If charset parameter is omitted, string are assumed\n *                     to be encoded in iconv.internal_encoding.\n *\n *                     Note that offset and length parameters are always\n *                     deemed to represent offsets that are calculated on\n *                     the basis of the character set determined by\n *                     charset, whilst the counterpart substr() always\n *                     takes these for byte offsets.\n *\n * @return     mixed   Returns the portion of str specified by the offset\n *                     and length parameters.\n *\n *                     If str is shorter than offset characters long,\n *                     FALSE will be returned.\n */",
"ob_iconv_handler", T(String), S(0), "contents", T(String), NULL, S(0), NULL, S(0), "status", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-iconv-handler.php )\n *\n * Converts the string encoded in internal_encoding to output_encoding.\n *\n * internal_encoding and output_encoding should be defined in the php.ini\n * file or in iconv_set_encoding().\n * See ob_start() for information about this handler parameters.\n *\n * @contents   string\n * @status     int\n *\n * @return     string  See ob_start() for information about this handler\n *                     return values.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
