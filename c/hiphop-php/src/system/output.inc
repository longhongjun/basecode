// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"ob_start", T(Boolean), S(0), "output_callback", T(Variant), "N;", S(2), "null", S(0), "chunk_size", T(Int32), "i:0;", S(4), "0", S(0), "erase", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-start.php )\n *\n * This function will turn output buffering on. While output buffering is\n * active no output is sent from the script (other than headers), instead\n * the output is stored in an internal buffer.\n *\n * The contents of this internal buffer may be copied into a string\n * variable using ob_get_contents(). To output what is stored in the\n * internal buffer, use ob_end_flush(). Alternatively, ob_end_clean() will\n * silently discard the buffer contents. Warning\n *\n * Some web servers (e.g. Apache) change the working directory of a script\n * when calling the callback function. You can change it back by e.g.\n * chdir(dirname($_SERVER['SCRIPT_FILENAME'])) in the callback function.\n *\n * Output buffers are stackable, that is, you may call ob_start() while\n * another ob_start() is active. Just make sure that you call\n * ob_end_flush() the appropriate number of times. If multiple output\n * callback functions are active, output is being filtered sequentially\n * through each of them in nesting order.\n *\n * @output_callback\n *             mixed   An optional output_callback function may be\n *                     specified. This function takes a string as a\n *                     parameter and should return a string. The function\n *                     will be called when the output buffer is flushed\n *                     (sent) or cleaned (with ob_flush(), ob_clean() or\n *                     similar function) or when the output buffer is\n *                     flushed to the browser at the end of the request.\n *                     When output_callback is called, it will receive the\n *                     contents of the output buffer as its parameter and\n *                     is expected to return a new output buffer as a\n *                     result, which will be sent to the browser. If the\n *                     output_callback is not a callable function, this\n *                     function will return FALSE.\n *\n *                     If the callback function has two parameters, the\n *                     second parameter is filled with a bit-field\n *                     consisting of PHP_OUTPUT_HANDLER_START,\n *                     PHP_OUTPUT_HANDLER_CONT and PHP_OUTPUT_HANDLER_END.\n *\n *                     If output_callback returns FALSE original input is\n *                     sent to the browser.\n *\n *                     The output_callback parameter may be bypassed by\n *                     passing a NULL value.\n *\n *                     ob_end_clean(), ob_end_flush(), ob_clean(),\n *                     ob_flush() and ob_start() may not be called from a\n *                     callback function. If you call them from callback\n *                     function, the behavior is undefined. If you would\n *                     like to delete the contents of a buffer, return \"\"\n *                     (a null string) from callback function. You can't\n *                     even call functions using the output buffering\n *                     functions like print_r($expression, true) or\n *                     highlight_file($filename, true) from a callback\n *                     function.\n *\n *                     In PHP 4.0.4, ob_gzhandler() was introduced to\n *                     facilitate sending gz-encoded data to web browsers\n *                     that support compressed web pages. ob_gzhandler()\n *                     determines what type of content encoding the browser\n *                     will accept and will return its output accordingly.\n * @chunk_size int     If the optional parameter chunk_size is passed, the\n *                     buffer will be flushed after any output call which\n *                     causes the buffer's length to equal or exceed\n *                     chunk_size. Default value 0 means that the function\n *                     is called only in the end, other special value 1\n *                     sets chunk_size to 4096.\n * @erase      bool    If the optional parameter erase is set to FALSE, the\n *                     buffer will not be deleted until the script\n *                     finishes. This causes that flushing and cleaning\n *                     functions would issue a notice and return FALSE if\n *                     called.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"ob_clean", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-clean.php )\n *\n * This function discards the contents of the output buffer.\n *\n * This function does not destroy the output buffer like ob_end_clean()\n * does.\n *\n * @return     mixed   No value is returned.\n */", 
"ob_flush", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-flush.php )\n *\n * This function will send the contents of the output buffer (if any). If\n * you want to further process the buffer's contents you have to call\n * ob_get_contents() before ob_flush() as the buffer contents are discarded\n * after ob_flush() is called.\n *\n * This function does not destroy the output buffer like ob_end_flush()\n * does.\n *\n * @return     mixed   No value is returned.\n */", 
"ob_end_clean", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-end-clean.php )\n *\n * This function discards the contents of the topmost output buffer and\n * turns off this output buffering. If you want to further process the\n * buffer's contents you have to call ob_get_contents() before\n * ob_end_clean() as the buffer contents are discarded when ob_end_clean()\n * is called.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Reasons\n *                     for failure are first that you called the function\n *                     without an active buffer or that for some reason a\n *                     buffer could not be deleted (possible for special\n *                     buffer).\n */", 
"ob_end_flush", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-end-flush.php )\n *\n * This function will send the contents of the topmost output buffer (if\n * any) and turn this output buffer off. If you want to further process the\n * buffer's contents you have to call ob_get_contents() before\n * ob_end_flush() as the buffer contents are discarded after ob_end_flush()\n * is called. This function is similar to ob_get_flush(), except that\n * ob_get_flush() returns the buffer as a string.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure. Reasons\n *                     for failure are first that you called the function\n *                     without an active buffer or that for some reason a\n *                     buffer could not be deleted (possible for special\n *                     buffer).\n */", 
"flush", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.flush.php )\n *\n * Flushes the write buffers of PHP and whatever backend PHP is using\n * (CGI, a web server, etc). This attempts to push current output all the\n * way to the browser with a few caveats.\n *\n * flush() may not be able to override the buffering scheme of your web\n * server and it has no effect on any client-side buffering in the browser.\n * It also doesn't affect PHP's userspace output buffering mechanism. This\n * means you will have to call both ob_flush() and flush() to flush the ob\n * output buffers if you are using those.\n *\n * Several servers, especially on Win32, will still buffer the output from\n * your script until it terminates before transmitting the results to the\n * browser.\n *\n * Server modules for Apache like mod_gzip may do buffering of their own\n * that will cause flush() to not result in data being sent immediately to\n * the client.\n *\n * Even the browser may buffer its input before displaying it. Netscape,\n * for example, buffers text until it receives an end-of-line or the\n * beginning of a tag, and it won't render tables until the </table> tag of\n * the outermost table is seen.\n *\n * Some versions of Microsoft Internet Explorer will only start to display\n * the page after they have received 256 bytes of output, so you may need\n * to send extra whitespace before flushing to get those browsers to\n * display the page.\n *\n * @return     mixed   No value is returned.\n */", 
"ob_get_clean", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-get-clean.php )\n *\n * Gets the current buffer contents and delete current output buffer.\n *\n * ob_get_clean() essentially executes both ob_get_contents() and\n * ob_end_clean().\n *\n * @return     string  Returns the contents of the output buffer and end\n *                     output buffering. If output buffering isn't active\n *                     then FALSE is returned.\n */", 
"ob_get_contents", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-get-contents.php )\n *\n * Gets the contents of the output buffer without clearing it.\n *\n * @return     string  This will return the contents of the output buffer\n *                     or FALSE, if output buffering isn't active.\n */", 
"ob_get_flush", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-get-flush.php )\n *\n * ob_get_flush() flushes the output buffer, return it as a string and\n * turns off output buffering. This function is similar to ob_end_flush(),\n * except that this function returns the buffer as a string.\n *\n * @return     string  Returns the output buffer or FALSE if no buffering\n *                     is active.\n */", 
"ob_get_length", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-get-length.php )\n *\n * This will return the length of the contents in the output buffer.\n *\n * @return     int     Returns the length of the output buffer contents or\n *                     FALSE if no buffering is active.\n */", 
"ob_get_level", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-get-level.php )\n *\n * Returns the nesting level of the output buffering mechanism.\n *\n * @return     int     Returns the level of nested output buffering\n *                     handlers or zero if output buffering is not active.\n */", 
"ob_get_status", T(Array), S(0), "full_status", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-get-status.php )\n *\n * ob_get_status() returns status information on either the top level\n * output buffer or all active output buffer levels if full_status is set\n * to TRUE.\n *\n * @full_status\n *             bool    TRUE to return all active output buffer levels. If\n *                     FALSE or not set, only the top level output buffer\n *                     is returned.\n *\n * @return     map\n */",
"ob_gzhandler", T(String), S(0), "buffer", T(String), NULL, S(0), NULL, S(0), "mode", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-gzhandler.php )\n *\n * ob_gzhandler() is intended to be used as a callback function for\n * ob_start() to help facilitate sending gz-encoded data to web browsers\n * that support compressed web pages. Before ob_gzhandler() actually sends\n * compressed data, it determines what type of content encoding the browser\n * will accept (\"gzip\", \"deflate\" or none at all) and will return its\n * output accordingly. All browsers are supported since it's up to the\n * browser to send the correct header saying that it accepts compressed web\n * pages. If a browser doesn't support compressed pages this function\n * returns FALSE.\n *\n * @buffer     string\n * @mode       int\n *\n * @return     string\n */",
"ob_implicit_flush", T(Void), S(0), "flag", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-implicit-flush.php )\n *\n * ob_implicit_flush() will turn implicit flushing on or off. Implicit\n * flushing will result in a flush operation after every output call, so\n * that explicit calls to flush() will no longer be needed.\n *\n * @flag       bool    TRUE to turn implicit flushing on, FALSE otherwise.\n *\n * @return     mixed   No value is returned.\n */",
"ob_list_handlers", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ob-list-handlers.php )\n *\n * Lists all output handlers in use.\n *\n * @return     vector  This will return an array with the output handlers\n *                     in use (if any). If output_buffering is enabled or\n *                     an anonymous function was used with ob_start(),\n *                     ob_list_handlers() will return \"default output\n *                     handler\".\n */", 
"output_add_rewrite_var", T(Boolean), S(0), "name", T(String), NULL, S(0), NULL, S(0), "value", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.output-add-rewrite-var.php )\n *\n * This function adds another name/value pair to the URL rewrite\n * mechanism. The name and value will be added to URLs (as GET parameter)\n * and forms (as hidden input fields) the same way as the session ID when\n * transparent URL rewriting is enabled with session.use_trans_sid. Please\n * note that absolute URLs (http://example.com/..) aren't rewritten.\n *\n * This function's behavior is controlled by the url_rewriter.tags php.ini\n * parameter. Calling this function will implicitly start output buffering\n * if it is not active already.\n *\n * @name       string  The variable name.\n * @value      string  The variable value.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"output_reset_rewrite_vars", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.output-reset-rewrite-vars.php )\n *\n * This function resets the URL rewriter and removes all rewrite variables\n * previously set by the output_add_rewrite_var() function or the session\n * mechanism (if session.use_trans_sid was set on session_start()).\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"hphp_crash_log", T(Void), S(0), "name", T(String), NULL, S(0), NULL, S(0), "value", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Adds an entry to a log file that's written when server crashes. This is\n * useful for diagnose why server crashed. For example, logged-on user's\n * ID.\n *\n * @name       string  Name of the value.\n * @value      string  Value to write to log.\n */",
"hphp_stats", T(Void), S(0), "name", T(String), NULL, S(0), NULL, S(0), "value", T(Int64), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Tallies a number for server stats.\n *\n * @name       string  Name of the entry. This name can then be used with\n *                     admin commands to retrieve stats while server is\n *                     running.\n * @value      int     An integer to add up.\n */",
"hphp_get_stats", T(Int64), S(0), "name", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Checks current value of a server stats.\n *\n * @name       string  Name of the entry.\n *\n * @return     int     Currently accumulated count.\n */",
"hphp_get_status", T(Array), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Returns status of different server threads.\n *\n * @return     map     Array of thread statuses.\n */", 
"hphp_get_iostatus", T(Array), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Returns I/O status of current thread. EnableNetworkIOStatus has to be\n * turned on.\n *\n * @return     map     Array of all I/O so far for current thread.\n */", 
"hphp_set_iostatus_address", T(Void), S(0), "name", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Use this name, instead of IP address or URL for I/O status reporting.\n * The name will only be effective for the upcoming I/O and it will be\n * reset immediately after. Use logical network address for grouping\n * network I/O by intention, instead of physical addresses.\n *\n * @name       string  Specifies the logical name to replace with.\n *\n * @return     mixed   No value is returned.\n */",
"hphp_get_timers", T(Variant), S(0), "get_as_float", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Returns timestamps of different request events.\n *\n * @get_as_float\n *             bool    same as in microtime() to specify output format,\n *                     except it defaults to true for float format.\n *\n * @return     mixed   An array of three timestamps: 'queue', the time a\n *                     request is received and queued up; 'process-wall',\n *                     the wall clock time a request starts to get\n *                     processed; and 'process-cpu', the CPU clock time a\n *                     request starts to get processed.\n */",
"hphp_output_global_state", T(Variant), S(0), "serialize", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Dumps all variables in global state, including global variables, static\n * variables, class statics and others.\n *\n * @serialize  bool    Specifies what format to use, whether to serialize\n *                     into a string.\n *\n * @return     mixed   An array of global state.\n */",
"hphp_instruction_counter", T(Int64), S(0), NULL, S(4276224), "/**\n * ( HipHop specific )\n *\n *\n * @return     int     Returns the current instruction counter value.\n */", 
"hphp_get_hardware_counters", T(Variant), S(0), NULL, S(4276224), "/**\n * ( HipHop specific )\n *\n *\n * @return     mixed   An array of hardware counters\n */", 
"hphp_set_hardware_events", T(Boolean), S(0), "events", T(String), "N;", S(2), "null", S(0), NULL, S(4276224), "/**\n * ( HipHop specific )\n *\n *\n * @events     string  comma separated list of hardware events\n *\n * @return     bool    returns TRUE on success and FALSE on failure\n */",
"hphp_clear_hardware_events", T(Void), S(0), NULL, S(4276224), "/**\n * ( HipHop specific )\n *\n *\n */", 

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
