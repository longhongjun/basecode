// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"bcscale", T(Boolean), S(0), "scale", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bcscale.php )\n *\n * Sets the default scale parameter for all subsequent bc math functions\n * that do not explicitly specify a scale parameter.\n *\n * @scale      int     The scale factor.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"bcadd", T(String), S(0), "left", T(String), NULL, S(0), NULL, S(0), "right", T(String), NULL, S(0), NULL, S(0), "scale", T(Int64), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bcadd.php )\n *\n * Sums left_operand and right_operand.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     string  The sum of the two operands, as a string.\n */",
"bcsub", T(String), S(0), "left", T(String), NULL, S(0), NULL, S(0), "right", T(String), NULL, S(0), NULL, S(0), "scale", T(Int64), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bcsub.php )\n *\n * Subtracts the right_operand from the left_operand.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     string  The result of the subtraction, as a string.\n */",
"bccomp", T(Int64), S(0), "left", T(String), NULL, S(0), NULL, S(0), "right", T(String), NULL, S(0), NULL, S(0), "scale", T(Int64), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bccomp.php )\n *\n * Compares the left_operand to the right_operand and returns the result\n * as an integer.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @scale      int     The optional scale parameter is used to set the\n *                     number of digits after the decimal place which will\n *                     be used in the comparison.\n *\n * @return     int     Returns 0 if the two operands are equal, 1 if the\n *                     left_operand is larger than the right_operand, -1\n *                     otherwise.\n */",
"bcmul", T(String), S(0), "left", T(String), NULL, S(0), NULL, S(0), "right", T(String), NULL, S(0), NULL, S(0), "scale", T(Int64), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bcmul.php )\n *\n * Multiply the left_operand by the right_operand.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     string  Returns the result as a string.\n */",
"bcdiv", T(String), S(0), "left", T(String), NULL, S(0), NULL, S(0), "right", T(String), NULL, S(0), NULL, S(0), "scale", T(Int64), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bcdiv.php )\n *\n * Divides the left_operand by the right_operand.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     string  Returns the result of the division as a string, or\n *                     NULL if right_operand is 0.\n */",
"bcmod", T(String), S(0), "left", T(String), NULL, S(0), NULL, S(0), "right", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bcmod.php )\n *\n * Get the modulus of the left_operand using modulus.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The modulus, as a string.\n *\n * @return     string  Returns the modulus as a string, or NULL if modulus\n *                     is 0.\n */",
"bcpow", T(String), S(0), "left", T(String), NULL, S(0), NULL, S(0), "right", T(String), NULL, S(0), NULL, S(0), "scale", T(Int64), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bcpow.php )\n *\n * Raise left_operand to the power right_operand.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     string  Returns the result as a string.\n */",
"bcpowmod", T(Variant), S(0), "left", T(String), NULL, S(0), NULL, S(0), "right", T(String), NULL, S(0), NULL, S(0), "modulus", T(String), NULL, S(0), NULL, S(0), "scale", T(Int64), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bcpowmod.php )\n *\n * Use the fast-exponentiation method to raise left_operand to the power\n * right_operand with respect to the modulus modulus.\n *\n * @left       string  The left operand, as a string.\n * @right      string  The right operand, as a string.\n * @modulus    string  The modulus, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     mixed   Returns the result as a string, or NULL if modulus\n *                     is 0.\n */",
"bcsqrt", T(Variant), S(0), "operand", T(String), NULL, S(0), NULL, S(0), "scale", T(Int64), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bcsqrt.php )\n *\n * Return the square root of the operand.\n *\n * @operand    string  The operand, as a string.\n * @scale      int     This optional parameter is used to set the number of\n *                     digits after the decimal place in the result. You\n *                     can also set the global default scale for all\n *                     functions by using bcscale().\n *\n * @return     mixed   Returns the square root as a string, or NULL if\n *                     operand is negative.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
