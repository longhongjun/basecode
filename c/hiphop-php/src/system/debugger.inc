// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"hphpd_install_user_command", T(Boolean), S(0), "cmd", T(String), NULL, S(0), NULL, S(0), "clsname", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Expands HipHop debugger with a user extended command.\n *\n * @cmd        string  The command name to register.\n * @clsname    string  The debugger command class that has its\n *                     implementation.\n *\n * @return     bool    TRUE if the command name was not used before, FALSE\n *                     otherwise.\n */",
"hphpd_get_user_commands", T(Array), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Gets a list of user extended commands.\n *\n * @return     map     A map of commands and their PHP classes.\n */", 
"hphpd_break", T(Void), S(0), "condition", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Sets a hard breakpoint. When a debugger is running, this line of code\n * will break into debugger, if condition is met. If there is no debugger\n * that's attached, it will not do anything.\n *\n * @condition  bool    If true, break, otherwise, continue.\n */",
"hphpd_get_client", T(Variant), S(0), "name", T(String), "N;", S(2), "null", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Gets an hphpd client with a string key (creating on-demand). With the\n * same key, it guarantees to get the same debugger client across multiple\n * requests. One hphpd client can only be gotten by a single request at any\n * given time. Will return null if the client is already gotten.\n *\n * @name       string  the name to identify the debugger client\n *\n * @return     mixed\n */",
"hphpd_client_ctrl", T(Variant), S(0), "name", T(String), NULL, S(0), NULL, S(0), "op", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Make special operations on a client, such as interrupt a waiting\n * client.\n *\n * @name       string  the name to identify the debugger client\n * @op         string  the string to represent the operation\n *\n * @return     mixed\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2
"DebuggerProxyCmdUser", "", NULL, "__construct", T(Void), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Constructor of DebuggerProxyCmdUser.\n *\n */", S(81920),"isLocal", T(Boolean), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Whether this proxy is running locally for debugging a local script, or\n * running remotely on a server.\n *\n * @return     bool    TRUE if locally, FALSE if remote.\n */", S(81920),"send", T(Variant), S(0), "cmd", T(Object), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Sends a command back to DebuggerClientCmdUser.\n *\n * @cmd        object  The command to send to client.\n *\n * @return     mixed   TRUE if successful, FALSE otherwise.\n */", S(81920),NULL,NULL,NULL,
S(81920), "/**\n * ( HipHop specific )\n *\n * DebuggerProxy wrapper for CmdUser\n *\n */", "DebuggerClientCmdUser", "", NULL, "__construct", T(Void), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Constructor of DebuggerClientCmdUser.\n *\n */", S(81920),"quit", T(Void), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Quits the client.\n *\n */", S(81920),"print", T(Void), S(0), "format", T(String), NULL, S(0), NULL, S(0), NULL, S(212992), "/**\n * ( HipHop specific )\n *\n * Prints some text without any color.\n *\n * @format     string  Format string in printf() style.\n */", S(212992),"help", T(Void), S(0), "format", T(String), NULL, S(0), NULL, S(0), NULL, S(212992), "/**\n * ( HipHop specific )\n *\n * Prints some text in help color.\n *\n * @format     string  Format string in printf() style.\n */", S(212992),"info", T(Void), S(0), "format", T(String), NULL, S(0), NULL, S(0), NULL, S(212992), "/**\n * ( HipHop specific )\n *\n * Prints some text in information color.\n *\n * @format     string  Format string in printf() style.\n */", S(212992),"output", T(Void), S(0), "format", T(String), NULL, S(0), NULL, S(0), NULL, S(212992), "/**\n * ( HipHop specific )\n *\n * Prints some text in script output color.\n *\n * @format     string  Format string in printf() style.\n */", S(212992),"error", T(Void), S(0), "format", T(String), NULL, S(0), NULL, S(0), NULL, S(212992), "/**\n * ( HipHop specific )\n *\n * Prints some text in error color.\n *\n * @format     string  Format string in printf() style.\n */", S(212992),"code", T(Void), S(0), "source", T(String), NULL, S(0), NULL, S(0), "highlight_line", T(Int32), "i:0;", S(4), "0", S(0), "start_line_no", T(Int32), "i:0;", S(4), "0", S(0), "end_line_no", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Pretty print PHP source code.\n *\n * @source     string  PHP source code to print.\n * @highlight_line\n *             int     Which line to focus or highlight.\n * @start_line_no\n *             int     Starting line number. 0 for no line no.\n * @end_line_no\n *             int     End line number. 0 for no end line no.\n */", S(81920),"ask", T(Variant), S(0), "format", T(String), NULL, S(0), NULL, S(0), NULL, S(212992), "/**\n * ( HipHop specific )\n *\n * Ask end user a question.\n *\n * @format     string  Format string in printf() style.\n *\n * @return     mixed   Single letter response from end user.\n */", S(212992),"wrap", T(String), S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Wraps some text to fit screen width.\n *\n * @str        string  String to wrap.\n *\n * @return     string  Formatted string.\n */", S(81920),"helpTitle", T(Void), S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Displays a title for a help topic.\n *\n * @str        string  Title text.\n */", S(81920),"helpCmds", T(Void), S(0), "cmd", T(String), NULL, S(0), NULL, S(0), "desc", T(String), NULL, S(0), NULL, S(0), NULL, S(212992), "/**\n * ( HipHop specific )\n *\n * Displays a list of commands in help format. Each command has a name and\n * a short description, and specify more commands in pairs. For example,\n * $client->helpCmds('cmd1', 'desc1', 'cmd2', 'desc2').\n *\n * @cmd        string  Command name.\n * @desc       string  Command description.\n */", S(212992),"helpBody", T(Void), S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Displays help contents. A help body is a help section with one empty\n * line before and one empty line after.\n *\n * @str        string  The help text.\n */", S(81920),"helpSection", T(Void), S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Displays a section of help text.\n *\n * @str        string  One section of help text.\n */", S(81920),"tutorial", T(Void), S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Tutorials are help texts displayed according to user's preference. In\n * auto mode (vs. always on or always off modes), one tutorial text is only\n * displayed just once to end user.\n *\n * @str        string  Help texts guiding end user for learning how to use\n *                     debugger.\n */", S(81920),"getCode", T(String), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * PHP code snippet user just typed in manually.\n *\n * @return     string  The PHP source code.\n */", S(81920),"getCommand", T(String), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Debugger command end user typed.\n *\n * @return     string  The command text.\n */", S(81920),"arg", T(Boolean), S(0), "index", T(Int32), NULL, S(0), NULL, S(0), "str", T(String), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Tests if an argument matches a pre-defined keyword. As long as it\n * matches the keyword partially and case-insensitively, it is considered\n * as a match. For example, $client->arg(2, 'foo') will return TRUE if user\n * inputs 'f' or 'fo' or 'Fo' for the 2nd argument.\n *\n * @index      int     Argument index.\n * @str        string  The string to compare with.\n *\n * @return     bool    TRUE if matched. FALSE otherwise.\n */", S(81920),"argCount", T(Int64), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Count of total arguments.\n *\n * @return     int     The count, not including user command itself.\n */", S(81920),"argValue", T(String), S(0), "index", T(Int32), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Gets value of an argument.\n *\n * @index      int     Argument index.\n *\n * @return     string  String value of an argument.\n */", S(81920),"lineRest", T(String), S(0), "index", T(Int32), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Gets rest of line all together as a single string.\n *\n * @index      int     The starting index to include arguments.\n *\n * @return     string  The string that has all argument at and after\n *                     certain index.\n */", S(81920),"args", T(Array), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n *\n * @return     vector\n */", S(81920),"send", T(Variant), S(0), "cmd", T(Object), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Sends a debugger command to debugger proxy.\n *\n * @cmd        object  The command to send.\n *\n * @return     mixed   TRUE if successful, FALSE otherwise.\n */", S(81920),"xend", T(Variant), S(0), "cmd", T(Object), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Exchanges command with proxy: sends a command to debugger and expects\n * and receives a command from debugger.\n *\n * @cmd        object  The command to send.\n *\n * @return     mixed   The received command, and it is always the same type\n *                     as what it sends, so the same command class can\n *                     handle processing at both sending and receiving\n *                     sides.\n */", S(81920),"getCurrentLocation", T(Variant), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Gets current source location.\n *\n * @return     mixed   An array in a format of array('file' => {source file\n *                     name}, 'line' => {line number}, 'namespace' =>\n *                     {namespace code is in}, 'class' => {class code is\n *                     in}, 'function' => {function code is in}, 'text' =>\n *                     {human readable description of current source\n *                     location}).\n */", S(81920),"getStackTrace", T(Variant), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Gets current stacktrace.\n *\n * @return     mixed   An array of stacktrace frames.\n */", S(81920),"getFrame", T(Int64), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Returns current frame index.\n *\n * @return     int     An index indicating which frame end user has moved\n *                     to for inspection.\n */", S(81920),"printFrame", T(Void), S(0), "index", T(Int32), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Prints a stacktrace frame.\n *\n * @index      int     Which frame to print.\n */", S(81920),"addCompletion", T(Void), S(0), "list", T(Variant), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Adds string(s) to auto-completion. This function is only effective\n * inside DebuggerClientCmdUser::onAutoComplete().\n *\n * @list       mixed   A single string, an AUTO_COMPLETE_ constant or an\n *                     array of strings.\n */", S(81920),NULL,NULL,"AUTO_COMPLETE_FILENAMES", T(Int64),"AUTO_COMPLETE_VARIABLES", T(Int64),"AUTO_COMPLETE_CONSTANTS", T(Int64),"AUTO_COMPLETE_CLASSES", T(Int64),"AUTO_COMPLETE_FUNCTIONS", T(Int64),"AUTO_COMPLETE_CLASS_METHODS", T(Int64),"AUTO_COMPLETE_CLASS_PROPERTIES", T(Int64),"AUTO_COMPLETE_CLASS_CONSTANTS", T(Int64),"AUTO_COMPLETE_KEYWORDS", T(Int64),"AUTO_COMPLETE_CODE", T(Int64),NULL,
S(81920), "/**\n * ( HipHop specific )\n *\n * DebuggerClient wrapper for CmdUser\n *\n */", "DebuggerClient", "", NULL, "__construct", T(Void), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Constructor\n *\n */", S(81920),"getState", T(Int64), S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * get current state of the debugger client\n *\n * @return     int     One of the constants\n */", S(81920),"init", T(Variant), S(0), "options", T(Variant), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * initialize the debugger client\n *\n * @options    mixed   array for passing options\n *\n * @return     mixed   TBD\n */", S(81920),"processCmd", T(Variant), S(0), "cmdName", T(Variant), NULL, S(0), NULL, S(0), "args", T(Variant), NULL, S(0), NULL, S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * issue a command to debugger client\n *\n * @cmdName    mixed   name of the command to be executed\n * @args       mixed   A vector array of strings to be used as arguments\n *\n * @return     mixed   TBD\n */", S(81920),NULL,NULL,"STATE_INVALID", T(Int64),"STATE_UNINIT", T(Int64),"STATE_INITIALIZING", T(Int64),"STATE_READY_FOR_COMMAND", T(Int64),"STATE_BUSY", T(Int64),NULL,
S(134299648), "/**\n * ( HipHop specific )\n *\n *\n */", 
#endif
