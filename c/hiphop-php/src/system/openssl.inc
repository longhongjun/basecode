// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"openssl_csr_export_to_file", T(Boolean), S(0), "csr", T(Variant), NULL, S(0), NULL, S(0), "outfilename", T(String), NULL, S(0), NULL, S(0), "notext", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-csr-export-to-file.php )\n *\n * openssl_csr_export_to_file() takes the Certificate Signing Request\n * represented by csr and saves it as ascii-armoured text into the file\n * named by outfilename.\n *\n * @csr        mixed\n * @outfilename\n *             string  Path to the output file.\n * @notext     bool    The optional parameter notext affects the verbosity\n *                     of the output; if it is FALSE, then additional\n *                     human-readable information is included in the\n *                     output. The default value of notext is TRUE.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_csr_export", T(Boolean), S(0), "csr", T(Variant), NULL, S(0), NULL, S(0), "out", T(Variant), NULL, S(0), NULL, S(1), "notext", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-csr-export.php\n * )\n *\n * openssl_csr_export() takes the Certificate Signing Request represented\n * by csr and stores it as ascii-armoured text into out, which is passed by\n * reference.\n *\n * @csr        mixed\n * @out        mixed\n * @notext     bool    The optional parameter notext affects the verbosity\n *                     of the output; if it is FALSE, then additional\n *                     human-readable information is included in the\n *                     output. The default value of notext is TRUE.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_csr_get_public_key", T(Variant), S(0), "csr", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-csr-get-public-key.php )\n *\n *\n * @csr        mixed\n *\n * @return     mixed\n */",
"openssl_csr_get_subject", T(Variant), S(0), "csr", T(Variant), NULL, S(0), NULL, S(0), "use_shortnames", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-csr-get-subject.php )\n *\n *\n * @csr        mixed\n * @use_shortnames\n *             bool\n *\n * @return     mixed\n */",
"openssl_csr_new", T(Variant), S(0), "dn", T(Array), NULL, S(0), NULL, S(0), "privkey", T(Variant), NULL, S(0), NULL, S(1), "configargs", T(Variant), "N;", S(2), "null", S(0), "extraattribs", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-csr-new.php )\n *\n * openssl_csr_new() generates a new CSR (Certificate Signing Request)\n * based on the information provided by dn, which represents the\n * Distinguished Name to be used in the certificate. You need to have a\n * valid openssl.cnf installed for this function to operate correctly. See\n * the notes under the installation section for more information.\n *\n * @dn         map     The Distinguished Name to be used in the\n *                     certificate.\n * @privkey    mixed   privkey should be set to a private key that was\n *                     previously generated by openssl_pkey_new() (or\n *                     otherwise obtained from the other openssl_pkey\n *                     family of functions). The corresponding public\n *                     portion of the key will be used to sign the CSR.\n * @configargs mixed   By default, the information in your system\n *                     openssl.conf is used to initialize the request; you\n *                     can specify a configuration file section by setting\n *                     the config_section_section key of configargs. You\n *                     can also specify an alternative openssl\n *                     configuration file by setting the value of the\n *                     config key to the path of the file you want to use.\n *                     The following keys, if present in configargs behave\n *                     as their equivalents in the openssl.conf, as listed\n *                     in the table below. Configuration overrides\n *                     configargs key type openssl.conf equivalent\n *                     description digest_alg string default_md Selects\n *                     which digest method to use x509_extensions string\n *                     x509_extensions Selects which extensions should be\n *                     used when creating an x509 certificate\n *                     req_extensions string req_extensions Selects which\n *                     extensions should be used when creating a CSR\n *                     private_key_bits integer default_bits Specifies how\n *                     many bits should be used to generate a private key\n *                     private_key_type integer none Specifies the type of\n *                     private key to create. This can be one of\n *                     OPENSSL_KEYTYPE_DSA, OPENSSL_KEYTYPE_DH or\n *                     OPENSSL_KEYTYPE_RSA. The default value is\n *                     OPENSSL_KEYTYPE_RSA which is currently the only\n *                     supported key type. encrypt_key boolean encrypt_key\n *                     Should an exported key (with passphrase) be\n *                     encrypted\?\n * @extraattribs\n *             mixed   extraattribs is used to specify additional\n *                     configuration options for the CSR. Both dn and\n *                     extraattribs are associative arrays whose keys are\n *                     converted to OIDs and applied to the relevant part\n *                     of the request.\n *\n * @return     mixed   Returns the CSR.\n */",
"openssl_csr_sign", T(Variant), S(0), "csr", T(Variant), NULL, S(0), NULL, S(0), "cacert", T(Variant), NULL, S(0), NULL, S(0), "priv_key", T(Variant), NULL, S(0), NULL, S(0), "days", T(Int32), NULL, S(0), NULL, S(0), "configargs", T(Variant), "N;", S(2), "null", S(0), "serial", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-csr-sign.php )\n *\n * openssl_csr_sign() generates an x509 certificate resource from the\n * given CSR. You need to have a valid openssl.cnf installed for this\n * function to operate correctly. See the notes under the installation\n * section for more information.\n *\n * @csr        mixed   A CSR previously generated by openssl_csr_new(). It\n *                     can also be the path to a PEM encoded CSR when\n *                     specified as file://path/to/csr or an exported\n *                     string generated by openssl_csr_export().\n * @cacert     mixed   The generated certificate will be signed by cacert.\n *                     If cacert is NULL, the generated certificate will be\n *                     a self-signed certificate.\n * @priv_key   mixed   priv_key is the private key that corresponds to\n *                     cacert.\n * @days       int     days specifies the length of time for which the\n *                     generated certificate will be valid, in days.\n * @configargs mixed   You can finetune the CSR signing by configargs. See\n *                     openssl_csr_new() for more information about\n *                     configargs.\n * @serial     int     An optional the serial number of issued certificate.\n *                     If not specified it will default to 0.\n *\n * @return     mixed   Returns an x509 certificate resource on success,\n *                     FALSE on failure.\n */",
"openssl_error_string", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-error-string.php )\n *\n * openssl_error_string() returns the last error from the openSSL library.\n * Error messages are stacked, so this function should be called multiple\n * times to collect all of the information.\n *\n * @return     mixed   Returns an error message string, or FALSE if there\n *                     are no more error messages to return.\n */", 
"openssl_open", T(Boolean), S(0), "sealed_data", T(String), NULL, S(0), NULL, S(0), "open_data", T(Variant), NULL, S(0), NULL, S(1), "env_key", T(String), NULL, S(0), NULL, S(0), "priv_key_id", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-open.php )\n *\n * openssl_open() opens (decrypts) sealed_data using the private key\n * associated with the key identifier priv_key_id and the envelope key\n * env_key, and fills open_data with the decrypted data. The envelope key\n * is generated when the data are sealed and can only be used by one\n * specific private key. See openssl_seal() for more information.\n *\n * @sealed_data\n *             string\n * @open_data  mixed   If the call is successful the opened data is\n *                     returned in this parameter.\n * @env_key    string\n * @priv_key_id\n *             mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_pkcs12_export_to_file", T(Boolean), S(0), "x509", T(Variant), NULL, S(0), NULL, S(0), "filename", T(String), NULL, S(0), NULL, S(0), "priv_key", T(Variant), NULL, S(0), NULL, S(0), "pass", T(String), NULL, S(0), NULL, S(0), "args", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkcs12-export-to-file.php )\n *\n * openssl_pkcs12_export_to_file() stores x509 into a file named by\n * filename in a PKCS#12 file format.\n *\n * @x509       mixed   See Key/Certificate parameters for a list of valid\n *                     values.\n * @filename   string  Path to the output file.\n * @priv_key   mixed   Private key component of PKCS#12 file.\n * @pass       string  Encryption password for unlocking the PKCS#12 file.\n * @args       mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_pkcs12_export", T(Boolean), S(0), "x509", T(Variant), NULL, S(0), NULL, S(0), "out", T(Variant), NULL, S(0), NULL, S(1), "priv_key", T(Variant), NULL, S(0), NULL, S(0), "pass", T(String), NULL, S(0), NULL, S(0), "args", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkcs12-export.php )\n *\n * openssl_pkcs12_export() stores x509 into a string named by out in a\n * PKCS#12 file format.\n *\n * @x509       mixed   See Key/Certificate parameters for a list of valid\n *                     values.\n * @out        mixed   On success, this will hold the PKCS#12.\n * @priv_key   mixed   Private key component of PKCS#12 file.\n * @pass       string  Encryption password for unlocking the PKCS#12 file.\n * @args       mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_pkcs12_read", T(Boolean), S(0), "pkcs12", T(String), NULL, S(0), NULL, S(0), "certs", T(Variant), NULL, S(0), NULL, S(1), "pass", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-pkcs12-read.php\n * )\n *\n * openssl_pkcs12_read() parses the PKCS#12 certificate store supplied by\n * pkcs12 into a array named certs.\n *\n * @pkcs12     string\n * @certs      mixed   On success, this will hold the Certificate Store\n *                     Data.\n * @pass       string  Encryption password for unlocking the PKCS#12 file.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_pkcs7_decrypt", T(Boolean), S(0), "infilename", T(String), NULL, S(0), NULL, S(0), "outfilename", T(String), NULL, S(0), NULL, S(0), "recipcert", T(Variant), NULL, S(0), NULL, S(0), "recipkey", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkcs7-decrypt.php )\n *\n * Decrypts the S/MIME encrypted message contained in the file specified\n * by infilename using the certificate and its associated private key\n * specified by recipcert and recipkey.\n *\n * @infilename string\n * @outfilename\n *             string  The decrypted message is written to the file\n *                     specified by outfilename.\n * @recipcert  mixed\n * @recipkey   mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_pkcs7_encrypt", T(Boolean), S(0), "infilename", T(String), NULL, S(0), NULL, S(0), "outfilename", T(String), NULL, S(0), NULL, S(0), "recipcerts", T(Variant), NULL, S(0), NULL, S(0), "headers", T(Array), NULL, S(0), NULL, S(0), "flags", T(Int32), "i:0;", S(4), "0", S(0), "cipherid", T(Int32), "i:0;", S(4), "OPENSSL_CIPHER_RC2_40", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkcs7-encrypt.php )\n *\n * openssl_pkcs7_encrypt() takes the contents of the file named infile and\n * encrypts them using an RC2 40-bit cipher so that they can only be read\n * by the intended recipients specified by recipcerts.\n *\n * @infilename string\n * @outfilename\n *             string\n * @recipcerts mixed   Either a lone X.509 certificate, or an array of\n *                     X.509 certificates.\n * @headers    vector  headers is an array of headers that will be\n *                     prepended to the data after it has been encrypted.\n *\n *                     headers can be either an associative array keyed by\n *                     header name, or an indexed array, where each element\n *                     contains a single header line.\n * @flags      int     flags can be used to specify options that affect the\n *                     encoding process - see PKCS7 constants.\n * @cipherid   int     Cipher can be selected with cipherid.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_pkcs7_sign", T(Boolean), S(0), "infilename", T(String), NULL, S(0), NULL, S(0), "outfilename", T(String), NULL, S(0), NULL, S(0), "signcert", T(Variant), NULL, S(0), NULL, S(0), "privkey", T(Variant), NULL, S(0), NULL, S(0), "headers", T(Variant), NULL, S(0), NULL, S(0), "flags", T(Int32), "i:64;", S(5), "PKCS7_DETACHED", S(0), "extracerts", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-pkcs7-sign.php\n * )\n *\n * openssl_pkcs7_sign() takes the contents of the file named infilename\n * and signs them using the certificate and its matching private key\n * specified by signcert and privkey parameters.\n *\n * @infilename string\n * @outfilename\n *             string\n * @signcert   mixed\n * @privkey    mixed\n * @headers    mixed   headers is an array of headers that will be\n *                     prepended to the data after it has been signed (see\n *                     openssl_pkcs7_encrypt() for more information about\n *                     the format of this parameter).\n * @flags      int     flags can be used to alter the output - see PKCS7\n *                     constants.\n * @extracerts string  extracerts specifies the name of a file containing a\n *                     bunch of extra certificates to include in the\n *                     signature which can for example be used to help the\n *                     recipient to verify the certificate that you used.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_pkcs7_verify", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "flags", T(Int32), NULL, S(0), NULL, S(0), "outfilename", T(String), "N;", S(2), "null", S(0), "cainfo", T(Array), "N;", S(2), "null", S(0), "extracerts", T(String), "N;", S(2), "null", S(0), "content", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkcs7-verify.php )\n *\n * openssl_pkcs7_verify() reads the S/MIME message contained in the given\n * file and examines the digital signature.\n *\n * @filename   string  Path to the message.\n * @flags      int     flags can be used to affect how the signature is\n *                     verified - see PKCS7 constants for more information.\n * @outfilename\n *             string  If the outfilename is specified, it should be a\n *                     string holding the name of a file into which the\n *                     certificates of the persons that signed the messages\n *                     will be stored in PEM format.\n * @cainfo     vector  If the cainfo is specified, it should hold\n *                     information about the trusted CA certificates to use\n *                     in the verification process - see certificate\n *                     verification for more information about this\n *                     parameter.\n * @extracerts string  If the extracerts is specified, it is the filename\n *                     of a file containing a bunch of certificates to use\n *                     as untrusted CAs.\n * @content    string  You can specify a filename with content that will be\n *                     filled with the verified data, but with the\n *                     signature information stripped.\n *\n * @return     mixed   Returns TRUE if the signature is verified, FALSE if\n *                     it is not correct (the message has been tampered\n *                     with, or the signing certificate is invalid), or -1\n *                     on error.\n */",
"openssl_pkey_export_to_file", T(Boolean), S(0), "key", T(Variant), NULL, S(0), NULL, S(0), "outfilename", T(String), NULL, S(0), NULL, S(0), "passphrase", T(String), "N;", S(2), "null", S(0), "configargs", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkey-export-to-file.php )\n *\n * openssl_pkey_export_to_file() saves an ascii-armoured (PEM encoded)\n * rendition of key into the file named by outfilename. You need to have a\n * valid openssl.cnf installed for this function to operate correctly. See\n * the notes under the installation section for more information.\n *\n * @key        mixed\n * @outfilename\n *             string  Path to the output file.\n * @passphrase string  The key can be optionally protected by a passphrase.\n * @configargs mixed   configargs can be used to fine-tune the export\n *                     process by specifying and/or overriding options for\n *                     the openssl configuration file. See\n *                     openssl_csr_new() for more information about\n *                     configargs.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_pkey_export", T(Boolean), S(0), "key", T(Variant), NULL, S(0), NULL, S(0), "out", T(Variant), NULL, S(0), NULL, S(1), "passphrase", T(String), "N;", S(2), "null", S(0), "configargs", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-pkey-export.php\n * )\n *\n * openssl_pkey_export() exports key as a PEM encoded string and stores it\n * into out (which is passed by reference). You need to have a valid\n * openssl.cnf installed for this function to operate correctly. See the\n * notes under the installation section for more information.\n *\n * @key        mixed\n * @out        mixed\n * @passphrase string  The key is optionally protected by passphrase.\n * @configargs mixed   configargs can be used to fine-tune the export\n *                     process by specifying and/or overriding options for\n *                     the openssl configuration file. See\n *                     openssl_csr_new() for more information about\n *                     configargs.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_pkey_free", T(Void), S(0), "key", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-pkey-free.php )\n *\n * This function frees a private key created by openssl_pkey_new().\n *\n * @key        object  Resource holding the key.\n *\n * @return     mixed   No value is returned.\n */",
"openssl_free_key", T(Void), S(0), "key", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-free-key.php )\n *\n * openssl_free_key() frees the key associated with the specified\n * key_identifier from memory.\n *\n * @key        object\n *\n * @return     mixed   No value is returned.\n */",
"openssl_pkey_get_details", T(Array), S(0), "key", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkey-get-details.php )\n *\n * This function returns the key details (bits, key, type).\n *\n * @key        object  Resource holding the key.\n *\n * @return     map     Returns an array with the key details in success or\n *                     FALSE in failure. Returned array has indexes bits\n *                     (number of bits), key (string representation of the\n *                     public key) and type (type of the key which is one\n *                     of OPENSSL_KEYTYPE_RSA, OPENSSL_KEYTYPE_DSA,\n *                     OPENSSL_KEYTYPE_DH, OPENSSL_KEYTYPE_EC or -1 meaning\n *                     unknown).\n */",
"openssl_pkey_get_private", T(Variant), S(0), "key", T(Variant), NULL, S(0), NULL, S(0), "passphrase", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkey-get-private.php )\n *\n * openssl_get_privatekey() parses key and prepares it for use by other\n * functions.\n *\n * @key        mixed   key can be one of the following: a string having the\n *                     format file://path/to/file.pem. The named file must\n *                     contain a PEM encoded certificate/private key (it\n *                     may contain both). A PEM formatted private key.\n * @passphrase string  The optional parameter passphrase must be used if\n *                     the specified key is encrypted (protected by a\n *                     passphrase).\n *\n * @return     mixed   Returns a positive key resource identifier on\n *                     success, or FALSE on error.\n */",
"openssl_get_privatekey", T(Variant), S(0), "key", T(Variant), NULL, S(0), NULL, S(0), "passphrase", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-get-privatekey.php )\n *\n *\n * @key        mixed\n * @passphrase string\n *\n * @return     mixed\n */",
"openssl_pkey_get_public", T(Variant), S(0), "certificate", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-pkey-get-public.php )\n *\n * openssl_get_publickey() extracts the public key from certificate and\n * prepares it for use by other functions.\n *\n * @certificate\n *             mixed   certificate can be one of the following: an X.509\n *                     certificate resource a string having the format\n *                     file://path/to/file.pem. The named file must contain\n *                     a PEM encoded certificate/private key (it may\n *                     contain both). A PEM formatted private key.\n *\n * @return     mixed   Returns a positive key resource identifier on\n *                     success, or FALSE on error.\n */",
"openssl_get_publickey", T(Variant), S(0), "certificate", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-get-publickey.php )\n *\n *\n * @certificate\n *             mixed\n *\n * @return     mixed\n */",
"openssl_pkey_new", T(Object), S(0), "configargs", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-pkey-new.php )\n *\n * openssl_pkey_new() generates a new private and public key pair. The\n * public component of the key can be obtained using\n * openssl_pkey_get_public(). You need to have a valid openssl.cnf\n * installed for this function to operate correctly. See the notes under\n * the installation section for more information.\n *\n * @configargs mixed   You can finetune the key generation (such as\n *                     specifying the number of bits) using configargs. See\n *                     openssl_csr_new() for more information about\n *                     configargs.\n *\n * @return     object  Returns a resource identifier for the pkey on\n *                     success, or FALSE on error.\n */",
"openssl_private_decrypt", T(Boolean), S(0), "data", T(String), NULL, S(0), NULL, S(0), "decrypted", T(Variant), NULL, S(0), NULL, S(1), "key", T(Variant), NULL, S(0), NULL, S(0), "padding", T(Int32), "i:1;", S(4), "OPENSSL_PKCS1_PADDING", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-private-decrypt.php )\n *\n * openssl_private_decrypt() decrypts data that was previous encrypted via\n * openssl_public_encrypt() and stores the result into decrypted.\n *\n * You can use this function e.g. to decrypt data which were supposed only\n * to you.\n *\n * @data       string\n * @decrypted  mixed\n * @key        mixed   key must be the private key corresponding that was\n *                     used to encrypt the data.\n * @padding    int     padding can be one of OPENSSL_PKCS1_PADDING,\n *                     OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING,\n *                     OPENSSL_NO_PADDING.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_private_encrypt", T(Boolean), S(0), "data", T(String), NULL, S(0), NULL, S(0), "crypted", T(Variant), NULL, S(0), NULL, S(1), "key", T(Variant), NULL, S(0), NULL, S(0), "padding", T(Int32), "i:1;", S(4), "OPENSSL_PKCS1_PADDING", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-private-encrypt.php )\n *\n * openssl_private_encrypt() encrypts data with private key and stores the\n * result into crypted. Encrypted data can be decrypted via\n * openssl_public_decrypt().\n *\n * This function can be used e.g. to sign data (or its hash) to prove that\n * it is not written by someone else.\n *\n * @data       string\n * @crypted    mixed\n * @key        mixed\n * @padding    int     padding can be one of OPENSSL_PKCS1_PADDING,\n *                     OPENSSL_NO_PADDING.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_public_decrypt", T(Boolean), S(0), "data", T(String), NULL, S(0), NULL, S(0), "decrypted", T(Variant), NULL, S(0), NULL, S(1), "key", T(Variant), NULL, S(0), NULL, S(0), "padding", T(Int32), "i:1;", S(4), "OPENSSL_PKCS1_PADDING", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-public-decrypt.php )\n *\n * openssl_public_decrypt() decrypts data that was previous encrypted via\n * openssl_private_encrypt() and stores the result into decrypted.\n *\n * You can use this function e.g. to check if the message was written by\n * the owner of the private key.\n *\n * @data       string\n * @decrypted  mixed\n * @key        mixed   key must be the public key corresponding that was\n *                     used to encrypt the data.\n * @padding    int     padding can be one of OPENSSL_PKCS1_PADDING,\n *                     OPENSSL_NO_PADDING.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_public_encrypt", T(Boolean), S(0), "data", T(String), NULL, S(0), NULL, S(0), "crypted", T(Variant), NULL, S(0), NULL, S(1), "key", T(Variant), NULL, S(0), NULL, S(0), "padding", T(Int32), "i:1;", S(4), "OPENSSL_PKCS1_PADDING", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-public-encrypt.php )\n *\n * openssl_public_encrypt() encrypts data with public key and stores the\n * result into crypted. Encrypted data can be decrypted via\n * openssl_private_decrypt().\n *\n * This function can be used e.g. to encrypt message which can be then\n * read only by owner of the private key. It can be also used to store\n * secure data in database.\n *\n * @data       string\n * @crypted    mixed   This will hold the result of the encryption.\n * @key        mixed   The public key.\n * @padding    int     padding can be one of OPENSSL_PKCS1_PADDING,\n *                     OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING,\n *                     OPENSSL_NO_PADDING.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_seal", T(Variant), S(0), "data", T(String), NULL, S(0), NULL, S(0), "sealed_data", T(Variant), NULL, S(0), NULL, S(1), "env_keys", T(Variant), NULL, S(0), NULL, S(1), "pub_key_ids", T(Array), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-seal.php )\n *\n * openssl_seal() seals (encrypts) data by using RC4 with a randomly\n * generated secret key. The key is encrypted with each of the public keys\n * associated with the identifiers in pub_key_ids and each encrypted key is\n * returned in env_keys. This means that one can send sealed data to\n * multiple recipients (provided one has obtained their public keys). Each\n * recipient must receive both the sealed data and the envelope key that\n * was encrypted with the recipient's public key.\n *\n * @data       string\n * @sealed_data\n *             mixed\n * @env_keys   mixed\n * @pub_key_ids\n *             vector\n *\n * @return     mixed   Returns the length of the sealed data on success, or\n *                     FALSE on error. If successful the sealed data is\n *                     returned in sealed_data, and the envelope keys in\n *                     env_keys.\n */",
"openssl_sign", T(Boolean), S(0), "data", T(String), NULL, S(0), NULL, S(0), "signature", T(Variant), NULL, S(0), NULL, S(1), "priv_key_id", T(Variant), NULL, S(0), NULL, S(0), "signature_alg", T(Int32), "i:1;", S(4), "OPENSSL_ALGO_SHA1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-sign.php )\n *\n * openssl_sign() computes a signature for the specified data by using\n * SHA1 for hashing followed by encryption using the private key associated\n * with priv_key_id. Note that the data itself is not encrypted.\n *\n * @data       string\n * @signature  mixed   If the call was successful the signature is returned\n *                     in signature.\n * @priv_key_id\n *             mixed\n * @signature_alg\n *             int     For more information see the list of Signature\n *                     Algorithms.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_verify", T(Variant), S(0), "data", T(String), NULL, S(0), NULL, S(0), "signature", T(String), NULL, S(0), NULL, S(0), "pub_key_id", T(Variant), NULL, S(0), NULL, S(0), "signature_alg", T(Int32), "i:1;", S(4), "OPENSSL_ALGO_SHA1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-verify.php )\n *\n * openssl_verify() verifies that the signature is correct for the\n * specified data using the public key associated with pub_key_id. This\n * must be the public key corresponding to the private key used for\n * signing.\n *\n * @data       string\n * @signature  string\n * @pub_key_id mixed\n * @signature_alg\n *             int     For more information see the list of Signature\n *                     Algorithms.\n *\n * @return     mixed   Returns 1 if the signature is correct, 0 if it is\n *                     incorrect, and -1 on error.\n */",
"openssl_x509_check_private_key", T(Boolean), S(0), "cert", T(Variant), NULL, S(0), NULL, S(0), "key", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-x509-check-private-key.php )\n *\n * Checks whether the given key is the private key that corresponds to\n * cert.\n *\n * @cert       mixed   The certificate.\n * @key        mixed   The private key.\n *\n * @return     bool    Returns TRUE if key is the private key that\n *                     corresponds to cert, or FALSE otherwise.\n */",
"openssl_x509_checkpurpose", T(Int64), S(0), "x509cert", T(Variant), NULL, S(0), NULL, S(0), "purpose", T(Int32), NULL, S(0), NULL, S(0), "cainfo", T(Array), "N;", S(2), "null", S(0), "untrustedfile", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-x509-checkpurpose.php )\n *\n * openssl_x509_checkpurpose() examines a certificate to see if it can be\n * used for the specified purpose.\n *\n * @x509cert   mixed   The examined certificate.\n * @purpose    int     openssl_x509_checkpurpose() purposes Constant\n *                     Description X509_PURPOSE_SSL_CLIENT Can the\n *                     certificate be used for the client side of an SSL\n *                     connection\? X509_PURPOSE_SSL_SERVER Can the\n *                     certificate be used for the server side of an SSL\n *                     connection\? X509_PURPOSE_NS_SSL_SERVER Can the cert\n *                     be used for Netscape SSL server\?\n *                     X509_PURPOSE_SMIME_SIGN Can the cert be used to sign\n *                     S/MIME email\? X509_PURPOSE_SMIME_ENCRYPT Can the\n *                     cert be used to encrypt S/MIME email\?\n *                     X509_PURPOSE_CRL_SIGN Can the cert be used to sign a\n *                     certificate revocation list (CRL)\? X509_PURPOSE_ANY\n *                     Can the cert be used for Any/All purposes\? These\n *                     options are not bitfields - you may specify one\n *                     only!\n * @cainfo     vector  cainfo should be an array of trusted CA files/dirs\n *                     as described in Certificate Verification.\n * @untrustedfile\n *             string  If specified, this should be the name of a PEM\n *                     encoded file holding certificates that can be used\n *                     to help verify the certificate, although no trust is\n *                     placed in the certificates that come from that file.\n *\n * @return     int     Returns TRUE if the certificate can be used for the\n *                     intended purpose, FALSE if it cannot, or -1 on\n *                     error.\n */",
"openssl_x509_export_to_file", T(Boolean), S(0), "x509", T(Variant), NULL, S(0), NULL, S(0), "outfilename", T(String), NULL, S(0), NULL, S(0), "notext", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-x509-export-to-file.php )\n *\n * openssl_x509_export_to_file() stores x509 into a file named by\n * outfilename in a PEM encoded format.\n *\n * @x509       mixed   See Key/Certificate parameters for a list of valid\n *                     values.\n * @outfilename\n *             string  Path to the output file.\n * @notext     bool    The optional parameter notext affects the verbosity\n *                     of the output; if it is FALSE, then additional\n *                     human-readable information is included in the\n *                     output. The default value of notext is TRUE.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_x509_export", T(Boolean), S(0), "x509", T(Variant), NULL, S(0), NULL, S(0), "output", T(Variant), NULL, S(0), NULL, S(1), "notext", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-x509-export.php\n * )\n *\n * openssl_x509_export() stores x509 into a string named by output in a\n * PEM encoded format.\n *\n * @x509       mixed   See Key/Certificate parameters for a list of valid\n *                     values.\n * @output     mixed   On success, this will hold the PEM.\n * @notext     bool    The optional parameter notext affects the verbosity\n *                     of the output; if it is FALSE, then additional\n *                     human-readable information is included in the\n *                     output. The default value of notext is TRUE.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"openssl_x509_free", T(Void), S(0), "x509cert", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-x509-free.php )\n *\n * openssl_x509_free() frees the certificate associated with the specified\n * x509cert resource from memory.\n *\n * @x509cert   object\n *\n * @return     mixed   No value is returned.\n */",
"openssl_x509_parse", T(Variant), S(0), "x509cert", T(Variant), NULL, S(0), NULL, S(0), "shortnames", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-x509-parse.php\n * )\n *\n * openssl_x509_parse() returns information about the supplied x509cert,\n * including fields such as subject name, issuer name, purposes, valid from\n * and valid to dates etc.\n *\n * @x509cert   mixed\n * @shortnames bool    shortnames controls how the data is indexed in the\n *                     array - if shortnames is TRUE (the default) then\n *                     fields will be indexed with the short name form,\n *                     otherwise, the long name form will be used - e.g.:\n *                     CN is the shortname form of commonName.\n *\n * @return     mixed   The structure of the returned data is (deliberately)\n *                     not yet documented, as it is still subject to\n *                     change.\n */",
"openssl_x509_read", T(Variant), S(0), "x509certdata", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-x509-read.php )\n *\n * openssl_x509_read() parses the certificate supplied by x509certdata and\n * returns a resource identifier for it.\n *\n * @x509certdata\n *             mixed\n *\n * @return     mixed   Returns a resource identifier on success or FALSE on\n *                     failure.\n */",
"openssl_random_pseudo_bytes", T(Variant), S(0), "length", T(Int32), NULL, S(0), NULL, S(0), "crypto_strong", T(Variant), "b:0;", S(4), "false", S(1), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-random-pseudo-bytes.php )\n *\n * Generates a string of pseudo-random bytes, with the number of bytes\n * determined by the length parameter.\n *\n * It also indicates if a cryptographically strong algorithm was used to\n * produce the pseudo-random bytes, and does this via the optional\n * crypto_strong parameter. It's rare for this to be FALSE, but some\n * systems may be broken or old.\n *\n * @length     int     The length of the desired string of bytes. Must be a\n *                     positive integer. PHP will try to cast this\n *                     parameter to a non-null integer to use it.\n * @crypto_strong\n *             mixed   If passed into the function, this will hold a\n *                     boolean value that determines if the algorithm used\n *                     was \"cryptographically strong\", e.g., safe for usage\n *                     with GPG, passwords, etc. TRUE if it did, otherwise\n *                     FALSE\n *\n * @return     mixed   Returns the generated string of bytes on success, or\n *                     FALSE on failure.\n */",
"openssl_cipher_iv_length", T(Variant), S(0), "method", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-cipher-iv-length.php )\n *\n * Returns the required initialisation vector length for the cipher\n * determined by the mode parameter.\n *\n * @method     string  The cipher method.\n *\n * @return     mixed   Returns the iv length of a cipher, or FALSE on\n *                     failure.\n */",
"openssl_encrypt", T(Variant), S(0), "data", T(String), NULL, S(0), NULL, S(0), "method", T(String), NULL, S(0), NULL, S(0), "password", T(String), NULL, S(0), NULL, S(0), "options", T(Int32), "i:0;", S(4), "0", S(0), "iv", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-encrypt.php )\n *\n * Encrypts given data with given method and key, returns a raw or base64\n * encoded string WarningThis function is currently not documented; only\n * its argument list is available.\n *\n * @data       string  The data.\n * @method     string  The cipher method.\n * @password   string  The password.\n * @options    int     Setting to TRUE will return as raw output data,\n *                     otherwise the return value is base64 encoded.\n * @iv         string  The initialisation vector.\n *\n * @return     mixed   Returns the encrypted string on success or FALSE on\n *                     failure.\n */",
"openssl_decrypt", T(Variant), S(0), "data", T(String), NULL, S(0), NULL, S(0), "method", T(String), NULL, S(0), NULL, S(0), "password", T(String), NULL, S(0), NULL, S(0), "options", T(Int32), "i:0;", S(4), "0", S(0), "iv", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-decrypt.php )\n *\n * Takes a raw or base64 encoded string and decrypts it using a given\n * method and key.\n *\n * @data       string  The data.\n * @method     string  The cipher method.\n * @password   string  The password.\n * @options    int     Setting to TRUE will take a raw encoded string,\n *                     otherwise a base64 string is assumed for the data\n *                     parameter.\n * @iv         string  The initialisation vector.\n *\n * @return     mixed   The decrypted string on success or FALSE on failure.\n */",
"openssl_digest", T(Variant), S(0), "data", T(String), NULL, S(0), NULL, S(0), "method", T(String), NULL, S(0), NULL, S(0), "raw_output", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.openssl-digest.php )\n *\n * Computes digest hash value for given data using given method, returns\n * raw or binhex encoded string.\n *\n * @data       string  The data.\n * @method     string  The digest method.\n * @raw_output bool    Setting to TRUE will return as raw output data,\n *                     otherwise the return value is binhex encoded.\n *\n * @return     mixed   Returns the digested hash value on success or FALSE\n *                     on failure.\n */",
"openssl_get_cipher_methods", T(Array), S(0), "aliases", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-get-cipher-methods.php )\n *\n * Gets a list of available cipher methods.\n *\n * @aliases    bool    Set to TRUE if cipher aliases should be included\n *                     within the returned array.\n *\n * @return     vector  An array of available cipher methods.\n */",
"openssl_get_md_methods", T(Array), S(0), "aliases", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.openssl-get-md-methods.php )\n *\n * Gets a list of available digest methods.\n *\n * @aliases    bool    Set to TRUE if digest aliases should be included\n *                     within the returned array.\n *\n * @return     vector  An array of available digest methods.\n */",

#elif EXT_TYPE == 1
"OPENSSL_RAW_DATA", T(Int64),
"OPENSSL_ZERO_PADDING", T(Int64),

#elif EXT_TYPE == 2

#endif
