// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"override_function", T(Boolean), S(0), "name", T(String), NULL, S(0), NULL, S(0), "args", T(String), NULL, S(0), NULL, S(0), "code", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.override-function.php )\n *\n * Overrides built-in functions by replacing them in the symbol table.\n *\n * @name       string  The function to override.\n * @args       string  The function arguments, as a comma separated string.\n *\n *                     Usually you will want to pass this parameter, as\n *                     well as the function_code parameter, as a single\n *                     quote delimited string. The reason for using single\n *                     quoted strings, is to protect the variable names\n *                     from parsing, otherwise, if you use double quotes\n *                     there will be a need to escape the variable names,\n *                     e.g. \\$your_var.\n * @code       string  The new code for the function.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"rename_function", T(Boolean), S(0), "orig_name", T(String), NULL, S(0), NULL, S(0), "new_name", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.rename-function.php )\n *\n * Renames a orig_name to new_name in the global function table. Useful\n * for temporarily overriding built-in functions.\n *\n * @orig_name  string  The original function name.\n * @new_name   string  The new name for the original_name function.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"apd_set_browser_trace", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apd-set-browser-trace.php )\n *\n *\n */", 
"apd_set_pprof_trace", T(String), S(0), "dumpdir", T(String), "N;", S(2), "null", S(0), "frament", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apd-set-pprof-trace.php\n * )\n *\n * Starts debugging to pprof_{process_id} in the dump directory.\n *\n * @dumpdir    string  The directory in which the profile dump file is\n *                     written. If not set, the apd.dumpdir setting from\n *                     the php.ini file is used.\n * @frament    string\n *\n * @return     string  Returns path of the destination file.\n */",
"apd_set_session_trace_socket", T(Boolean), S(0), "ip_or_filename", T(String), NULL, S(0), NULL, S(0), "domain", T(Int32), NULL, S(0), NULL, S(0), "port", T(Int32), NULL, S(0), NULL, S(0), "mask", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.apd-set-session-trace-socket.php )\n *\n * Connects to the specified tcp_server (eg. tcplisten) and sends\n * debugging data to the socket.\n *\n * @ip_or_filename\n *             string  IP or Unix Domain socket (like a file) of the TCP\n *                     server.\n * @domain     int     Can be AF_UNIX for file based sockets or APD_AF_INET\n *                     for standard tcp/ip.\n * @port       int     You can use any port, but higher numbers are better\n *                     as most of the lower numbers may be used by other\n *                     system services.\n * @mask       int     An integer which is formed by adding together the\n *                     XXX_TRACE constants.\n *\n *                     It is not recommended to use MEMORY_TRACE. It is\n *                     very slow and does not appear to be accurate.\n *                     ASSIGNMENT_TRACE is not implemented yet.\n *\n *                     To turn on all functional traces (TIMING,\n *                     FUNCTIONS, ARGS SUMMARY (like strace -c)) use the\n *                     value 99\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"apd_stop_trace", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apd-stop-trace.php )\n *\n *\n */", 
"apd_breakpoint", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apd-breakpoint.php )\n *\n * This can be used to stop the running of your script, and await\n * responses on the connected socket. To step the program, just send enter\n * (a blank line), or enter a php command to be executed.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"apd_continue", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apd-continue.php )\n *\n * Usually sent via the socket to restart the interpreter.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"apd_echo", T(Boolean), S(0), "output", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.apd-echo.php )\n *\n * Usually sent via the socket to request information about the running\n * script.\n *\n * @output     string  The debugged variable.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
