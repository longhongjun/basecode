// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"connection_aborted", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.connection-aborted.php\n * )\n *\n * Checks whether the client disconnected.\n *\n * @return     int     Returns 1 if client disconnected, 0 otherwise.\n */", 
"connection_status", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.connection-status.php )\n *\n * Gets the connection status bitfield.\n *\n * @return     int     Returns the connection status bitfield, which can be\n *                     used against the CONNECTION_XXX constants to\n *                     determine the connection status.\n */", 
"connection_timeout", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.connection-timeout.php\n * )\n *\n * Determines whether the script timed out.\n *\n * @return     int     Returns 1 if the script timed out, 0 otherwise.\n */", 
"constant", T(Variant), S(0), "name", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.constant.php )\n *\n *\n * @name       string  The constant name.\n *\n * @return     mixed   Returns the value of the constant, or NULL if the\n *                     constant is not defined.\n */", 
"define", T(Boolean), S(0), "name", T(String), NULL, S(0), NULL, S(0), "value", T(Variant), NULL, S(0), NULL, S(0), "case_insensitive", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.define.php )\n *\n * Defines a named constant at runtime.\n *\n * @name       string  The name of the constant.\n * @value      mixed   The value of the constant; only scalar and null\n *                     values are allowed. Scalar values are integer,\n *                     float, string or boolean values. It is possible to\n *                     define resource constants, however it is not\n *                     recommended and may cause unpredictable behavior.\n * @case_insensitive\n *             bool    If set to TRUE, the constant will be defined\n *                     case-insensitive. The default behavior is\n *                     case-sensitive; i.e. CONSTANT and Constant represent\n *                     different values.\n *\n *                     Case-insensitive constants are stored as\n *                     lower-case.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"defined", T(Boolean), S(0), "name", T(String), NULL, S(0), NULL, S(0), "autoload", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.defined.php )\n *\n * Checks whether the given constant exists and is defined.\n *\n * If you want to see if a variable exists, use isset() as defined() only\n * applies to constants. If you want to see if a function exists, use\n * function_exists().\n *\n * @name       string  The constant name.\n * @autoload   bool    Whether to try to autoload.\n *\n * @return     bool    Returns TRUE if the named constant given by name has\n *                     been defined, FALSE otherwise.\n */", 
"die", T(Variant), S(0), "status", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.die.php )\n *\n *\n * @status     mixed\n *\n * @return     mixed\n */", 
"exit", T(Variant), S(0), "status", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.exit.php )\n *\n * Terminates execution of the script. Shutdown functions and object\n * destructors will always be executed even if exit() is called.\n *\n * @status     mixed   If status is a string, this function prints the\n *                     status just before exiting.\n *\n *                     If status is an integer, that value will be used as\n *                     the exit status and not printed. Exit statuses\n *                     should be in the range 0 to 254, the exit status 255\n *                     is reserved by PHP and shall not be used. The status\n *                     0 is used to terminate the program successfully. PHP\n *                     >= 4.2.0 does NOT print the status if it is an\n *                     integer.\n *\n * @return     mixed   No value is returned.\n */", 
"eval", T(Variant), S(0), "code_str", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.eval.php )\n *\n * Evaluates the string given in code_str as PHP code. Among other things,\n * this can be useful for storing code in a database text field for later\n * execution.\n *\n * There are some factors to keep in mind when using eval(). Remember that\n * the string passed must be valid PHP code, including things like\n * terminating statements with a semicolon so the parser doesn't die on the\n * line after the eval(), and properly escaping things in code_str. To mix\n * HTML output and PHP code you can use a closing PHP tag to leave PHP\n * mode.\n *\n * Also remember that variables given values under eval() will retain\n * these values in the main script afterwards.\n *\n * @code_str   string  The code string to be evaluated. code_str does not\n *                     have to contain PHP Opening tags.\n *\n *                     A return statement will immediately terminate the\n *                     evaluation of the string .\n *\n * @return     mixed   eval() returns NULL unless return is called in the\n *                     evaluated code, in which case the value passed to\n *                     return is returned. If there is a parse error in the\n *                     evaluated code, eval() returns FALSE and execution\n *                     of the following code continues normally. It is not\n *                     possible to catch a parse error in eval() using\n *                     set_error_handler().\n */", 
"get_browser", T(Variant), S(0), "user_agent", T(String), "N;", S(2), "null", S(0), "return_array", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.get-browser.php )\n *\n * Attempts to determine the capabilities of the user's browser, by\n * looking up the browser's information in the browscap.ini file.\n *\n * @user_agent string  The User Agent to be analyzed. By default, the value\n *                     of HTTP User-Agent header is used; however, you can\n *                     alter this (i.e., look up another browser's info) by\n *                     passing this parameter.\n *\n *                     You can bypass this parameter with a NULL value.\n * @return_array\n *             bool    If set to TRUE, this function will return an array\n *                     instead of an object.\n *\n * @return     mixed   The information is returned in an object or an array\n *                     which will contain various data elements\n *                     representing, for instance, the browser's major and\n *                     minor version numbers and ID string; TRUE/FALSE\n *                     values for features such as frames, JavaScript, and\n *                     cookies; and so forth.\n *\n *                     The cookies value simply means that the browser\n *                     itself is capable of accepting cookies and does not\n *                     mean the user has enabled the browser to accept\n *                     cookies or not. The only way to test if cookies are\n *                     accepted is to set one with setcookie(), reload, and\n *                     check for the value.\n */", 
"__halt_compiler", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.halt-compiler.php )\n *\n *\n */", 
"highlight_file", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "ret", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.highlight-file.php )\n *\n * Prints out or returns a syntax highlighted version of the code\n * contained in filename using the colors defined in the built-in syntax\n * highlighter for PHP.\n *\n * Many servers are configured to automatically highlight files with a\n * phps extension. For example, example.phps when viewed will show the\n * syntax highlighted source of the file. To enable this, add this line to\n * the httpd.conf: AddType application/x-httpd-php-source .phps\n *\n * @filename   string  Path to the PHP file to be highlighted.\n * @ret        bool    Set this parameter to TRUE to make this function\n *                     return the highlighted code.\n *\n * @return     mixed   If return is set to TRUE, returns the highlighted\n *                     code as a string instead of printing it out.\n *                     Otherwise, it will return TRUE on success, FALSE on\n *                     failure.\n */", 
"show_source", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "ret", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.show-source.php )\n *\n *\n * @filename   string\n * @ret        bool\n *\n * @return     mixed\n */", 
"highlight_string", T(Variant), S(0), "str", T(String), NULL, S(0), NULL, S(0), "ret", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.highlight-string.php )\n *\n *\n * @str        string  The PHP code to be highlighted. This should include\n *                     the opening tag.\n * @ret        bool    Set this parameter to TRUE to make this function\n *                     return the highlighted code.\n *\n * @return     mixed   If return is set to TRUE, returns the highlighted\n *                     code as a string instead of printing it out.\n *                     Otherwise, it will return TRUE on success, FALSE on\n *                     failure.\n */", 
"ignore_user_abort", T(Int64), S(0), "setting", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.ignore-user-abort.php )\n *\n * Sets whether a client disconnect should cause a script to be aborted.\n *\n * When running PHP as a command line script, and the script's tty goes\n * away without the script being terminated then the script will die the\n * next time it tries to write anything, unless value is set to TRUE\n *\n * @setting    bool    If set, this function will set the ignore_user_abort\n *                     ini setting to the given value. If not, this\n *                     function will only return the previous setting\n *                     without changing it.\n *\n * @return     int     Returns the previous setting, as an integer.\n */", 
"pack", T(Variant), S(0), "format", T(String), NULL, S(0), NULL, S(0), NULL, S(147456), "/**\n * ( excerpt from http://php.net/manual/en/function.pack.php )\n *\n * Pack given arguments into binary string according to format.\n *\n * The idea for this function was taken from Perl and all formatting codes\n * work the same as in Perl. However, there are some formatting codes that\n * are missing such as Perl's \"u\" format code.\n *\n * Note that the distinction between signed and unsigned values only\n * affects the function unpack(), where as function pack() gives the same\n * result for signed and unsigned format codes.\n *\n * Also note that PHP internally stores integer values as signed values of\n * a machine-dependent size. If you give it an unsigned integer value too\n * large to be stored that way it is converted to a float which often\n * yields an undesired result.\n *\n * @format     string  The format string consists of format codes followed\n *                     by an optional repeater argument. The repeater\n *                     argument can be either an integer value or * for\n *                     repeating to the end of the input data. For a, A, h,\n *                     H the repeat count specifies how many characters of\n *                     one data argument are taken, for @ it is the\n *                     absolute position where to put the next data, for\n *                     everything else the repeat count specifies how many\n *                     data arguments are consumed and packed into the\n *                     resulting binary string.\n *\n *                     Currently implemented formats are: pack() format\n *                     characters Code Description a NUL-padded string A\n *                     SPACE-padded string h Hex string, low nibble first H\n *                     Hex string, high nibble first csigned char C\n *                     unsigned char s signed short (always 16 bit, machine\n *                     byte order) S unsigned short (always 16 bit, machine\n *                     byte order) n unsigned short (always 16 bit, big\n *                     endian byte order) v unsigned short (always 16 bit,\n *                     little endian byte order) i signed integer (machine\n *                     dependent size and byte order) I unsigned integer\n *                     (machine dependent size and byte order) l signed\n *                     long (always 32 bit, machine byte order) L unsigned\n *                     long (always 32 bit, machine byte order) N unsigned\n *                     long (always 32 bit, big endian byte order) V\n *                     unsigned long (always 32 bit, little endian byte\n *                     order) f float (machine dependent size and\n *                     representation) d double (machine dependent size and\n *                     representation) x NUL byte X Back up one byte @\n *                     NUL-fill to absolute position\n *\n * @return     mixed   Returns a binary string containing data.\n */", 
"php_check_syntax", T(Boolean), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "error_message", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.php-check-syntax.php )\n *\n * Performs a syntax (lint) check on the specified filename testing for\n * scripting errors.\n *\n * This is similar to using php -l from the commandline except that this\n * function will execute (but not output) the checked filename.\n *\n * For example, if a function is defined in filename, this defined\n * function will be available to the file that executed php_check_syntax(),\n * but output from filename will be suppressed.\n *\n * For technical reasons, this function is deprecated and removed from\n * PHP. Instead, use php -l somefile.php from the commandline.\n *\n * @filename   string  The name of the file being checked.\n * @error_message\n *             mixed   If the error_message parameter is used, it will\n *                     contain the error message generated by the syntax\n *                     check. error_message is passed by reference.\n *\n * @return     bool    Returns TRUE if the lint check passed, and FALSE if\n *                     the link check failed or if filename cannot be\n *                     opened.\n */", 
"php_strip_whitespace", T(String), S(0), "filename", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.php-strip-whitespace.php )\n *\n * Returns the PHP source code in filename with PHP comments and\n * whitespace removed. This may be useful for determining the amount of\n * actual code in your scripts compared with the amount of comments. This\n * is similar to using php -w from the commandline.\n *\n * @filename   string  Path to the PHP file.\n *\n * @return     string  The stripped source code will be returned on\n *                     success, or an empty string on failure.\n *\n *                     This function works as described as of PHP 5.0.1.\n *                     Before this it would only return an empty string.\n *                     For more information on this bug and its prior\n *                     behavior, see bug report \273 #29606.\n */", 
"sleep", T(Int64), S(0), "seconds", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.sleep.php )\n *\n *\n * @seconds    int     Halt time in seconds.\n *\n * @return     int     Returns zero on success, or FALSE on errors. If the\n *                     call was interrupted by a signal, sleep() returns\n *                     the number of seconds left to sleep.\n */", 
"usleep", T(Void), S(0), "micro_seconds", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.usleep.php )\n *\n * Delays program execution for the given number of micro seconds.\n *\n * @micro_seconds\n *             int     Halt time in micro seconds. A micro second is one\n *                     millionth of a second.\n *\n * @return     mixed   No value is returned.\n */", 
"time_nanosleep", T(Variant), S(0), "seconds", T(Int32), NULL, S(0), NULL, S(0), "nanoseconds", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.time-nanosleep.php )\n *\n * Delays program execution for the given number of seconds and\n * nanoseconds.\n *\n * @seconds    int     Must be a positive integer.\n * @nanoseconds\n *             int     Must be a positive integer less than 1 billion.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n *\n *                     If the delay was interrupted by a signal, an\n *                     associative array will be returned with the\n *                     components: seconds - number of seconds remaining in\n *                     the delay nanoseconds - number of nanoseconds\n *                     remaining in the delay\n */", 
"time_sleep_until", T(Boolean), S(0), "timestamp", T(Double), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.time-sleep-until.php )\n *\n * Makes the script sleep until the specified timestamp.\n *\n * @timestamp  float   The timestamp when the script should wake.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"uniqid", T(String), S(0), "prefix", T(String), "N;", S(2), "null", S(0), "more_entropy", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.uniqid.php )\n *\n * Gets a prefixed unique identifier based on the current time in\n * microseconds.\n *\n * @prefix     string  Can be useful, for instance, if you generate\n *                     identifiers simultaneously on several hosts that\n *                     might happen to generate the identifier at the same\n *                     microsecond.\n *\n *                     With an empty prefix, the returned string will be\n *                     13 characters long. If more_entropy is TRUE, it will\n *                     be 23 characters.\n * @more_entropy\n *             bool    If set to TRUE, uniqid() will add additional entropy\n *                     (using the combined linear congruential generator)\n *                     at the end of the return value, which should make\n *                     the results more unique.\n *\n * @return     string  Returns the unique identifier, as a string.\n */", 
"unpack", T(Variant), S(0), "format", T(String), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.unpack.php )\n *\n * Unpacks from a binary string into an array according to the given\n * format.\n *\n * unpack() works slightly different from Perl as the unpacked data is\n * stored in an associative array. To accomplish this you have to name the\n * different format codes and separate them by a slash /.\n *\n * @format     string  See pack() for an explanation of the format codes.\n * @data       string  The packed data.\n *\n * @return     mixed   Returns an associative array containing unpacked\n *                     elements of binary string.\n */", 
"sys_getloadavg", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.sys-getloadavg.php )\n *\n * Returns three samples representing the average system load (the number\n * of processes in the system run queue) over the last 1, 5 and 15 minutes,\n * respectively.\n *\n * @return     map     Returns an array with three samples (last 1, 5 and\n *                     15 minutes).\n */", 
"token_get_all", T(Array), S(0), "source", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.token-get-all.php )\n *\n * token_get_all() parses the given source string into PHP language tokens\n * using the Zend engine's lexical scanner.\n *\n * For a list of parser tokens, see List of Parser Tokens, or use\n * token_name() to translate a token value into its string representation.\n *\n * @source     string  The PHP source to parse.\n *\n * @return     map     An array of token identifiers. Each individual token\n *                     identifier is either a single character (i.e.: ;, .,\n *                     >, !, etc...), or a three element array containing\n *                     the token index in element 0, the string content of\n *                     the original token in element 1 and the line number\n *                     in element 2.\n */", 
"token_name", T(String), S(0), "token", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.token-name.php )\n *\n * token_name() gets the symbolic name for a PHP token value.\n *\n * @token      int     The token value.\n *\n * @return     string  The symbolic name of the given token. The returned\n *                     name returned matches the name of the matching token\n *                     constant.\n */", 
"hphp_process_abort", T(Variant), S(0), "magic", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hphp-process-abort.php\n * )\n *\n * Causes the process to die immediately in an undefined way.\n *\n * @magic      mixed   You shouldn't be calling this function if you don't\n *                     know the magic value.\n *\n * @return     mixed   No value is returned.\n */", 
"hphp_to_string", T(String), S(0), "v", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hphp-to-string.php )\n *\n * Casts a given value to a string.\n *\n * @v          mixed   The value being casted to a string.\n *\n * @return     string  The result of the string cast.\n */", 

#elif EXT_TYPE == 1
"INF", T(Double),
"NAN", T(Double),

#elif EXT_TYPE == 2

#endif
