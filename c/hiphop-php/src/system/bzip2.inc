// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"bzclose", T(Variant), S(0), "bz", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bzclose.php )\n *\n * Closes the given bzip2 file pointer.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"bzopen", T(Variant), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "mode", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bzopen.php )\n *\n * bzopen() opens a bzip2 (.bz2) file for reading or writing.\n *\n * @filename   string  The name of the file to open.\n * @mode       string  Similar to the fopen() function, only 'r' (read) and\n *                     'w' (write) are supported. Everything else will\n *                     cause bzopen to return FALSE.\n *\n * @return     mixed   If the open fails, bzopen() returns FALSE, otherwise\n *                     it returns a pointer to the newly opened file.\n */",
"bzread", T(Variant), S(0), "bz", T(Object), NULL, S(0), NULL, S(0), "length", T(Int32), "i:1024;", S(7), "1024", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bzread.php )\n *\n * bzread() reads from the given bzip2 file pointer.\n *\n * Reading stops when length (uncompressed) bytes have been read or EOF is\n * reached, whichever comes first.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n * @length     int     If not specified, bzread() will read 1024\n *                     (uncompressed) bytes at a time.\n *\n * @return     mixed   Returns the uncompressed data, or FALSE on error.\n */",
"bzwrite", T(Variant), S(0), "bz", T(Object), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "length", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bzwrite.php )\n *\n * bzwrite() writes a string into the given bzip2 file stream.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n * @data       string  The written data.\n * @length     int     If supplied, writing will stop after length\n *                     (uncompressed) bytes have been written or the end of\n *                     data is reached, whichever comes first.\n *\n * @return     mixed   Returns the number of bytes written, or FALSE on\n *                     error.\n */",
"bzflush", T(Variant), S(0), "bz", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bzflush.php )\n *\n * Forces a write of all buffered bzip2 data for the file pointer bz.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"bzerrstr", T(String), S(0), "bz", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bzerrstr.php )\n *\n * Gets the error string of any bzip2 error returned by the given file\n * pointer.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n *\n * @return     string  Returns a string containing the error message.\n */",
"bzerror", T(Variant), S(0), "bz", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bzerror.php )\n *\n * Returns the error number and error string of any bzip2 error returned\n * by the given file pointer.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n *\n * @return     mixed   Returns an associative array, with the error code in\n *                     the errno entry, and the error message in the errstr\n *                     entry.\n */",
"bzerrno", T(Int64), S(0), "bz", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bzerrno.php )\n *\n * Returns the error number of any bzip2 error returned by the given file\n * pointer.\n *\n * @bz         resource\n *                     The file pointer. It must be valid and must point to\n *                     a file successfully opened by bzopen().\n *\n * @return     int     Returns the error number as an integer.\n */",
"bzcompress", T(Variant), S(0), "source", T(String), NULL, S(0), NULL, S(0), "blocksize", T(Int32), "i:4;", S(4), "4", S(0), "workfactor", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bzcompress.php )\n *\n * bzcompress() compresses the given string and returns it as bzip2\n * encoded data.\n *\n * @source     string  The string to compress.\n * @blocksize  int     Specifies the blocksize used during compression and\n *                     should be a number from 1 to 9 with 9 giving the\n *                     best compression, but using more resources to do so.\n * @workfactor int     Controls how the compression phase behaves when\n *                     presented with worst case, highly repetitive, input\n *                     data. The value can be between 0 and 250 with 0\n *                     being a special case.\n *\n *                     Regardless of the workfactor, the generated output\n *                     is the same.\n *\n * @return     mixed   The compressed string or number of error in case of\n *                     error.\n */",
"bzdecompress", T(Variant), S(0), "source", T(String), NULL, S(0), NULL, S(0), "small", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.bzdecompress.php )\n *\n * bzdecompress() decompresses the given string containing bzip2 encoded\n * data.\n *\n * @source     string  The string to decompress.\n * @small      int     If TRUE, an alternative decompression algorithm will\n *                     be used which uses less memory (the maximum memory\n *                     requirement drops to around 2300K) but works at\n *                     roughly half the speed.\n *\n *                     See the \273 bzip2 documentation for more information\n *                     about this feature.\n *\n * @return     mixed   The decompressed string or number of error in case\n *                     of error.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
