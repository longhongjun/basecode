// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"hash", T(Variant), S(0), "algo", T(String), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "raw_output", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hash.php )\n *\n *\n * @algo       string  Name of selected hashing algorithm (i.e. \"md5\",\n *                     \"sha256\", \"haval160,4\", etc..)\n * @data       string  Message to be hashed.\n * @raw_output bool    When set to TRUE, outputs raw binary data. FALSE\n *                     outputs lowercase hexits.\n *\n * @return     mixed   Returns a string containing the calculated message\n *                     digest as lowercase hexits unless raw_output is set\n *                     to true in which case the raw binary representation\n *                     of the message digest is returned.\n */",
"hash_algos", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hash-algos.php )\n *\n *\n * @return     vector  Returns a numerically indexed array containing the\n *                     list of supported hashing algorithms.\n */", 
"hash_init", T(Variant), S(0), "algo", T(String), NULL, S(0), NULL, S(0), "options", T(Int32), "i:0;", S(4), "0", S(0), "key", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hash-init.php )\n *\n *\n * @algo       string  Name of selected hashing algorithm (i.e. \"md5\",\n *                     \"sha256\", \"haval160,4\", etc..)\n * @options    int     Optional settings for hash generation, currently\n *                     supports only one option: HASH_HMAC. When specified,\n *                     the key must be specified.\n * @key        string  When HASH_HMAC is specified for options, a shared\n *                     secret key to be used with the HMAC hashing method\n *                     must be supplied in this parameter.\n *\n * @return     mixed   Returns a Hashing Context resource for use with\n *                     hash_update(), hash_update_stream(),\n *                     hash_update_file(), and hash_final().\n */",
"hash_file", T(Variant), S(0), "algo", T(String), NULL, S(0), NULL, S(0), "filename", T(String), NULL, S(0), NULL, S(0), "raw_output", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hash-file.php )\n *\n *\n * @algo       string  Name of selected hashing algorithm (i.e. \"md5\",\n *                     \"sha256\", \"haval160,4\", etc..)\n * @filename   string  URL describing location of file to be hashed;\n *                     Supports fopen wrappers.\n * @raw_output bool    When set to TRUE, outputs raw binary data. FALSE\n *                     outputs lowercase hexits.\n *\n * @return     mixed   Returns a string containing the calculated message\n *                     digest as lowercase hexits unless raw_output is set\n *                     to true in which case the raw binary representation\n *                     of the message digest is returned.\n */",
"hash_final", T(String), S(0), "context", T(Object), NULL, S(0), NULL, S(0), "raw_output", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hash-final.php )\n *\n *\n * @context    resource\n *                     Hashing context returned by hash_init().\n * @raw_output bool    When set to TRUE, outputs raw binary data. FALSE\n *                     outputs lowercase hexits.\n *\n * @return     string  Returns a string containing the calculated message\n *                     digest as lowercase hexits unless raw_output is set\n *                     to true in which case the raw binary representation\n *                     of the message digest is returned.\n */",
"hash_hmac_file", T(Variant), S(0), "algo", T(String), NULL, S(0), NULL, S(0), "filename", T(String), NULL, S(0), NULL, S(0), "key", T(String), NULL, S(0), NULL, S(0), "raw_output", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hash-hmac-file.php )\n *\n *\n * @algo       string  Name of selected hashing algorithm (i.e. \"md5\",\n *                     \"sha256\", \"haval160,4\", etc..) See hash_algos() for\n *                     a list of supported algorithms.\n * @filename   string  URL describing location of file to be hashed;\n *                     Supports fopen wrappers.\n * @key        string  Shared secret key used for generating the HMAC\n *                     variant of the message digest.\n * @raw_output bool    When set to TRUE, outputs raw binary data. FALSE\n *                     outputs lowercase hexits.\n *\n * @return     mixed   Returns a string containing the calculated message\n *                     digest as lowercase hexits unless raw_output is set\n *                     to true in which case the raw binary representation\n *                     of the message digest is returned.\n */",
"hash_hmac", T(Variant), S(0), "algo", T(String), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "key", T(String), NULL, S(0), NULL, S(0), "raw_output", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hash-hmac.php )\n *\n *\n * @algo       string  Name of selected hashing algorithm (i.e. \"md5\",\n *                     \"sha256\", \"haval160,4\", etc..) See hash_algos() for\n *                     a list of supported algorithms.\n * @data       string  Message to be hashed.\n * @key        string  Shared secret key used for generating the HMAC\n *                     variant of the message digest.\n * @raw_output bool    When set to TRUE, outputs raw binary data. FALSE\n *                     outputs lowercase hexits.\n *\n * @return     mixed   Returns a string containing the calculated message\n *                     digest as lowercase hexits unless raw_output is set\n *                     to true in which case the raw binary representation\n *                     of the message digest is returned.\n */",
"hash_update_file", T(Boolean), S(0), "init_context", T(Object), NULL, S(0), NULL, S(0), "filename", T(String), NULL, S(0), NULL, S(0), "stream_context", T(Object), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hash-update-file.php )\n *\n *\n * @init_context\n *             resource\n *                     Hashing context returned by hash_init().\n * @filename   string  URL describing location of file to be hashed;\n *                     Supports fopen wrappers.\n * @stream_context\n *             resource\n *                     Stream context as returned by\n *                     stream_context_create().\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"hash_update_stream", T(Int64), S(0), "context", T(Object), NULL, S(0), NULL, S(0), "handle", T(Object), NULL, S(0), NULL, S(0), "length", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hash-update-stream.php\n * )\n *\n *\n * @context    resource\n *                     Hashing context returned by hash_init().\n * @handle     resource\n *                     Open file handle as returned by any stream creation\n *                     function.\n * @length     int     Maximum number of characters to copy from handle\n *                     into the hashing context.\n *\n * @return     int     Actual number of bytes added to the hashing context\n *                     from handle.\n */",
"hash_update", T(Boolean), S(0), "context", T(Object), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hash-update.php )\n *\n *\n * @context    resource\n *                     Hashing context returned by hash_init().\n * @data       string  Message to be included in the hash digest.\n *\n * @return     bool    Returns TRUE.\n */",
"furchash_hphp_ext", T(Int64), S(0), "key", T(String), NULL, S(0), NULL, S(0), "len", T(Int32), NULL, S(0), NULL, S(0), "nPart", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.furchash-hphp-ext.php )\n *\n *\n * @key        string  The key to hash\n * @len        int     Number of bytes to use from the hash\n * @nPart      int     The number of buckets\n *\n * @return     int     Returns a number in the range of 0-(nPart-1)\n */",
"furchash_hphp_ext_supported", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.furchash-hphp-ext-supported.php )\n *\n *\n * @return     bool    Returns whether furchash extension is supported\n */", 
"hphp_murmurhash", T(Int64), S(0), "key", T(String), NULL, S(0), NULL, S(0), "len", T(Int32), NULL, S(0), NULL, S(0), "seed", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.hphp-murmurhash.php )\n *\n *\n * @key        string  The key to hash\n * @len        int     Number of bytes to use from the hash\n * @seed       int     The seed to use for hashing\n *\n * @return     int     Returns the Int64 hash of the first len input\n *                     characters\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
