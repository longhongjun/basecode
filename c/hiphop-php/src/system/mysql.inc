// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"mysql_connect", T(Variant), S(0), "server", T(String), "N;", S(2), "null", S(0), "username", T(String), "N;", S(2), "null", S(0), "password", T(String), "N;", S(2), "null", S(0), "new_link", T(Boolean), "b:0;", S(4), "false", S(0), "client_flags", T(Int32), "i:0;", S(4), "0", S(0), "connect_timeout_ms", T(Int32), "i:-1;", S(5), "-1", S(0), "query_timeout_ms", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-connect.php )\n *\n * Opens or reuses a connection to a MySQL server.\n *\n * @server     string  The MySQL server. It can also include a port number.\n *                     e.g. \"hostname:port\" or a path to a local socket\n *                     e.g. \":/path/to/socket\" for the localhost.\n *\n *                     If the PHP directive mysql.default_host is\n *                     undefined (default), then the default value is\n *                     'localhost:3306'. In SQL safe mode, this parameter\n *                     is ignored and value 'localhost:3306' is always\n *                     used.\n * @username   string  The username. Default value is defined by\n *                     mysql.default_user. In SQL safe mode, this parameter\n *                     is ignored and the name of the user that owns the\n *                     server process is used.\n * @password   string  The password. Default value is defined by\n *                     mysql.default_password. In SQL safe mode, this\n *                     parameter is ignored and empty password is used.\n * @new_link   bool    If a second call is made to mysql_connect() with the\n *                     same arguments, no new link will be established, but\n *                     instead, the link identifier of the already opened\n *                     link will be returned. The new_link parameter\n *                     modifies this behavior and makes mysql_connect()\n *                     always open a new link, even if mysql_connect() was\n *                     called before with the same parameters. In SQL safe\n *                     mode, this parameter is ignored.\n * @client_flags\n *             int     The client_flags parameter can be a combination of\n *                     the following constants: 128 (enable LOAD DATA LOCAL\n *                     handling), MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS,\n *                     MYSQL_CLIENT_IGNORE_SPACE or\n *                     MYSQL_CLIENT_INTERACTIVE. Read the section about\n *                     MySQL client constants for further information. In\n *                     SQL safe mode, this parameter is ignored.\n * @connect_timeout_ms\n *             int     (HipHop specific) How many milli-seconds to wait for\n *                     connection.\n * @query_timeout_ms\n *             int     (HipHop specific) How many milli-seconds to wait for\n *                     query.\n *\n * @return     mixed   Returns a MySQL link identifier on success or FALSE\n *                     on failure.\n */",
"mysql_pconnect", T(Variant), S(0), "server", T(String), "N;", S(2), "null", S(0), "username", T(String), "N;", S(2), "null", S(0), "password", T(String), "N;", S(2), "null", S(0), "client_flags", T(Int32), "i:0;", S(4), "0", S(0), "connect_timeout_ms", T(Int32), "i:-1;", S(5), "-1", S(0), "query_timeout_ms", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-pconnect.php )\n *\n * Establishes a persistent connection to a MySQL server.\n *\n * mysql_pconnect() acts very much like mysql_connect() with two major\n * differences.\n *\n * First, when connecting, the function would first try to find a\n * (persistent) link that's already open with the same host, username and\n * password. If one is found, an identifier for it will be returned instead\n * of opening a new connection.\n *\n * Second, the connection to the SQL server will not be closed when the\n * execution of the script ends. Instead, the link will remain open for\n * future use (mysql_close() will not close links established by\n * mysql_pconnect()).\n *\n * This type of link is therefore called 'persistent'.\n *\n * @server     string  The MySQL server. It can also include a port number.\n *                     e.g. \"hostname:port\" or a path to a local socket\n *                     e.g. \":/path/to/socket\" for the localhost.\n *\n *                     If the PHP directive mysql.default_host is\n *                     undefined (default), then the default value is\n *                     'localhost:3306'\n * @username   string  The username. Default value is the name of the user\n *                     that owns the server process.\n * @password   string  The password. Default value is an empty password.\n * @client_flags\n *             int     The client_flags parameter can be a combination of\n *                     the following constants: 128 (enable LOAD DATA LOCAL\n *                     handling), MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS,\n *                     MYSQL_CLIENT_IGNORE_SPACE or\n *                     MYSQL_CLIENT_INTERACTIVE.\n * @connect_timeout_ms\n *             int     (HipHop specific) How many milli-seconds to wait for\n *                     connection.\n * @query_timeout_ms\n *             int     (HipHop specific) How many milli-seconds to wait for\n *                     query.\n *\n * @return     mixed   Returns a MySQL persistent link identifier on\n *                     success, or FALSE on failure.\n */",
"mysql_connect_with_db", T(Variant), S(0), "server", T(String), "N;", S(2), "null", S(0), "username", T(String), "N;", S(2), "null", S(0), "password", T(String), "N;", S(2), "null", S(0), "database", T(String), "N;", S(2), "null", S(0), "new_link", T(Boolean), "b:0;", S(4), "false", S(0), "client_flags", T(Int32), "i:0;", S(4), "0", S(0), "connect_timeout_ms", T(Int32), "i:-1;", S(5), "-1", S(0), "query_timeout_ms", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-connect-with-db.php )\n *\n *\n * @server     string\n * @username   string\n * @password   string\n * @database   string\n * @new_link   bool\n * @client_flags\n *             int\n * @connect_timeout_ms\n *             int\n * @query_timeout_ms\n *             int\n *\n * @return     mixed\n */",
"mysql_pconnect_with_db", T(Variant), S(0), "server", T(String), "N;", S(2), "null", S(0), "username", T(String), "N;", S(2), "null", S(0), "password", T(String), "N;", S(2), "null", S(0), "database", T(String), "N;", S(2), "null", S(0), "client_flags", T(Int32), "i:0;", S(4), "0", S(0), "connect_timeout_ms", T(Int32), "i:-1;", S(5), "-1", S(0), "query_timeout_ms", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-pconnect-with-db.php )\n *\n *\n * @server     string\n * @username   string\n * @password   string\n * @database   string\n * @client_flags\n *             int\n * @connect_timeout_ms\n *             int\n * @query_timeout_ms\n *             int\n *\n * @return     mixed\n */",
"mysql_set_charset", T(Variant), S(0), "charset", T(String), NULL, S(0), NULL, S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-set-charset.php )\n *\n * Sets the default character set for the current connection.\n *\n * @charset    string  A valid character set name.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"mysql_ping", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-ping.php )\n *\n * Checks whether or not the connection to the server is working. If it\n * has gone down, an automatic reconnection is attempted. This function can\n * be used by scripts that remain idle for a long while, to check whether\n * or not the server has closed the connection and reconnect if necessary.\n *\n * Since MySQL 5.0.13, automatic reconnection feature is disabled.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns TRUE if the connection to the server MySQL\n *                     server is working, otherwise FALSE.\n */",
"mysql_escape_string", T(String), S(0), "unescaped_string", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-escape-string.php\n * )\n *\n * This function will escape the unescaped_string, so that it is safe to\n * place it in a mysql_query(). This function is deprecated.\n *\n * This function is identical to mysql_real_escape_string() except that\n * mysql_real_escape_string() takes a connection handler and escapes the\n * string according to the current character set. mysql_escape_string()\n * does not take a connection argument and does not respect the current\n * charset setting. WarningThis function has been DEPRECATED as of PHP\n * 5.3.0. Relying on this feature is highly discouraged.\n *\n * @unescaped_string\n *             string  The string that is to be escaped.\n *\n * @return     string  Returns the escaped string.\n */",
"mysql_real_escape_string", T(Variant), S(0), "unescaped_string", T(String), NULL, S(0), NULL, S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-real-escape-string.php )\n *\n * Escapes special characters in the unescaped_string, taking into account\n * the current character set of the connection so that it is safe to place\n * it in a mysql_query(). If binary data is to be inserted, this function\n * must be used.\n *\n * mysql_real_escape_string() calls MySQL's library function\n * mysql_real_escape_string, which prepends backslashes to the following\n * characters: \\x00, \\n, \\r, \\, ', \" and \\x1a.\n *\n * This function must always (with few exceptions) be used to make data\n * safe before sending a query to MySQL.\n *\n * @unescaped_string\n *             string  The string that is to be escaped.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the escaped string, or FALSE on error.\n */",
"mysql_client_encoding", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-client-encoding.php )\n *\n * Retrieves the character_set variable from MySQL.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the default character set name for the\n *                     current connection.\n */",
"mysql_close", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-close.php )\n *\n * mysql_close() closes the non-persistent connection to the MySQL server\n * that's associated with the specified link identifier. If link_identifier\n * isn't specified, the last opened link is used.\n *\n * Using mysql_close() isn't usually necessary, as non-persistent open\n * links are automatically closed at the end of the script's execution. See\n * also freeing resources.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"mysql_errno", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-errno.php )\n *\n * Returns the error number from the last MySQL function.\n *\n * Errors coming back from the MySQL database backend no longer issue\n * warnings. Instead, use mysql_errno() to retrieve the error code. Note\n * that this function only returns the error code from the most recently\n * executed MySQL function (not including mysql_error() and mysql_errno()),\n * so if you want to use it, make sure you check the value before calling\n * another MySQL function.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the error number from the last MySQL\n *                     function, or 0 (zero) if no error occurred.\n */",
"mysql_error", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-error.php )\n *\n * Returns the error text from the last MySQL function. Errors coming back\n * from the MySQL database backend no longer issue warnings. Instead, use\n * mysql_error() to retrieve the error text. Note that this function only\n * returns the error text from the most recently executed MySQL function\n * (not including mysql_error() and mysql_errno()), so if you want to use\n * it, make sure you check the value before calling another MySQL function.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the error text from the last MySQL function,\n *                     or '' (empty string) if no error occurred.\n */",
"mysql_warning_count", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-warning-count.php\n * )\n *\n * Returns the number of errors generated during execution of the previous\n * SQL statement. To retrieve warning messages you can use the SQL command\n * SHOW WARNINGS [limit row_count].\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the number of warnings from the last MySQL\n *                     function, or 0 (zero) if no warnings occurred.\n */",
"mysql_get_client_info", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-get-client-info.php )\n *\n * mysql_get_client_info() returns a string that represents the client\n * library version.\n *\n * @return     string  The MySQL client version.\n */", 
"mysql_get_host_info", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-get-host-info.php\n * )\n *\n * Describes the type of connection in use for the connection, including\n * the server host name.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns a string describing the type of MySQL\n *                     connection in use for the connection or FALSE on\n *                     failure.\n */",
"mysql_get_proto_info", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-get-proto-info.php )\n *\n * Retrieves the MySQL protocol.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the MySQL protocol on success or FALSE on\n *                     failure.\n */",
"mysql_get_server_info", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-get-server-info.php )\n *\n * Retrieves the MySQL server version.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the MySQL server version on success or FALSE\n *                     on failure.\n */",
"mysql_info", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-info.php )\n *\n * Returns detailed information about the last query.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns information about the statement on success,\n *                     or FALSE on failure. See the example below for which\n *                     statements provide information, and what the\n *                     returned value may look like. Statements that are\n *                     not listed will return FALSE.\n */",
"mysql_insert_id", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-insert-id.php )\n *\n * Retrieves the ID generated for an AUTO_INCREMENT column by the previous\n * query (usually INSERT).\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   The ID generated for an AUTO_INCREMENT column by the\n *                     previous query on success, 0 if the previous query\n *                     does not generate an AUTO_INCREMENT value, or FALSE\n *                     if no MySQL connection was established.\n */",
"mysql_stat", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-stat.php )\n *\n * mysql_stat() returns the current server status.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns a string with the status for uptime,\n *                     threads, queries, open tables, flush tables and\n *                     queries per second. For a complete list of other\n *                     status variables, you have to use the SHOW STATUS\n *                     SQL command. If link_identifier is invalid, NULL is\n *                     returned.\n */",
"mysql_thread_id", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-thread-id.php )\n *\n * Retrieves the current thread ID. If the connection is lost, and a\n * reconnect with mysql_ping() is executed, the thread ID will change. This\n * means only retrieve the thread ID when needed.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   The thread ID on success or FALSE on failure.\n */",
"mysql_create_db", T(Variant), S(0), "db", T(String), NULL, S(0), NULL, S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-create-db.php )\n *\n * mysql_create_db() attempts to create a new database on the server\n * associated with the specified link identifier.\n *\n * @db         string  The name of the database being created.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"mysql_select_db", T(Variant), S(0), "db", T(String), NULL, S(0), NULL, S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-select-db.php )\n *\n * Sets the current active database on the server that's associated with\n * the specified link identifier. Every subsequent call to mysql_query()\n * will be made on the active database.\n *\n * @db         string  The name of the database that is to be selected.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"mysql_drop_db", T(Variant), S(0), "db", T(String), NULL, S(0), NULL, S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-drop-db.php )\n *\n * mysql_drop_db() attempts to drop (remove) an entire database from the\n * server associated with the specified link identifier. This function is\n * deprecated, it is preferable to use mysql_query() to issue an sql DROP\n * DATABASE statement instead.\n *\n * @db         string  The name of the database that will be deleted.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */",
"mysql_affected_rows", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-affected-rows.php\n * )\n *\n * Get the number of affected rows by the last INSERT, UPDATE, REPLACE or\n * DELETE query associated with link_identifier.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns the number of affected rows on success, and\n *                     -1 if the last query failed.\n *\n *                     If the last query was a DELETE query with no WHERE\n *                     clause, all of the records will have been deleted\n *                     from the table but this function will return zero\n *                     with MySQL versions prior to 4.1.2.\n *\n *                     When using UPDATE, MySQL will not update columns\n *                     where the new value is the same as the old value.\n *                     This creates the possibility that\n *                     mysql_affected_rows() may not actually equal the\n *                     number of rows matched, only the number of rows that\n *                     were literally affected by the query.\n *\n *                     The REPLACE statement first deletes the record with\n *                     the same primary key and then inserts the new\n *                     record. This function returns the number of deleted\n *                     records plus the number of inserted records.\n */",
"mysql_set_timeout", T(Boolean), S(0), "query_timeout_ms", T(Int32), "i:-1;", S(5), "-1", S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Sets query timeout for a connection.\n *\n * @query_timeout_ms\n *             int     How many milli-seconds to wait for an SQL query.\n * @link_identifier\n *             mixed   Which connection to set to. If absent, default or\n *                     current connection will be applied to.\n *\n * @return     bool\n */",
"mysql_query", T(Variant), S(0), "query", T(String), NULL, S(0), NULL, S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-query.php )\n *\n * mysql_query() sends a unique query (multiple queries are not supported)\n * to the currently active database on the server that's associated with\n * the specified link_identifier.\n *\n * @query      string  An SQL query\n *\n *                     The query string should not end with a semicolon.\n *                     Data inside the query should be properly escaped.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   For SELECT, SHOW, DESCRIBE, EXPLAIN and other\n *                     statements returning resultset, mysql_query()\n *                     returns a resource on success, or FALSE on error.\n *\n *                     For other type of SQL statements, INSERT, UPDATE,\n *                     DELETE, DROP, etc, mysql_query() returns TRUE on\n *                     success or FALSE on error.\n *\n *                     The returned result resource should be passed to\n *                     mysql_fetch_array(), and other functions for dealing\n *                     with result tables, to access the returned data.\n *\n *                     Use mysql_num_rows() to find out how many rows were\n *                     returned for a SELECT statement or\n *                     mysql_affected_rows() to find out how many rows were\n *                     affected by a DELETE, INSERT, REPLACE, or UPDATE\n *                     statement.\n *\n *                     mysql_query() will also fail and return FALSE if\n *                     the user does not have permission to access the\n *                     table(s) referenced by the query.\n */",
"mysql_multi_query", T(Variant), S(0), "query", T(String), NULL, S(0), NULL, S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * mysql_multi_query() executes one or more queries separated by a ; to\n * the currently active database on the server that's associated with the\n * specified link_identifier.\n *\n * @query      string  An SQL query\n *\n *                     The query string should not end with a semicolon.\n *                     Data inside the query should be properly escaped.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   This is a fb specific query so behaviour is a little\n *                     random at the moment.\n */",
"mysql_next_result", T(Boolean), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Used with mysql_multi_query() to move the result set on one.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     bool    True if the iterator has more results after this\n *                     one. False if there was none.\n */",
"mysql_more_results", T(Boolean), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Used with mysql_multi_query() to check if there are more result sets to\n * be returned.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     bool    True if there is at least one more item in the\n *                     result set.\n */",
"mysql_fetch_result", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(81920), "/**\n * ( HipHop specific )\n *\n * Used with mysql_multi_query() to return a mysql result for the current\n * iterated query.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns a resource or a boolean.\n */",
"mysql_unbuffered_query", T(Variant), S(0), "query", T(String), NULL, S(0), NULL, S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-unbuffered-query.php )\n *\n * mysql_unbuffered_query() sends the SQL query query to MySQL without\n * automatically fetching and buffering the result rows as mysql_query()\n * does. This saves a considerable amount of memory with SQL queries that\n * produce large result sets, and you can start working on the result set\n * immediately after the first row has been retrieved as you don't have to\n * wait until the complete SQL query has been performed. To use\n * mysql_unbuffered_query() while multiple database connections are open,\n * you must specify the optional parameter link_identifier to identify\n * which connection you want to use.\n *\n * @query      string  The SQL query to execute.\n *\n *                     Data inside the query should be properly escaped.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   For SELECT, SHOW, DESCRIBE or EXPLAIN statements,\n *                     mysql_unbuffered_query() returns a resource on\n *                     success, or FALSE on error.\n *\n *                     For other type of SQL statements, UPDATE, DELETE,\n *                     DROP, etc, mysql_unbuffered_query() returns TRUE on\n *                     success or FALSE on error.\n */",
"mysql_db_query", T(Variant), S(0), "database", T(String), NULL, S(0), NULL, S(0), "query", T(String), NULL, S(0), NULL, S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-db-query.php )\n *\n * mysql_db_query() selects a database, and executes a query on it.\n * WarningThis function has been DEPRECATED as of PHP 5.3.0. Relying on\n * this feature is highly discouraged.\n *\n * @database   string  The name of the database that will be selected.\n * @query      string  The MySQL query.\n *\n *                     Data inside the query should be properly escaped.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns a positive MySQL result resource to the\n *                     query result, or FALSE on error. The function also\n *                     returns TRUE/FALSE for INSERT/UPDATE/DELETE queries\n *                     to indicate success/failure.\n */",
"mysql_list_dbs", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-list-dbs.php )\n *\n * Returns a result pointer containing the databases available from the\n * current mysql daemon.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   Returns a result pointer resource on success, or\n *                     FALSE on failure. Use the mysql_tablename() function\n *                     to traverse this result pointer, or any function for\n *                     result tables, such as mysql_fetch_array().\n */",
"mysql_list_tables", T(Variant), S(0), "database", T(String), NULL, S(0), NULL, S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-list-tables.php )\n *\n * Retrieves a list of table names from a MySQL database.\n *\n * This function is deprecated. It is preferable to use mysql_query() to\n * issue an SQL SHOW TABLES [FROM db_name] [LIKE 'pattern'] statement\n * instead.\n *\n * @database   string  The name of the database\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   A result pointer resource on success or FALSE on\n *                     failure.\n *\n *                     Use the mysql_tablename() function to traverse this\n *                     result pointer, or any function for result tables,\n *                     such as mysql_fetch_array().\n */",
"mysql_list_fields", T(Variant), S(0), "database_name", T(String), NULL, S(0), NULL, S(0), "table_name", T(String), NULL, S(0), NULL, S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-list-fields.php )\n *\n * Retrieves information about the given table name.\n *\n * This function is deprecated. It is preferable to use mysql_query() to\n * issue an SQL SHOW COLUMNS FROM table [LIKE 'name'] statement instead.\n *\n * @database_name\n *             string  The name of the database that's being queried.\n * @table_name string  The name of the table that's being queried.\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   A result pointer resource on success, or FALSE on\n *                     failure.\n *\n *                     The returned result can be used with\n *                     mysql_field_flags(), mysql_field_len(),\n *                     mysql_field_name() and mysql_field_type().\n */",
"mysql_list_processes", T(Variant), S(0), "link_identifier", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.mysql-list-processes.php )\n *\n * Retrieves the current MySQL server threads.\n *\n * @link_identifier\n *             mixed   The MySQL connection. If the link identifier is not\n *                     specified, the last link opened by mysql_connect()\n *                     is assumed. If no such link is found, it will try to\n *                     create one as if mysql_connect() was called with no\n *                     arguments. If no connection is found or established,\n *                     an E_WARNING level error is generated.\n *\n * @return     mixed   A result pointer resource on success or FALSE on\n *                     failure.\n */",
"mysql_db_name", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "row", T(Int32), NULL, S(0), NULL, S(0), "field", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-db-name.php )\n *\n * Retrieve the database name from a call to mysql_list_dbs().\n *\n * @result     mixed   The result pointer from a call to mysql_list_dbs().\n * @row        int     The index into the result set.\n * @field      mixed   The field name.\n *\n * @return     mixed   Returns the database name on success, and FALSE on\n *                     failure. If FALSE is returned, use mysql_error() to\n *                     determine the nature of the error.\n */",
"mysql_tablename", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "i", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-tablename.php )\n *\n * Retrieves the table name from a result.\n *\n * This function is deprecated. It is preferable to use mysql_query() to\n * issue an SQL SHOW TABLES [FROM db_name] [LIKE 'pattern'] statement\n * instead.\n *\n * @result     mixed   A result pointer resource that's returned from\n *                     mysql_list_tables().\n * @i          int     The integer index (row/table number)\n *\n * @return     mixed   The name of the table on success or FALSE on\n *                     failure.\n *\n *                     Use the mysql_tablename() function to traverse this\n *                     result pointer, or any function for result tables,\n *                     such as mysql_fetch_array().\n */",
"mysql_num_fields", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-num-fields.php )\n *\n * Retrieves the number of fields from a query.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n *\n * @return     mixed   Returns the number of fields in the result set\n *                     resource on success or FALSE on failure.\n */",
"mysql_num_rows", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-num-rows.php )\n *\n * Retrieves the number of rows from a result set. This command is only\n * valid for statements like SELECT or SHOW that return an actual result\n * set. To retrieve the number of rows affected by a INSERT, UPDATE,\n * REPLACE or DELETE query, use mysql_affected_rows().\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n *\n * @return     mixed   The number of rows in a result set on success or\n *                     FALSE on failure.\n */",
"mysql_free_result", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-free-result.php )\n *\n * mysql_free_result() will free all memory associated with the result\n * identifier result.\n *\n * mysql_free_result() only needs to be called if you are concerned about\n * how much memory is being used for queries that return large result sets.\n * All associated result memory is automatically freed at the end of the\n * script's execution.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n *\n *                     If a non-resource is used for the result, an error\n *                     of level E_WARNING will be emitted. It's worth\n *                     noting that mysql_query() only returns a resource\n *                     for SELECT, SHOW, EXPLAIN, and DESCRIBE queries.\n */",
"mysql_data_seek", T(Boolean), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "row", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-data-seek.php )\n *\n * mysql_data_seek() moves the internal row pointer of the MySQL result\n * associated with the specified result identifier to point to the\n * specified row number. The next call to a MySQL fetch function, such as\n * mysql_fetch_assoc(), would return that row.\n *\n * row_number starts at 0. The row_number should be a value in the range\n * from 0 to mysql_num_rows() - 1. However if the result set is empty\n * (mysql_num_rows() == 0), a seek to 0 will fail with a E_WARNING and\n * mysql_data_seek() will return FALSE.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @row        int     The desired row number of the new result pointer.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"mysql_fetch_row", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-fetch-row.php )\n *\n * Returns a numerical array that corresponds to the fetched row and moves\n * the internal data pointer ahead.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n *\n * @return     mixed   Returns an numerical array of strings that\n *                     corresponds to the fetched row, or FALSE if there\n *                     are no more rows.\n *\n *                     mysql_fetch_row() fetches one row of data from the\n *                     result associated with the specified result\n *                     identifier. The row is returned as an array. Each\n *                     result column is stored in an array offset, starting\n *                     at offset 0.\n */",
"mysql_fetch_assoc", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-fetch-assoc.php )\n *\n * Returns an associative array that corresponds to the fetched row and\n * moves the internal data pointer ahead. mysql_fetch_assoc() is equivalent\n * to calling mysql_fetch_array() with MYSQL_ASSOC for the optional second\n * parameter. It only returns an associative array.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n *\n * @return     mixed   Returns an associative array of strings that\n *                     corresponds to the fetched row, or FALSE if there\n *                     are no more rows.\n *\n *                     If two or more columns of the result have the same\n *                     field names, the last column will take precedence.\n *                     To access the other column(s) of the same name, you\n *                     either need to access the result with numeric\n *                     indices by using mysql_fetch_row() or add alias\n *                     names. See the example at the mysql_fetch_array()\n *                     description about aliases.\n */",
"mysql_fetch_array", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "result_type", T(Int32), "i:3;", S(4), "3", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-fetch-array.php )\n *\n * Returns an array that corresponds to the fetched row and moves the\n * internal data pointer ahead.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @result_type\n *             int     The type of array that is to be fetched. It's a\n *                     constant and can take the following values:\n *                     MYSQL_ASSOC, MYSQL_NUM, and MYSQL_BOTH.\n *\n * @return     mixed   Returns an array of strings that corresponds to the\n *                     fetched row, or FALSE if there are no more rows. The\n *                     type of returned array depends on how result_type is\n *                     defined. By using MYSQL_BOTH (default), you'll get\n *                     an array with both associative and number indices.\n *                     Using MYSQL_ASSOC, you only get associative indices\n *                     (as mysql_fetch_assoc() works), using MYSQL_NUM, you\n *                     only get number indices (as mysql_fetch_row()\n *                     works).\n *\n *                     If two or more columns of the result have the same\n *                     field names, the last column will take precedence.\n *                     To access the other column(s) of the same name, you\n *                     must use the numeric index of the column or make an\n *                     alias for the column. For aliased columns, you\n *                     cannot access the contents with the original column\n *                     name.\n */",
"mysql_fetch_lengths", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-fetch-lengths.php\n * )\n *\n * Returns an array that corresponds to the lengths of each field in the\n * last row fetched by MySQL.\n *\n * mysql_fetch_lengths() stores the lengths of each result column in the\n * last row returned by mysql_fetch_row(), mysql_fetch_assoc(),\n * mysql_fetch_array(), and mysql_fetch_object() in an array, starting at\n * offset 0.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n *\n * @return     mixed   An array of lengths on success or FALSE on failure.\n */",
"mysql_fetch_object", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "class_name", T(String), "s:8:\"stdClass\";", S(15), "\"stdClass\"", S(0), "params", T(Array), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-fetch-object.php\n * )\n *\n * Returns an object with properties that correspond to the fetched row\n * and moves the internal data pointer ahead.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @class_name string  The name of the class to instantiate, set the\n *                     properties of and return. If not specified, a\n *                     stdClass object is returned.\n * @params     vector  An optional array of parameters to pass to the\n *                     constructor for class_name objects.\n *\n * @return     mixed   Returns an object with string properties that\n *                     correspond to the fetched row, or FALSE if there are\n *                     no more rows.\n */",
"mysql_result", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "row", T(Int32), NULL, S(0), NULL, S(0), "field", T(Variant), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-result.php )\n *\n * Retrieves the contents of one cell from a MySQL result set.\n *\n * When working on large result sets, you should consider using one of the\n * functions that fetch an entire row (specified below). As these functions\n * return the contents of multiple cells in one function call, they're MUCH\n * quicker than mysql_result(). Also, note that specifying a numeric offset\n * for the field argument is much quicker than specifying a fieldname or\n * tablename.fieldname argument.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @row        int     The row number from the result that's being\n *                     retrieved. Row numbers start at 0.\n * @field      mixed   The name or offset of the field being retrieved.\n *\n *                     It can be the field's offset, the field's name, or\n *                     the field's table dot field name\n *                     (tablename.fieldname). If the column name has been\n *                     aliased ('select foo as bar from...'), use the alias\n *                     instead of the column name. If undefined, the first\n *                     field is retrieved.\n *\n * @return     mixed   The contents of one cell from a MySQL result set on\n *                     success, or FALSE on failure.\n */",
"mysql_fetch_field", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "field", T(Int32), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-fetch-field.php )\n *\n * Returns an object containing field information. This function can be\n * used to obtain information about fields in the provided query result.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. If the field offset is\n *                     not specified, the next field that was not yet\n *                     retrieved by this function is retrieved. The\n *                     field_offset starts at 0.\n *\n * @return     mixed   Returns an object containing field information. The\n *                     properties of the object are:\n *\n *                     name - column name table - name of the table the\n *                     column belongs to max_length - maximum length of the\n *                     column not_null - 1 if the column cannot be NULL\n *                     primary_key - 1 if the column is a primary key\n *                     unique_key - 1 if the column is a unique key\n *                     multiple_key - 1 if the column is a non-unique key\n *                     numeric - 1 if the column is numeric blob - 1 if the\n *                     column is a BLOB type - the type of the column\n *                     unsigned - 1 if the column is unsigned zerofill - 1\n *                     if the column is zero-filled\n */",
"mysql_field_seek", T(Boolean), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "field", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-field-seek.php )\n *\n * Seeks to the specified field offset. If the next call to\n * mysql_fetch_field() doesn't include a field offset, the field offset\n * specified in mysql_field_seek() will be returned.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. The field_offset starts\n *                     at 0. If field_offset does not exist, an error of\n *                     level E_WARNING is also issued.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"mysql_field_name", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "field", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-field-name.php )\n *\n * mysql_field_name() returns the name of the specified field index.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. The field_offset starts\n *                     at 0. If field_offset does not exist, an error of\n *                     level E_WARNING is also issued.\n *\n * @return     mixed   The name of the specified field index on success or\n *                     FALSE on failure.\n */",
"mysql_field_table", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "field", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-field-table.php )\n *\n * Returns the name of the table that the specified field is in.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. The field_offset starts\n *                     at 0. If field_offset does not exist, an error of\n *                     level E_WARNING is also issued.\n *\n * @return     mixed   The name of the table on success.\n */",
"mysql_field_len", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "field", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-field-len.php )\n *\n * mysql_field_len() returns the length of the specified field.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. The field_offset starts\n *                     at 0. If field_offset does not exist, an error of\n *                     level E_WARNING is also issued.\n *\n * @return     mixed   The length of the specified field index on success\n *                     or FALSE on failure.\n */",
"mysql_field_type", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "field", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-field-type.php )\n *\n * mysql_field_type() is similar to the mysql_field_name() function. The\n * arguments are identical, but the field type is returned instead.\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. The field_offset starts\n *                     at 0. If field_offset does not exist, an error of\n *                     level E_WARNING is also issued.\n *\n * @return     mixed   The returned field type will be one of \"int\",\n *                     \"real\", \"string\", \"blob\", and others as detailed in\n *                     the MySQL documentation.\n */",
"mysql_field_flags", T(Variant), S(0), "result", T(Variant), NULL, S(0), NULL, S(0), "field", T(Int32), "i:0;", S(4), "0", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.mysql-field-flags.php )\n *\n * mysql_field_flags() returns the field flags of the specified field. The\n * flags are reported as a single word per flag separated by a single\n * space, so that you can split the returned value using explode().\n *\n * @result     mixed   resource that is being evaluated. This result comes\n *                     from a call to mysql_query().\n * @field      int     The numerical field offset. The field_offset starts\n *                     at 0. If field_offset does not exist, an error of\n *                     level E_WARNING is also issued.\n *\n * @return     mixed   Returns a string of flags associated with the result\n *                     or FALSE on failure.\n *\n *                     The following flags are reported, if your version\n *                     of MySQL is current enough to support them:\n *                     \"not_null\", \"primary_key\", \"unique_key\",\n *                     \"multiple_key\", \"blob\", \"unsigned\", \"zerofill\",\n *                     \"binary\", \"enum\", \"auto_increment\" and \"timestamp\".\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
