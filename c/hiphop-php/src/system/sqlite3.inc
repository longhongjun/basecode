// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0

#elif EXT_TYPE == 1
"SQLITE3_ASSOC", T(Int64),
"SQLITE3_NUM", T(Int64),
"SQLITE3_BOTH", T(Int64),
"SQLITE3_INTEGER", T(Int64),
"SQLITE3_FLOAT", T(Int64),
"SQLITE3_TEXT", T(Int64),
"SQLITE3_BLOB", T(Int64),
"SQLITE3_NULL", T(Int64),
"SQLITE3_OPEN_READONLY", T(Int64),
"SQLITE3_OPEN_READWRITE", T(Int64),
"SQLITE3_OPEN_CREATE", T(Int64),

#elif EXT_TYPE == 2
"SQLite3", "", NULL, "__construct", T(Void), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "flags", T(Int64), "\001", S(1), "SQLITE3_OPEN_READWRITE|SQLITE3_OPEN_CREATE", S(0), "encryption_key", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.construct.php )\n *\n *\n * @filename   string  Path to the SQLite database.\n * @flags      int     Optional flags used to determine how to open the\n *                     SQLite database. By default, open uses\n *                     SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE.\n *\n *                     SQLITE3_OPEN_READONLY: Open the database for\n *                     reading only.\n *\n *                     SQLITE3_OPEN_READWRITE: Open the database for\n *                     reading and writing.\n *\n *                     SQLITE3_OPEN_CREATE: Create the database if it does\n *                     not exist.\n * @encryption_key\n *             string  An optional encryption key used when encrypting and\n *                     decrypting an SQLite database.\n */", S(16384),"open", T(Void), S(0), "filename", T(String), NULL, S(0), NULL, S(0), "flags", T(Int64), "\001", S(1), "SQLITE3_OPEN_READWRITE|SQLITE3_OPEN_CREATE", S(0), "encryption_key", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.open.php )\n *\n * Opens an SQLite 3 Database. If the build includes encryption, then it\n * will attempt to use the key.\n *\n * @filename   string  Path to the SQLite database.\n * @flags      int     Optional flags used to determine how to open the\n *                     SQLite database. By default, open uses\n *                     SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE.\n *\n *                     SQLITE3_OPEN_READONLY: Open the database for\n *                     reading only.\n *\n *                     SQLITE3_OPEN_READWRITE: Open the database for\n *                     reading and writing.\n *\n *                     SQLITE3_OPEN_CREATE: Create the database if it does\n *                     not exist.\n * @encryption_key\n *             string  An optional encryption key used when encrypting and\n *                     decrypting an SQLite database.\n *\n * @return     mixed   Returns TRUE on success, FALSE on failure to open\n *                     the database.\n */", S(16384),"busytimeout", T(Boolean), S(0), "msecs", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.busytimeout.php )\n *\n * Sets a busy handler that will sleep until the database is not locked or\n * the timeout is reached.\n *\n * @msecs      int     The milliseconds to sleep. Setting this value to a\n *                     value less than or equal to zero, will turn off an\n *                     already set timeout handler.\n *\n * @return     bool    Returns TRUE on success, FALSE on failure.\n */", S(16384),"close", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.close.php )\n *\n * Closes the database connection.\n *\n * @return     bool    Returns TRUE on success, FALSE on failure.\n */", S(16384),"exec", T(Boolean), S(0), "sql", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.exec.php )\n *\n * Executes a result-less query against a given database.\n *\n * @sql        string  The SQL query to execute (typically an INSERT,\n *                     UPDATE, or DELETE query).\n *\n * @return     bool    Returns TRUE if the query succeeded, FALSE on\n *                     failure.\n */", S(16384),"version", T(Array), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.version.php )\n *\n * Returns the SQLite3 library version as a string constant and as a\n * number.\n *\n * @return     map     Returns an associative array with the keys\n *                     \"versionString\" and \"versionNumber\".\n */", S(16384),"lastinsertrowid", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.lastinsertrowid.php )\n *\n * Returns the row ID of the most recent INSERT into the database.\n *\n * @return     int     Returns the row ID of the most recent INSERT into\n *                     the database\n */", S(16384),"lasterrorcode", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.lasterrorcode.php )\n *\n * Returns the numeric result code of the most recent failed SQLite\n * request.\n *\n * @return     int     Returns an integer value representing the numeric\n *                     result code of the most recent failed SQLite\n *                     request.\n */", S(16384),"lasterrormsg", T(String), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.lasterrormsg.php )\n *\n * Returns English text describing the most recent failed SQLite request.\n *\n * @return     string  Returns an English string describing the most recent\n *                     failed SQLite request.\n */", S(16384),"loadextension", T(Boolean), S(0), "extension", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.loadextension.php )\n *\n * Attempts to load an SQLite extension library.\n *\n * @extension  string  The name of the library to load. The library must be\n *                     located in the directory specified in the configure\n *                     option sqlite3.extension_dir.\n *\n * @return     bool    Returns TRUE if the extension is successfully\n *                     loaded, FALSE on failure.\n */", S(16384),"changes", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.changes.php )\n *\n * Returns the number of database rows that were changed (or inserted or\n * deleted) by the most recent SQL statement.\n *\n * @return     int     Returns an integer value corresponding to the number\n *                     of database rows changed (or inserted or deleted) by\n *                     the most recent SQL statement.\n */", S(16384),"escapestring", T(String), S(0), "sql", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.escapestring.php )\n *\n * Returns a string that has been properly escaped for safe inclusion in\n * an SQL statement.\n *\n * @sql        string  The string to be escaped.\n *\n * @return     string  Returns a properly escaped string that may be used\n *                     safely in an SQL statement.\n */", S(16384),"prepare", T(Variant), S(0), "sql", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.prepare.php )\n *\n * Prepares an SQL statement for execution and returns an SQLite3Stmt\n * object.\n *\n * @sql        string  The SQL query to prepare.\n *\n * @return     mixed   Returns an SQLite3Stmt object on success or FALSE on\n *                     failure.\n */", S(16384),"query", T(Variant), S(0), "sql", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.query.php )\n *\n * Executes an SQL query, returning an SQLite3Result object if the query\n * returns results.\n *\n * @sql        string  The SQL query to execute.\n *\n * @return     mixed   Returns an SQLite3Result object if the query returns\n *                     results. Otherwise, returns TRUE if the query\n *                     succeeded, FALSE on failure.\n */", S(16384),"querysingle", T(Variant), S(0), "sql", T(String), NULL, S(0), NULL, S(0), "entire_row", T(Boolean), "b:0;", S(4), "false", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.querysingle.php )\n *\n * Executes a query and returns a single result.\n *\n * @sql        string  The SQL query to execute.\n * @entire_row bool    By default, querySingle returns the value of the\n *                     first column returned by the query. If entire_row is\n *                     TRUE, then it returns an array of the entire first\n *                     row.\n *\n * @return     mixed   Returns the value of the first column of results or\n *                     an array of the entire first row (if entire_row is\n *                     TRUE), otherwise FALSE on failure.\n */", S(16384),"createfunction", T(Boolean), S(0), "name", T(String), NULL, S(0), NULL, S(0), "callback", T(Variant), NULL, S(0), NULL, S(0), "argcount", T(Int64), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.createfunction.php )\n *\n * Registers a PHP function or user-defined function for use as an SQL\n * scalar function for use within SQL statements.\n *\n * @name       string  Name of the SQL function to be created or redefined.\n * @callback   mixed   The name of a PHP function or user-defined function\n *                     to apply as a callback, defining the behavior of the\n *                     SQL function.\n * @argcount   int     The number of arguments that the SQL function takes.\n *                     If this parameter is negative, then the SQL function\n *                     may take any number of arguments.\n *\n * @return     bool    Returns TRUE upon successful creation of the\n *                     function, FALSE on failure.\n */", S(16384),"createaggregate", T(Boolean), S(0), "name", T(String), NULL, S(0), NULL, S(0), "step", T(Variant), NULL, S(0), NULL, S(0), "final", T(Variant), NULL, S(0), NULL, S(0), "argcount", T(Int64), "i:-1;", S(5), "-1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.createaggregate.php )\n *\n * Registers a PHP function or user-defined function for use as an SQL\n * aggregate function for use within SQL statements.\n *\n * @name       string  Name of the SQL aggregate to be created or\n *                     redefined.\n * @step       mixed   The name of a PHP function or user-defined function\n *                     to apply as a callback for every item in the\n *                     aggregate.\n * @final      mixed   The name of a PHP function or user-defined function\n *                     to apply as a callback at the end of the aggregate\n *                     data.\n * @argcount   int     The number of arguments that the SQL aggregate\n *                     takes. If this parameter is negative, then the SQL\n *                     aggregate may take any number of arguments.\n *\n * @return     bool    Returns TRUE upon successful creation of the\n *                     aggregate, FALSE on failure.\n */", S(16384),"openblob", T(Boolean), S(0), "table", T(String), NULL, S(0), NULL, S(0), "column", T(String), NULL, S(0), NULL, S(0), "rowid", T(Int64), NULL, S(0), NULL, S(0), "dbname", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3.openblob.php )\n *\n *\n * @table      string\n * @column     string\n * @rowid      int\n * @dbname     string\n *\n * @return     bool\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.sqlite3.php )\n *\n * A class that interfaces SQLite 3 databases.\n *\n */", "SQLite3Stmt", "", NULL, "__construct", T(Void), S(0), "dbobject", T(Object), NULL, S(0), NULL, S(0), "statement", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.construct.php )\n *\n *\n * @dbobject   object\n * @statement  string\n */", S(16384),"paramcount", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.paramcount.php )\n *\n * Returns the number of parameters within the prepared statement.\n *\n * @return     int     Returns the number of parameters within the prepared\n *                     statement.\n */", S(16384),"close", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.close.php )\n *\n * Closes the prepared statement.\n *\n * @return     bool    Returns TRUE\n */", S(16384),"reset", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.reset.php )\n *\n * Resets the prepared statement to its state prior to execution. All\n * bindings remain intact after reset.\n *\n * @return     bool    Returns TRUE if the statement is successfully reset,\n *                     FALSE on failure.\n */", S(16384),"clear", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.clear.php )\n *\n * Clears all current bound parameters.\n *\n * @return     bool    Returns TRUE on successful clearing of bound\n *                     parameters, FALSE on failure.\n */", S(16384),"bindparam", T(Boolean), S(0), "name", T(Variant), NULL, S(0), NULL, S(0), "parameter", T(Variant), NULL, S(0), NULL, S(1), "type", T(Int64), "\001", S(1), "SQLITE3_TEXT", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.bindparam.php )\n *\n * Binds a parameter to a statement variable.\n *\n * @name       mixed   An string identifying the statement variable to\n *                     which the parameter should be bound.\n * @parameter  mixed   The parameter to bind to a statement variable.\n * @type       int     The data type of the parameter to bind.\n *\n *                     SQLITE3_INTEGER: The value is a signed integer,\n *                     stored in 1, 2, 3, 4, 6, or 8 bytes depending on the\n *                     magnitude of the value.\n *\n *                     SQLITE3_FLOAT: The value is a floating point value,\n *                     stored as an 8-byte IEEE floating point number.\n *\n *                     SQLITE3_TEXT: The value is a text string, stored\n *                     using the database encoding (UTF-8, UTF-16BE or\n *                     UTF-16-LE).\n *\n *                     SQLITE3_BLOB: The value is a blob of data, stored\n *                     exactly as it was input.\n *\n *                     SQLITE3_NULL: The value is a NULL value.\n *\n * @return     bool    Returns TRUE if the parameter is bound to the\n *                     statement variable, FALSE on failure.\n */", S(16384),"bindvalue", T(Boolean), S(0), "name", T(Variant), NULL, S(0), NULL, S(0), "parameter", T(Variant), NULL, S(0), NULL, S(0), "type", T(Int64), "\001", S(1), "SQLITE3_TEXT", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.bindvalue.php )\n *\n * Binds the value of a parameter to a statement variable.\n *\n * @name       mixed   An string identifying the statement variable to\n *                     which the value should be bound.\n * @parameter  mixed   The value to bind to a statement variable.\n * @type       int     The data type of the value to bind.\n *\n *                     SQLITE3_INTEGER: The value is a signed integer,\n *                     stored in 1, 2, 3, 4, 6, or 8 bytes depending on the\n *                     magnitude of the value.\n *\n *                     SQLITE3_FLOAT: The value is a floating point value,\n *                     stored as an 8-byte IEEE floating point number.\n *\n *                     SQLITE3_TEXT: The value is a text string, stored\n *                     using the database encoding (UTF-8, UTF-16BE or\n *                     UTF-16-LE).\n *\n *                     SQLITE3_BLOB: The value is a blob of data, stored\n *                     exactly as it was input.\n *\n *                     SQLITE3_NULL: The value is a NULL value.\n *\n * @return     bool    Returns TRUE if the value is bound to the statement\n *                     variable, FALSE on failure.\n */", S(16384),"execute", T(Variant), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3stmt.execute.php )\n *\n * Executes a prepared statement and returns a result set object.\n *\n * @return     mixed   Returns an SQLite3Result object on successful\n *                     execution of the prepared statement, FALSE on\n *                     failure.\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.sqlite3stmt.php )\n *\n * A class that handles prepared statements for the SQLite 3 extension.\n *\n */", "SQLite3Result", "", NULL, "__construct", T(Void), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.construct.php )\n *\n *\n */", S(16384),"numcolumns", T(Int64), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.numcolumns.php )\n *\n * Returns the number of columns in the result set.\n *\n * @return     int     Returns the number of columns in the result set.\n */", S(16384),"columnname", T(String), S(0), "column", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.columnname.php )\n *\n * Returns the name of the column specified by the column_number.\n *\n * @column     int     The numeric zero-based index of the column.\n *\n * @return     string  Returns the string name of the column identified by\n *                     column_number.\n */", S(16384),"columntype", T(Int64), S(0), "column", T(Int64), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.columntype.php )\n *\n * Returns the type of the column identified by column_number.\n *\n * @column     int     The numeric zero-based index of the column.\n *\n * @return     int     Returns the data type index of the column identified\n *                     by column_number (one of SQLITE3_INTEGER,\n *                     SQLITE3_FLOAT, SQLITE3_TEXT, SQLITE3_BLOB, or\n *                     SQLITE3_NULL).\n */", S(16384),"fetcharray", T(Variant), S(0), "mode", T(Int64), "\001", S(1), "SQLITE3_BOTH", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.fetcharray.php )\n *\n * Fetches a result row as an associative or numerically indexed array or\n * both. By default, fetches as both.\n *\n * @mode       int     Controls how the next row will be returned to the\n *                     caller. This value must be one of either\n *                     SQLITE3_ASSOC, SQLITE3_NUM, or SQLITE3_BOTH.\n *\n *                     SQLITE3_ASSOC: returns an array indexed by column\n *                     name as returned in the corresponding result set\n *\n *                     SQLITE3_NUM: returns an array indexed by column\n *                     number as returned in the corresponding result set,\n *                     starting at column 0\n *\n *                     SQLITE3_BOTH: returns an array indexed by both\n *                     column name and number as returned in the\n *                     corresponding result set, starting at column 0\n *\n * @return     mixed   Returns a result row as an associatively or\n *                     numerically indexed array or both.\n */", S(16384),"reset", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.reset.php )\n *\n *\n * @return     bool\n */", S(16384),"finalize", T(Boolean), S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/sqlite3result.finalize.php )\n *\n * Closes the result set.\n *\n * @return     bool    Returns TRUE.\n */", S(16384),NULL,NULL,NULL,
S(16384), "/**\n * ( excerpt from http://php.net/manual/en/class.sqlite3result.php )\n *\n * A class that handles result sets for the SQLite 3 extension.\n *\n */", 
#endif
