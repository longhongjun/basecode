// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"xml_parser_create", T(Object), S(0), "encoding", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.xml-parser-create.php )\n *\n * xml_parser_create() creates a new XML parser and returns a resource\n * handle referencing it to be used by the other XML functions.\n *\n * @encoding   string  The optional encoding specifies the character\n *                     encoding for the input/output in PHP 4. Starting\n *                     from PHP 5, the input encoding is automatically\n *                     detected, so that the encoding parameter specifies\n *                     only the output encoding. In PHP 4, the default\n *                     output encoding is the same as the input charset. If\n *                     empty string is passed, the parser attempts to\n *                     identify which encoding the document is encoded in\n *                     by looking at the heading 3 or 4 bytes. In PHP 5.0.0\n *                     and 5.0.1, the default output charset is ISO-8859-1,\n *                     while in PHP 5.0.2 and upper is UTF-8. The supported\n *                     encodings are ISO-8859-1, UTF-8 and US-ASCII.\n *\n * @return     resource\n *                     Returns a resource handle for the new XML parser.\n */",
"xml_parser_free", T(Boolean), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.xml-parser-free.php )\n *\n * Frees the given XML parser.\n *\n * @parser     resource\n *                     A reference to the XML parser to free.\n *\n * @return     bool    This function returns FALSE if parser does not refer\n *                     to a valid parser, or else it frees the parser and\n *                     returns TRUE.\n */",
"xml_parse", T(Int64), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "is_final", T(Boolean), "b:1;", S(4), "true", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.xml-parse.php )\n *\n * xml_parse() parses an XML document. The handlers for the configured\n * events are called as many times as necessary.\n *\n * @parser     resource\n *                     A reference to the XML parser to use.\n * @data       string  Chunk of data to parse. A document may be parsed\n *                     piece-wise by calling xml_parse() several times with\n *                     new data, as long as the is_final parameter is set\n *                     and TRUE when the last data is parsed.\n * @is_final   bool    If set and TRUE, data is the last piece of data sent\n *                     in this parse.\n *\n * @return     int     Returns 1 on success or 0 on failure.\n *\n *                     For unsuccessful parses, error information can be\n *                     retrieved with xml_get_error_code(),\n *                     xml_error_string(), xml_get_current_line_number(),\n *                     xml_get_current_column_number() and\n *                     xml_get_current_byte_index().\n *\n *                     Entity errors are reported at the end of the data\n *                     thus only if is_final is set and TRUE.\n */",
"xml_parse_into_struct", T(Int64), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "data", T(String), NULL, S(0), NULL, S(0), "values", T(Variant), NULL, S(0), NULL, S(1), "index", T(Variant), "N;", S(2), "null", S(1), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-parse-into-struct.php )\n *\n * This function parses an XML file into 2 parallel array structures, one\n * (index) containing pointers to the location of the appropriate values in\n * the values array. These last two parameters must be passed by reference.\n *\n * @parser     resource\n *\n * @data       string\n * @values     mixed\n * @index      mixed\n *\n * @return     int     xml_parse_into_struct() returns 0 for failure and 1\n *                     for success. This is not the same as FALSE and TRUE,\n *                     be careful with operators such as ===.\n */",
"xml_parser_create_ns", T(Object), S(0), "encoding", T(String), "N;", S(2), "null", S(0), "separator", T(String), "N;", S(2), "null", S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-parser-create-ns.php )\n *\n * xml_parser_create_ns() creates a new XML parser with XML namespace\n * support and returns a resource handle referencing it to be used by the\n * other XML functions.\n *\n * @encoding   string  The optional encoding specifies the character\n *                     encoding for the input/output in PHP 4. Starting\n *                     from PHP 5, the input encoding is automatically\n *                     detected, so that the encoding parameter specifies\n *                     only the output encoding. In PHP 4, the default\n *                     output encoding is the same as the input charset. In\n *                     PHP 5.0.0 and 5.0.1, the default output charset is\n *                     ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8.\n *                     The supported encodings are ISO-8859-1, UTF-8 and\n *                     US-ASCII.\n * @separator  string  With a namespace aware parser tag parameters passed\n *                     to the various handler functions will consist of\n *                     namespace and tag name separated by the string\n *                     specified in seperator.\n *\n * @return     resource\n *                     Returns a resource handle for the new XML parser.\n */",
"xml_parser_get_option", T(Variant), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "option", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-parser-get-option.php )\n *\n * Gets an option value from an XML parser.\n *\n * @parser     resource\n *                     A reference to the XML parser to get an option from.\n * @option     int     Which option to fetch. XML_OPTION_CASE_FOLDING and\n *                     XML_OPTION_TARGET_ENCODING are available. See\n *                     xml_parser_set_option() for their description.\n *\n * @return     mixed   This function returns FALSE if parser does not refer\n *                     to a valid parser or if option isn't valid\n *                     (generates also a E_WARNING). Else the option's\n *                     value is returned.\n */",
"xml_parser_set_option", T(Boolean), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "option", T(Int32), NULL, S(0), NULL, S(0), "value", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-parser-set-option.php )\n *\n * Sets an option in an XML parser.\n *\n * @parser     resource\n *                     A reference to the XML parser to set an option in.\n * @option     int     Which option to set. See below.\n *\n *                     The following options are available: XML parser\n *                     options Option constant Data type Description\n *                     XML_OPTION_CASE_FOLDING integer Controls whether\n *                     case-folding is enabled for this XML parser. Enabled\n *                     by default. XML_OPTION_SKIP_TAGSTART integer Specify\n *                     how many characters should be skipped in the\n *                     beginning of a tag name. XML_OPTION_SKIP_WHITE\n *                     integer Whether to skip values consisting of\n *                     whitespace characters. XML_OPTION_TARGET_ENCODING\n *                     string Sets which target encoding to use in this XML\n *                     parser.By default, it is set to the same as the\n *                     source encoding used by xml_parser_create().\n *                     Supported target encodings are ISO-8859-1, US-ASCII\n *                     and UTF-8.\n * @value      mixed   The option's new value.\n *\n * @return     bool    This function returns FALSE if parser does not refer\n *                     to a valid parser, or if the option could not be\n *                     set. Else the option is set and TRUE is returned.\n */",
"xml_set_character_data_handler", T(Boolean), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "handler", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-character-data-handler.php )\n *\n * Sets the character data handler function for the XML parser parser.\n *\n * @parser     resource\n *\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept two\n *                     parameters: handler ( resource $parser , string\n *                     $data ) parser The first parameter, parser, is a\n *                     reference to the XML parser calling the handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"xml_set_default_handler", T(Boolean), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "handler", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-default-handler.php )\n *\n * Sets the default handler function for the XML parser parser.\n *\n * @parser     resource\n *\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept two\n *                     parameters: handler ( resource $parser , string\n *                     $data ) parser The first parameter, parser, is a\n *                     reference to the XML parser calling the handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"xml_set_element_handler", T(Boolean), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "start_element_handler", T(Variant), NULL, S(0), NULL, S(0), "end_element_handler", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-element-handler.php )\n *\n * Sets the element handler functions for the XML parser.\n * start_element_handler and end_element_handler are strings containing the\n * names of functions that must exist when xml_parse() is called for\n * parser.\n *\n * @parser     resource\n *\n * @start_element_handler\n *             mixed   The function named by start_element_handler must\n *                     accept three parameters: start_element_handler (\n *                     resource $parser , string $name , array $attribs )\n *                     parser The first parameter, parser, is a reference\n *                     to the XML parser calling the handler.\n * @end_element_handler\n *             mixed   The second parameter, name, contains the name of the\n *                     element for which this handler is called.If\n *                     case-folding is in effect for this parser, the\n *                     element name will be in uppercase letters.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"xml_set_processing_instruction_handler", T(Boolean), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "handler", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-processing-instruction-handler.php\n * )\n *\n * Sets the processing instruction (PI) handler function for the XML\n * parser parser.\n *\n * A processing instruction has the following format: target data\?> You\n * can put PHP code into such a tag, but be aware of one limitation: in an\n * XML PI, the PI end tag (\?>) can not be quoted, so this character\n * sequence should not appear in the PHP code you embed with PIs in XML\n * documents.If it does, the rest of the PHP code, as well as the \"real\" PI\n * end tag, will be treated as character data.\n *\n * @parser     resource\n *\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept three\n *                     parameters: handler ( resource $parser , string\n *                     $target , string $data ) parser The first parameter,\n *                     parser, is a reference to the XML parser calling the\n *                     handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"xml_set_start_namespace_decl_handler", T(Boolean), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "handler", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-start-namespace-decl-handler.php\n * )\n *\n * Set a handler to be called when a namespace is declared. Namespace\n * declarations occur inside start tags. But the namespace declaration\n * start handler is called before the start tag handler for each namespace\n * declared in that start tag.\n *\n * @parser     resource\n *                     A reference to the XML parser.\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept four\n *                     parameters, and should return an integer value. If\n *                     the value returned from the handler is FALSE (which\n *                     it will be if no value is returned), the XML parser\n *                     will stop parsing and xml_get_error_code() will\n *                     return XML_ERROR_EXTERNAL_ENTITY_HANDLING. handler (\n *                     resource $parser , string $user_data , string\n *                     $prefix , string $uri ) parser The first parameter,\n *                     parser, is a reference to the XML parser calling the\n *                     handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"xml_set_end_namespace_decl_handler", T(Boolean), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "handler", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-end-namespace-decl-handler.php\n * )\n *\n * Set a handler to be called when leaving the scope of a namespace\n * declaration. This will be called, for each namespace declaration, after\n * the handler for the end tag of the element in which the namespace was\n * declared.\n *\n * @parser     resource\n *                     A reference to the XML parser.\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept three\n *                     parameters, and should return an integer value. If\n *                     the value returned from the handler is FALSE (which\n *                     it will be if no value is returned), the XML parser\n *                     will stop parsing and xml_get_error_code() will\n *                     return XML_ERROR_EXTERNAL_ENTITY_HANDLING. handler (\n *                     resource $parser , string $user_data , string\n *                     $prefix ) parser The first parameter, parser, is a\n *                     reference to the XML parser calling the handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"xml_set_unparsed_entity_decl_handler", T(Boolean), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "handler", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-unparsed-entity-decl-handler.php\n * )\n *\n * Sets the unparsed entity declaration handler function for the XML\n * parser parser.\n *\n * The handler will be called if the XML parser encounters an external\n * entity declaration with an NDATA declaration, like the following:\n *\n *\n *\n * See \273 section 4.2.2 of the XML 1.0 spec for the definition of notation\n * declared external entities.\n *\n * @parser     resource\n *\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept six\n *                     parameters: handler ( resource $parser , string\n *                     $entity_name , string $base , string $system_id ,\n *                     string $public_id , string $notation_name ) parser\n *                     The first parameter, parser, is a reference to the\n *                     XML parser calling the handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"xml_set_external_entity_ref_handler", T(Boolean), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "handler", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-external-entity-ref-handler.php\n * )\n *\n * Sets the external entity reference handler function for the XML parser\n * parser.\n *\n * @parser     resource\n *\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept five\n *                     parameters, and should return an integer value.If\n *                     the value returned from the handler is FALSE (which\n *                     it will be if no value is returned), the XML parser\n *                     will stop parsing and xml_get_error_code() will\n *                     return XML_ERROR_EXTERNAL_ENTITY_HANDLING. handler (\n *                     resource $parser , string $open_entity_names ,\n *                     string $base , string $system_id , string $public_id\n *                     ) parser The first parameter, parser, is a reference\n *                     to the XML parser calling the handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"xml_set_notation_decl_handler", T(Boolean), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "handler", T(Variant), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-set-notation-decl-handler.php )\n *\n * Sets the notation declaration handler function for the XML parser\n * parser.\n *\n * A notation declaration is part of the document's DTD and has the\n * following format:\n *\n * See \273 section 4.7 of the XML 1.0 spec for the definition of notation\n * declarations.\n *\n * @parser     resource\n *\n * @handler    mixed   handler is a string containing the name of a\n *                     function that must exist when xml_parse() is called\n *                     for parser.\n *\n *                     The function named by handler must accept five\n *                     parameters: handler ( resource $parser , string\n *                     $notation_name , string $base , string $system_id ,\n *                     string $public_id ) parser The first parameter,\n *                     parser, is a reference to the XML parser calling the\n *                     handler.\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"xml_set_object", T(Boolean), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), "object", T(Variant), NULL, S(0), NULL, S(1), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.xml-set-object.php )\n *\n * This function allows to use parser inside object. All callback\n * functions could be set with xml_set_element_handler() etc and assumed to\n * be methods of object.\n *\n * @parser     resource\n *\n * @object     mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */",
"xml_get_current_byte_index", T(Int64), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-get-current-byte-index.php )\n *\n * Gets the current byte index of the given XML parser.\n *\n * @parser     resource\n *                     A reference to the XML parser to get byte index\n *                     from.\n *\n * @return     int     This function returns FALSE if parser does not refer\n *                     to a valid parser, or else it returns which byte\n *                     index the parser is currently at in its data buffer\n *                     (starting at 0).\n */",
"xml_get_current_column_number", T(Int64), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-get-current-column-number.php )\n *\n * Gets the current column number of the given XML parser.\n *\n * @parser     resource\n *                     A reference to the XML parser to get column number\n *                     from.\n *\n * @return     int     This function returns FALSE if parser does not refer\n *                     to a valid parser, or else it returns which column\n *                     on the current line (as given by\n *                     xml_get_current_line_number()) the parser is\n *                     currently at.\n */",
"xml_get_current_line_number", T(Int64), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.xml-get-current-line-number.php )\n *\n * Gets the current line number for the given XML parser.\n *\n * @parser     resource\n *                     A reference to the XML parser to get line number\n *                     from.\n *\n * @return     int     This function returns FALSE if parser does not refer\n *                     to a valid parser, or else it returns which line the\n *                     parser is currently at in its data buffer.\n */",
"xml_get_error_code", T(Int64), S(0), "parser", T(Object), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.xml-get-error-code.php\n * )\n *\n * Gets the XML parser error code.\n *\n * @parser     resource\n *                     A reference to the XML parser to get error code\n *                     from.\n *\n * @return     int     This function returns FALSE if parser does not refer\n *                     to a valid parser, or else it returns one of the\n *                     error codes listed in the error codes section.\n */",
"xml_error_string", T(String), S(0), "code", T(Int32), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.xml-error-string.php )\n *\n * Gets the XML parser error string associated with the given code.\n *\n * @code       int     An error code from xml_get_error_code().\n *\n * @return     string  Returns a string with a textual description of the\n *                     error code, or FALSE if no description was found.\n */",
"utf8_decode", T(String), S(0), "data", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.utf8-decode.php )\n *\n * This function decodes data, assumed to be UTF-8 encoded, to ISO-8859-1.\n *\n * @data       string  An UTF-8 encoded string.\n *\n * @return     string  Returns the ISO-8859-1 translation of data.\n */",
"utf8_encode", T(String), S(0), "data", T(String), NULL, S(0), NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.utf8-encode.php )\n *\n * This function encodes the string data to UTF-8, and returns the encoded\n * version. UTF-8 is a standard mechanism used by Unicode for encoding wide\n * character values into a byte stream. UTF-8 is transparent to plain ASCII\n * characters, is self-synchronized (meaning it is possible for a program\n * to figure out where in the bytestream characters start) and can be used\n * with normal string comparison functions for sorting and such. PHP\n * encodes UTF-8 characters in up to four bytes, like this: UTF-8 encoding\n * bytes bits representation 1 7 0bbbbbbb 2 11 110bbbbb 10bbbbbb 3 16\n * 1110bbbb 10bbbbbb 10bbbbbb 4 21 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb Each\n * b represents a bit that can be used to store character data.\n *\n * @data       string  An ISO-8859-1 string.\n *\n * @return     string  Returns the UTF-8 translation of data.\n */",

#elif EXT_TYPE == 1

#elif EXT_TYPE == 2

#endif
