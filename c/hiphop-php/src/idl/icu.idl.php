<?php
/**
 * Automatically generated by running "php schema.php icu".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP

// Avoid dragging in the icu namespace.
#ifndef U_USING_ICU_NAMESPACE
#define U_USING_ICU_NAMESPACE 0
#endif

CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )

// For details on the meaning of these constants, see:
// http://userguide.icu-project.org/strings/regexp#TOC-Flag-Options

DefineConstant(
  array(
      'name' => 'UREGEX_CASE_INSENSITIVE',
      'type' => Int64
  ));

DefineConstant(
  array(
      'name' => 'UREGEX_COMMENTS',
      'type' => Int64
  ));

DefineConstant(
  array(
      'name' => 'UREGEX_DOTALL',
      'type' => Int64
  ));

DefineConstant(
  array(
      'name' => 'UREGEX_MULTILINE',
      'type' => Int64
  ));

DefineConstant(
  array(
      'name' => 'UREGEX_UWORD',
      'type' => Int64
  ));

DefineConstant(
  array(
      'name' => 'UREGEX_OFFSET_CAPTURE',
      'type' => Int64
  ));

///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
// )

DefineFunction(
  array(
    'name'   => "icu_match",
    'desc'   => "Searches subject for a match to the regular expression given in pattern. See http://userguide.icu-project.org/strings/regexp",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "icu_match() returns the number of times pattern matches. That will be either 0 times (no match) or 1 time because icu_match() will stop searching after the first match. icu_match() returns FALSE if an error occurred.",
    ),
    'args'   => array(
      array(
        'name'   => "pattern",
        'type'   => String,
        'desc'   => "The pattern to search for, as a string.",
      ),
      array(
        'name'   => "subject",
        'type'   => String,
        'desc'   => "The input string.",
      ),
      array(
        'name'   => "matches",
        'type'   => Variant | Reference,
        'value'  => "null",
        'desc'   => "If matches is provided, then it is filled with the results of search. \$matches[0] will contain the text that matched the full pattern, \$matches[1] will have the text that matched the first captured parenthesized subpattern, and so on.",
      ),
      array(
        'name'   => "flags",
        'type'   => Int64,
        'value'  => "0",
        'desc'   => "OR together a combination of UREGEX_* constants."
      ),
    )
  ));

DefineFunction(
  array(
    'name'   => "icu_transliterate",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => String,
    ),
    'args'   => array(
      array(
        'name'   => "str",
        'type'   => String,
      ),
      array(
        'name'   => "remove_accents",
        'type'   => Boolean,
      ),
    ),
    'taint_observer' => array(
      'set_mask'   => "TAINT_BIT_MUTATED",
      'clear_mask' => "TAINT_BIT_NONE",
    ),
  ));


DefineFunction(
  array(
    'name' => "icu_tokenize",
    'return' => array(
      'type' => StringVec,
    ),
    'args' => array(
      array(
        'name' => "text",
        'type' => String,
      ),
    ),
    // NB: TaintObserver declared in f_icu_tokenize to avoid tainting _B_, _E_
    'taint_observer' => false,
  ));

///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()

