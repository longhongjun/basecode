<?php
/**
 * Automatically generated by running "php schema.php apd".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP

CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )


///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
// )

DefineFunction(
  array(
    'name'   => "override_function",
    'desc'   => "Overrides built-in functions by replacing them in the symbol table.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'args'   => array(
      array(
        'name'   => "name",
        'type'   => String,
        'desc'   => "The function to override.",
      ),
      array(
        'name'   => "args",
        'type'   => String,
        'desc'   => "The function arguments, as a comma separated string.\n\nUsually you will want to pass this parameter, as well as the function_code parameter, as a single quote delimited string. The reason for using single quoted strings, is to protect the variable names from parsing, otherwise, if you use double quotes there will be a need to escape the variable names, e.g. \\\$your_var.",
      ),
      array(
        'name'   => "code",
        'type'   => String,
        'desc'   => "The new code for the function.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "rename_function",
    'desc'   => "Renames a orig_name to new_name in the global function table. Useful for temporarily overriding built-in functions.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'args'   => array(
      array(
        'name'   => "orig_name",
        'type'   => String,
        'desc'   => "The original function name.",
      ),
      array(
        'name'   => "new_name",
        'type'   => String,
        'desc'   => "The new name for the original_name function.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "apd_set_browser_trace",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "apd_set_pprof_trace",
    'desc'   => "Starts debugging to pprof_{process_id} in the dump directory.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => String,
      'desc'   => "Returns path of the destination file.",
    ),
    'args'   => array(
      array(
        'name'   => "dumpdir",
        'type'   => String,
        'value'  => "null_string",
        'desc'   => "The directory in which the profile dump file is written. If not set, the apd.dumpdir setting from the php.ini file is used.",
      ),
      array(
        'name'   => "frament",
        'type'   => String,
        'value'  => "null_string",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "apd_set_session_trace_socket",
    'desc'   => "Connects to the specified tcp_server (eg. tcplisten) and sends debugging data to the socket.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'args'   => array(
      array(
        'name'   => "ip_or_filename",
        'type'   => String,
        'desc'   => "IP or Unix Domain socket (like a file) of the TCP server.",
      ),
      array(
        'name'   => "domain",
        'type'   => Int32,
        'desc'   => "Can be AF_UNIX for file based sockets or APD_AF_INET for standard tcp/ip.",
      ),
      array(
        'name'   => "port",
        'type'   => Int32,
        'desc'   => "You can use any port, but higher numbers are better as most of the lower numbers may be used by other system services.",
      ),
      array(
        'name'   => "mask",
        'type'   => Int32,
        'desc'   => "An integer which is formed by adding together the XXX_TRACE constants.\n\nIt is not recommended to use MEMORY_TRACE. It is very slow and does not appear to be accurate. ASSIGNMENT_TRACE is not implemented yet.\n\nTo turn on all functional traces (TIMING, FUNCTIONS, ARGS SUMMARY (like strace -c)) use the value 99",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "apd_stop_trace",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "apd_breakpoint",
    'desc'   => "This can be used to stop the running of your script, and await responses on the connected socket. To step the program, just send enter (a blank line), or enter a php command to be executed.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "apd_continue",
    'desc'   => "Usually sent via the socket to restart the interpreter.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "apd_echo",
    'desc'   => "Usually sent via the socket to request information about the running script.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'args'   => array(
      array(
        'name'   => "output",
        'type'   => String,
        'desc'   => "The debugged variable.",
      ),
    ),
    'taint_observer' => false,
  ));


///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()

