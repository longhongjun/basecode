<?php
/**
 * Automatically generated by running "php schema.php json".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP

CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )

DefineConstant(
  array(
    'name'   => "JSON_HEX_TAG",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "JSON_HEX_AMP",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "JSON_HEX_APOS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "JSON_HEX_QUOT",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "JSON_FORCE_OBJECT",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "JSON_NUMERIC_CHECK",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "JSON_UNESCAPED_SLASHES",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "JSON_PRETTY_PRINT",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "JSON_FB_LOOSE",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "JSON_FB_UNLIMITED",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "JSON_FB_EXTRA_ESCAPES",
    'type'   => Int64,
  ));

///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
// )

DefineFunction(
  array(
    'name'   => "json_encode",
    'desc'   => "Returns a string containing the JSON representation of value.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => String,
      'desc'   => "Returns a JSON encoded string on success.",
    ),
    'args'   => array(
      array(
        'name'   => "value",
        'type'   => Variant,
        'desc'   => "The value being encoded. Can be any type except a resource.\n\nThis function only works with UTF-8 encoded data.",
      ),
      array(
        'name'   => "options",
        'type'   => Variant,
        'value'  => "0",
        'desc'   => "Bitmask consisting of JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_FORCE_OBJECT.",
      ),
    ),
    'taint_observer' => array(
      'set_mask'   => "TAINT_BIT_MUTATED",
      'clear_mask' => "TAINT_BIT_NONE",
    ),
  ));

DefineFunction(
  array(
    'name'   => "json_decode",
    'desc'   => "Takes a JSON encoded string and converts it into a PHP variable.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the value encoded in json in appropriate PHP type. Values true, false and null (case-insensitive) are returned as TRUE, FALSE and NULL respectively. NULL is returned if the json cannot be decoded or if the encoded data is deeper than the recursion limit.",
    ),
    'args'   => array(
      array(
        'name'   => "json",
        'type'   => String,
        'desc'   => "The json string being decoded.\n\nThis function only works with UTF-8 encoded data.",
      ),
      array(
        'name'   => "assoc",
        'type'   => Boolean,
        'value'  => "false",
        'desc'   => "When TRUE, returned objects will be converted into associative arrays.",
      ),
      array(
        'name'   => "options",
        'type'   => Variant,
        'value'  => "0",
        'desc'   => "User specified recursion depth.",
      ),
    ),
    'taint_observer' => array(
      'set_mask'   => "TAINT_BIT_MUTATED",
      'clear_mask' => "TAINT_BIT_NONE",
    ),
  ));


///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()

