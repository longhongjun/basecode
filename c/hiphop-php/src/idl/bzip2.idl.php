<?php
/**
 * Automatically generated by running "php schema.php bzip2".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP

CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )


///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
// )

DefineFunction(
  array(
    'name'   => "bzclose",
    'desc'   => "Closes the given bzip2 file pointer.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'args'   => array(
      array(
        'name'   => "bz",
        'type'   => Resource,
        'desc'   => "The file pointer. It must be valid and must point to a file successfully opened by bzopen().",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "bzopen",
    'desc'   => "bzopen() opens a bzip2 (.bz2) file for reading or writing.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "If the open fails, bzopen() returns FALSE, otherwise it returns a pointer to the newly opened file.",
    ),
    'args'   => array(
      array(
        'name'   => "filename",
        'type'   => String,
        'desc'   => "The name of the file to open.",
      ),
      array(
        'name'   => "mode",
        'type'   => String,
        'desc'   => "Similar to the fopen() function, only 'r' (read) and 'w' (write) are supported. Everything else will cause bzopen to return FALSE.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "bzread",
    'desc'   => "bzread() reads from the given bzip2 file pointer.\n\nReading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the uncompressed data, or FALSE on error.",
    ),
    'args'   => array(
      array(
        'name'   => "bz",
        'type'   => Resource,
        'desc'   => "The file pointer. It must be valid and must point to a file successfully opened by bzopen().",
      ),
      array(
        'name'   => "length",
        'type'   => Int32,
        'value'  => "1024",
        'desc'   => "If not specified, bzread() will read 1024 (uncompressed) bytes at a time.",
      ),
    ),
    'taint_observer' => array(
      'set_mask'   => "TAINT_BIT_ALL_NO_TRACE",
      'clear_mask' => "TAINT_BIT_NONE",
    ),
  ));

DefineFunction(
  array(
    'name'   => "bzwrite",
    'desc'   => "bzwrite() writes a string into the given bzip2 file stream.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns the number of bytes written, or FALSE on error.",
    ),
    'args'   => array(
      array(
        'name'   => "bz",
        'type'   => Resource,
        'desc'   => "The file pointer. It must be valid and must point to a file successfully opened by bzopen().",
      ),
      array(
        'name'   => "data",
        'type'   => String,
        'desc'   => "The written data.",
      ),
      array(
        'name'   => "length",
        'type'   => Int32,
        'value'  => "0",
        'desc'   => "If supplied, writing will stop after length (uncompressed) bytes have been written or the end of data is reached, whichever comes first.",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "bzflush",
    'desc'   => "Forces a write of all buffered bzip2 data for the file pointer bz.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'args'   => array(
      array(
        'name'   => "bz",
        'type'   => Resource,
        'desc'   => "The file pointer. It must be valid and must point to a file successfully opened by bzopen().",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "bzerrstr",
    'desc'   => "Gets the error string of any bzip2 error returned by the given file pointer.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => String,
      'desc'   => "Returns a string containing the error message.",
    ),
    'args'   => array(
      array(
        'name'   => "bz",
        'type'   => Resource,
        'desc'   => "The file pointer. It must be valid and must point to a file successfully opened by bzopen().",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "bzerror",
    'desc'   => "Returns the error number and error string of any bzip2 error returned by the given file pointer.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns an associative array, with the error code in the errno entry, and the error message in the errstr entry.",
    ),
    'args'   => array(
      array(
        'name'   => "bz",
        'type'   => Resource,
        'desc'   => "The file pointer. It must be valid and must point to a file successfully opened by bzopen().",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "bzerrno",
    'desc'   => "Returns the error number of any bzip2 error returned by the given file pointer.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Int64,
      'desc'   => "Returns the error number as an integer.",
    ),
    'args'   => array(
      array(
        'name'   => "bz",
        'type'   => Resource,
        'desc'   => "The file pointer. It must be valid and must point to a file successfully opened by bzopen().",
      ),
    ),
    'taint_observer' => false,
  ));

DefineFunction(
  array(
    'name'   => "bzcompress",
    'desc'   => "bzcompress() compresses the given string and returns it as bzip2 encoded data.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "The compressed string or number of error in case of error.",
    ),
    'args'   => array(
      array(
        'name'   => "source",
        'type'   => String,
        'desc'   => "The string to compress.",
      ),
      array(
        'name'   => "blocksize",
        'type'   => Int32,
        'value'  => "4",
        'desc'   => "Specifies the blocksize used during compression and should be a number from 1 to 9 with 9 giving the best compression, but using more resources to do so.",
      ),
      array(
        'name'   => "workfactor",
        'type'   => Int32,
        'value'  => "0",
        'desc'   => "Controls how the compression phase behaves when presented with worst case, highly repetitive, input data. The value can be between 0 and 250 with 0 being a special case.\n\nRegardless of the workfactor, the generated output is the same.",
      ),
    ),
    'taint_observer' => array(
      'set_mask'   => "TAINT_BIT_MUTATED",
      'clear_mask' => "TAINT_BIT_NONE",
    ),
  ));

DefineFunction(
  array(
    'name'   => "bzdecompress",
    'desc'   => "bzdecompress() decompresses the given string containing bzip2 encoded data.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "The decompressed string or number of error in case of error.",
    ),
    'args'   => array(
      array(
        'name'   => "source",
        'type'   => String,
        'desc'   => "The string to decompress.",
      ),
      array(
        'name'   => "small",
        'type'   => Int32,
        'value'  => "0",
        'desc'   => "If TRUE, an alternative decompression algorithm will be used which uses less memory (the maximum memory requirement drops to around 2300K) but works at roughly half the speed.\n\nSee the » bzip2 documentation for more information about this feature.",
      ),
    ),
    'taint_observer' => array(
      'set_mask'   => "TAINT_BIT_MUTATED",
      'clear_mask' => "TAINT_BIT_NONE",
    ),
  ));


///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()

