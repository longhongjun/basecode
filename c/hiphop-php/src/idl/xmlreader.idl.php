<?php
/**
 * Automatically generated by running "php schema.php xmlreader2".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP
#include <libxml/tree.h>
#include <libxml/xmlreader.h>
#include <libxml/uri.h>
#include <runtime/base/file/file.h>

typedef int (*xmlreader_read_int_t)(xmlTextReaderPtr reader);
typedef unsigned char *(*xmlreader_read_char_t)(xmlTextReaderPtr reader);
typedef const unsigned char *(*xmlreader_read_const_char_t)(xmlTextReaderPtr reader);
typedef unsigned char *(*xmlreader_read_one_char_t)(xmlTextReaderPtr reader, const unsigned char *);
CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )


///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
// )


///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "XMLReader",
    'bases'  => array('Sweepable'),
    'desc'   => "",
    'flags'  =>  HasDocComment,
    'footer' => <<<EOT

  private: String read_string_func(xmlreader_read_char_t internal_function);
  private: bool bool_func_no_arg(xmlreader_read_int_t internal_function);
  private: Variant string_func_string_arg(String value, xmlreader_read_one_char_t internal_function);
  private: bool set_relaxng_schema(String source, int type);

 public:
  SmartObject<File>  m_uri;
 private:
  xmlTextReaderPtr        m_ptr;
  xmlParserInputBufferPtr m_input;
  void*                   m_schema;
  void close_impl();
EOT
,
  ));

DefineConstant(
  array(
    'name'   => "NONE",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "ELEMENT",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "ATTRIBUTE",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "TEXT",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "CDATA",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "ENTITY_REF",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "ENTITY",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "PI",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "COMMENT",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "DOC",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "DOC_TYPE",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "DOC_FRAGMENT",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "NOTATION",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "WHITESPACE",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "SIGNIFICANT_WHITESPACE",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "END_ELEMENT",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "END_ENTITY",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "XML_DECLARATION",
    'type'   => Int64,
  ));


/* Constants for Parser options */
DefineConstant(
  array(
    'name'   => "LOADDTD",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "DEFAULTATTRS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "VALIDATE",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "SUBST_ENTITIES",
    'type'   => Int64,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
  ));

DefineFunction(
  array(
    'name'   => "open",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "uri",
        'type'   => String,
      ),
      array(
        'name'   => "encoding",
        'type'   => String,
        'value'  => 'null_string',
      ),
      array(
        'name'   => "options",
        'type'   => Int64,
        'value'  => "0",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "XML",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "source",
        'type'   => String,
      ),
      array(
        'name'   => "encoding",
        'type'   => String,
        'value'  => 'null_string',
      ),
      array(
        'name'   => "options",
        'type'   => Int64,
        'value'  => "0",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "close",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
  ));

DefineFunction(
  array(
    'name'   => "read",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
  ));

DefineFunction(
  array(
    'name'   => "next",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "localname",
        'type'   => String,
        'value'  => 'null_string',
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "readString",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => String,
    ),
  ));

DefineFunction(
  array(
    'name'   => "readInnerXML",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => String,
    ),
  ));

DefineFunction(
  array(
    'name'   => "readOuterXML",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => String,
    ),
  ));

DefineFunction(
  array(
    'name'   => "moveToNextAttribute",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
  ));

DefineFunction(
  array(
    'name'   => "getAttribute",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "name",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getAttributeNo",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "index",
        'type'   => Int64,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getAttributeNs",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "name",
        'type'   => String,
      ),
      array(
        'name'   => "namespaceURI",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "moveToAttribute",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "name",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "moveToAttributeNo",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "index",
        'type'   => Int64,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "moveToAttributeNs",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "name",
        'type'   => String,
      ),
      array(
        'name'   => "namespaceURI",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "moveToElement",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
  ));

DefineFunction(
  array(
    'name'   => "moveToFirstAttribute",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
  ));

DefineFunction(
  array(
    'name'   => "isValid",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
  ));

DefineFunction(
  array(
    'name'   => "expand",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
  ));

DefineFunction(
  array(
    'name'   => "__get",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "name",
        'type'   => Variant,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "getParserProperty",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "property",
        'type'   => Int64,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "lookupNamespace",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
    'args'   => array(
      array(
        'name'   => "prefix",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "setSchema",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "source",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "setParserProperty",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "property",
        'type'   => Int64,
      ),
      array(
        'name'   => "value",
        'type'   => Boolean,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "setRelaxNGSchema",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "filename",
        'type'   => String,
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "setRelaxNGSchemaSource",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
    ),
    'args'   => array(
      array(
        'name'   => "source",
        'type'   => String,
      ),
    ),
  ));

EndClass(
);

